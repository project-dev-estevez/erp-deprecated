<?php
defined('BASEPATH') or exit('No direct script access allowed');
//prueba push
class Almacen extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('almacen_model');
        $this->load->model('departamentos_model');
        $this->load->model('personal_model');
        $this->load->model('root_model');
        $this->load->model('racks_model');

        if (!$this->session->userdata('is_logued_in')) {
            //redirect(base_url() . 'login');
        }
        if($this->root_model->getStatus() == 0){
            $this->session->sess_destroy();
            redirect(base_url() . 'login');        
        }
    }
    public function index()
    {
        if ($this->session->userdata('id') == 50) {
            $this->almacen_kuali();
           return;
        }
        if ($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != '') {
            $this->almacenes_encargado();
            return;
        }
        switch ($this->session->userdata('tipo')) {
      case 1:
        $this->almacen_alto_costo();
        break;
    
      case 4:
        $this->almacen();
        break;
      case 6:
        $this->almacen();
        break;
      case 2:
        $this->almacen_sistemas();
        break;
      case 8:
        $this->almacen();
        break;
      case 0:
        $this->almacen();
        break;
      case 11:
        $this->almacen();
        break;
      case 9:
        $this->almacen();
        break;
      case 13:
        $this->almacen_area_medica();
        break;
      case 17:
        $this->almacen();
        break;
      case 19:
        $this->almacen();
        break;
      default:
        redirect(base_url());
        break;
    }
    }
    public function almacen()
    {
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->model('proyectos_model');
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['sitios'] = $this->almacen_model->sitios();
        $datos['proyectos'] = $this->proyectos_model->proyectos();
        $datos['racks'] = $this->racks_model->racks();
        $datos['racks_dp'] = $this->racks_model->racks_dp();
        //$datos[''] = $this->almacen_model->
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        //$datos['proyectos'] = $this->almacen_model->proyectos();
        //$datos['entradas_almacen_general'] = $this->almacen_model->entradasAlmacenGeneral(ID_ALMACEN_GENERAL);
        //$datos['salidas_almacen_general'] = $this->almacen_model->salidasAlmacenGeneral(ID_ALMACEN_GENERAL);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        //$datos['devoluciones_almacen_general'] = $this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL);
        //$datos['inventario_almacen'] = $this->almacen_model->inventario_almacen(ID_ALMACEN_GENERAL);
        $this->load->view('almacen/ver-almacen', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //Carga la vista de los almacenes que tiene a cargo
    public function almacenes_encargado()
    {
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->model('proyectos_model');
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['sitios'] = $this->almacen_model->sitios();
        $datos['proyectos'] = $this->proyectos_model->proyectos();
        $datos['racks'] = $this->racks_model->racks();
        $datos['racks_dp'] = $this->racks_model->racks_dp();
        //$datos[''] = $this->almacen_model->
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        //$datos['proyectos'] = $this->almacen_model->proyectos();
        //$datos['entradas_almacen_general'] = $this->almacen_model->entradasAlmacenGeneral(ID_ALMACEN_GENERAL);
        //$datos['salidas_almacen_general'] = $this->almacen_model->salidasAlmacenGeneral(ID_ALMACEN_GENERAL);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        //$datos['devoluciones_almacen_general'] = $this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL);
        //$datos['inventario_almacen'] = $this->almacen_model->inventario_almacen(ID_ALMACEN_GENERAL);
        $this->load->view('almacen/almacenes-encargado', $datos);
        $this->load->view('plantillas/footer', $datos);
    }
    public function mostrarAlmacenes()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenes" => $this->almacen_model->almacenes($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->almacenes($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSubAlmacenes()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "subalmacenes" => $this->almacen_model->getSubAlmacenes($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->getSubAlmacenes($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSubProyectos()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "subproyectos" => $this->almacen_model->getSubProyectos($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->getSubProyectos($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenesEncargado()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenes" => $this->almacen_model->almacenes_encargados($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->almacenes_encargados($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function mostrarProyectos()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "proyectos" => $this->almacen_model->proyectos($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->proyectos($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function mostrarDevolucionesAlmacenGeneral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "devolucionesAlmacenGeneral" => $this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }
    public function mostrarSalidasAlmacenGeneral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "salidasAlmacenGeneral" => $this->almacen_model->salidasAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->salidasAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSalidasContratistas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "salidasContratistas" => $this->almacen_model->salidasContratistas($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->salidasContratistas($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarDevolucionesContratistas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "devolucionesContratistas" => $this->almacen_model->devolucionesContratistas($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->devolucionesContratistas($buscar)),
            "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarEntradasAlmacenGeneral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "entradasAlmacenGeneral" => $this->almacen_model->entradasAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->entradasAlmacenGeneral(ID_ALMACEN_GENERAL, $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function mostrarProductosAlmacenGeneral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productosAlmacenGeneral" => $this->almacen_model->inventarioAlmacenGeneral($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenGeneral($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function mostrarProductosAlmacenGeneralActivos()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productosAlmacenGeneralActivos" => $this->almacen_model->inventarioAlmacenGeneralActivos($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenGeneralActivos($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function mostrarProductosAlmacenGeneralConsumibles()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productosAlmacenGeneralConsumibles" => $this->almacen_model->inventarioAlmacenGeneralConsumibles($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenGeneralConsumibles($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    //Manda las herramientas en almacen general
    public function mostrarProductosAlmacenGeneralHerramientas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productosAlmacenGeneralHerramientas" => $this->almacen_model->inventarioAlmacenGeneralHerramientas($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenGeneralHerramientas($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    //Manda intentario de SH
    public function mostrarProductosSeguridadHigiene()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productosSeguridadHigiene" => $this->almacen_model->inventarioSeguridadHigiene($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioSeguridadHigiene($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    public function detalle($uid)
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['proyecto'] = $this->proyectos_model->getProyectoByUid($uid);
        $datos['uid'] = $uid;
        //$datos['reporte_proyectos'] = $this->almacen_model->reporteProyectos($uid);
        $datos['aux'] = 'si';
        $this->load->view('almacen/detalle-almacen', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarReportesProyecto()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "reportes" => $this->almacen_model->reporteProyectos($this->input->post('uid_proyecto'), $this->input->post('tipo'), $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->reporteProyectos($this->input->post('uid_proyecto'), $this->input->post('tipo'), $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function detalle_almc($uid)
    {
        $this->load->model('proyectos_model');
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();        
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid);
        //if ($datos['almacen']->tbl_almacenes_idtbl_almacenes == null) {
            $datos['almacenes'] = $this->almacen_model->almacenes();           
        //}else{
        //    $datos['almacenes'] = $this->almacen_model->getSubAlmacenesById($datos['almacen']->tbl_almacenes_idtbl_almacenes);            
        //}
        if($datos['almacen']->idtbl_almacenes != 1 && $datos['almacen']->idtbl_almacenes != 16 && $datos['almacen']->idtbl_almacenes != 2 && $datos['almacen']->idtbl_almacenes != 23 && $datos['almacen']->idtbl_almacenes != 28 && $datos['almacen']->idtbl_almacenes != 29 && $datos['almacen']->idtbl_almacenes != 30 && $datos['almacen']->idtbl_almacenes != 122){
        $datos['prueba'] = $this->almacen_model->actualizar_existencias_cuadre($datos['almacen']->idtbl_almacenes);
        }
        $datos['listadoSegmentos'] = $this->proyectos_model->getSegmentosByProyecto($uid);
        $datos['listadoSubAlmacenes'] = $this->almacen_model->getSubAlmacenes();
        $datos['listadoAlmacenesSubProyectos'] = $this->almacen_model->getAlmacenesSubProyectos($uid);
        $datos['inventario_almacen'] = $this->almacen_model->productosAlmacenCli($datos['almacen']->idtbl_almacenes);
        $datos['inventario_almacen_AC'] = $this->almacen_model->productosAlmacenCliAC($datos['almacen']->idtbl_almacenes);
        $datos['aux'] = 'no';
        $this->load->view('almacen/detalle-almacen', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarProductosAlmacenCli()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->productosAlmacenCli($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->productosAlmacenCli($datos['almacen']->idtbl_almacenes, $buscar)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarProductosAlmacenCliCuadre()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->cuadre_materiales_inventario($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->cuadre_materiales_inventario($datos['almacen']->idtbl_almacenes, $buscar)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarProductosAlmacenCliActivo()
    {                    
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar                
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->productosAlmacenCliActivo($datos['almacen']->idtbl_almacenes, $buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->productosAlmacenCliActivo($datos['almacen']->idtbl_almacenes, $buscar, $buscar2)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }            

    public function mostrarProductosAlmacenCliHerramienta()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');    
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->productosAlmacenCliHerramienta($datos['almacen']->idtbl_almacenes, $buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->productosAlmacenCliHerramienta($datos['almacen']->idtbl_almacenes, $buscar, $buscar2)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarProductosAlmacenCliConsumible()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->productosAlmacenCliConsumible($datos['almacen']->idtbl_almacenes, $buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->productosAlmacenCliConsumible($datos['almacen']->idtbl_almacenes, $buscar, $buscar2)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar la explosión de insumos
    public function mostrarExplosionInsumos()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "insumos" => $this->almacen_model->explosionInsumosCli($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->explosionInsumosCli($datos['almacen']->idtbl_almacenes, $buscar)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar la explosión de insumos
    public function mostrarExplosionInsumos111()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "insumos" => $this->almacen_model->explosionInsumosCli111($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->explosionInsumosCli111($datos['almacen']->idtbl_almacenes, $buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }
    
    //Función para mostrar la explosión de insumos
    public function mostrarExplosionInsumos112()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "insumos" => $this->almacen_model->explosionInsumosCli112($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->explosionInsumosCli112($datos['almacen']->idtbl_almacenes, $buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar la explosión de insumos
    public function mostrarExplosionInsumos109()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "insumos" => $this->almacen_model->explosionInsumosCli109($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->explosionInsumosCli109($datos['almacen']->idtbl_almacenes, $buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    } 

    public function mostrarProductosAlmacenCliAC()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "productos" => $this->almacen_model->productosAlmacenCliAC($datos['almacen']->idtbl_almacenes, $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->productosAlmacenCliAC($datos['almacen']->idtbl_almacenes, $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    /*public function mostrarEntradasAlmacenCli() {
      $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
      //valor a buscar
      $buscar = $this->input->post('buscar');
      $numeroPagina = $this->input->post('nropagina');
      $cantidad = 10;
      $inicio = ($numeroPagina - 1) * $cantidad;
      $data = array(
        "entradas" => $this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar, $inicio, $cantidad),
        "totalRegistros" => count($this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar)),
        "cantidad" => $cantidad
      );

      echo json_encode($data);
    }

    public function mostrarSalidasAlmacenCli() {
      $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
      //valor a buscar
      $buscar = $this->input->post('buscar');
      $numeroPagina = $this->input->post('nropagina');
      $cantidad = 10;
      $inicio = ($numeroPagina - 1) * $cantidad;
      $data = array(
        "salidas" => $this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar, $inicio, $cantidad),
        "totalRegistros" => count($this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar)),
        "cantidad" => $cantidad
      );

      echo json_encode($data);
    }*/

    public function mostrarReportesAlmacenCli()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "reportes" => $this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarReportesMovTraspasosAlmacenCli()
    {
        $datos['almacen'] = $this->almacen_model->detalle_almacen($this->input->post('uid_almacen'));
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "reportes" => $this->almacen_model->reporteMovTraspasosAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->reporteMovTraspasosAlmacenes($datos['almacen']->idtbl_almacenes, $this->input->post('tipo'), $buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    //Para mostrar la explosión de insumos de todos los almacenes
    public function mostrarExplosionInsumosReporte()
    {        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "insumos" => $this->almacen_model->reporteExplosionInsumos($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->reporteExplosionInsumos($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function almacen_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_alto_costo');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Alto Costo';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_ALTO_COSTO);
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->view('almacen/detalle-almacen-alto-costo', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_sistemas()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_sistemas');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Sistemas';  
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_SISTEMAS);
        $datos['celulares'] = $this->almacen_model->celulares();
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->view('almacen/detalle-almacen-sistemas', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_kuali()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_kuali');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen Kuali';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_KUALI);
        //$datos['reportes'] = $this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes);
        //$datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        $datos['aux'] = 'no';
        $this->load->view('almacen/detalle-almacen-kuali', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_refacciones_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_REFACCIONES_CONTROL_VEHICULAR);
        //$datos['reportes'] = $this->almacen_model->reporteAlmacenes($datos['almacen']->idtbl_almacenes);
        //$datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        $datos['aux'] = 'no';
        $this->load->view('almacen/detalle-almacen-refacciones-control-vehicular', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_autos_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Autos Control Vehicular';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->model('estados_model');
        $datos['estados'] = $this->estados_model->estados();
        $this->load->view('almacen/detalle-almacen-autos-control-vehicular', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_tarjetas_gasolina()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_tarjetas_gasolina');
        //if (!($this->permisos > 0)) {
        //    redirect(base_url());
        //}
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Tarjetas Gasolina';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_TARJETAS_GASOLINA);
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->model('estados_model');
        $datos['estados'] = $this->estados_model->estados();
        $this->load->view('almacen/detalle-almacen-tarjetas-gasolina', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function combustible_autos_control_vehicular(){
        $this->permisos = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Combustible Autos Control Vehicular';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        $datos['proyectos'] = $this->proyectos_model->proyectos();
        $this->load->model('estados_model');
        $datos['estados'] = $this->estados_model->estados();
        $datos['ecos'] = $this->almacen_model->getAutosControlVehicular();
        $this->load->view('almacen/combustible-almacen-autos-control-vehicular.php', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function tramite_autos_control_vehicular(){
        $this->permisos = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Combustible Autos Control Vehicular';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        $this->load->model('estados_model');
        $datos['estados'] = $this->estados_model->estados();
        $this->load->view('almacen/tramites-autos-control-vehicular.php', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_area_medica()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_area_medica');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Área Médica';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AREA_MEDICA);
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->view('almacen/detalle-almacen-area-medica', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function almacen_seguridad_e_higiene()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        //if (!($this->permisos > 0)) {
        //    redirect(base_url());
        //}
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén Seguridad E Higiene';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacenes'] = $this->almacen_model->almacenes(); 
        //$datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AREA_MEDICA);
        //if ($datos['almacen']) {
        //  $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        //}
        $this->load->view('almacen/detalle-almacen-seguridad-e-higiene', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarAlmacenAltoCosto()
    {
        //valor a buscar
        $select = $this->input->post('selectAC');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenAltoCosto" => $this->almacen_model->inventarioAlmacenAltoCosto($buscar, $select, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenAltoCosto($buscar, $select)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenSistemasEC()
    {
        //valor a buscar
        $select = $this->input->post('selectAC');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenSistemas" => $this->almacen_model->inventarioAlmacenSistemasEC($buscar, $select, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenSistemasEC($buscar, $select)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenAltoCostoConsumibles()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenAltoCostoConsumibles" => $this->almacen_model->inventarioAlmacenAltoCostoConsumibles($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenAltoCostoConsumibles($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function inventarioAlmacenSistemasHerramienta(){
        //valor a buscar
        $select = $this->input->post('h');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "almacenSistemasHerramienta" => $this->almacen_model->inventarioAlmacenSistemasHerramienta($buscar, $select, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->inventarioAlmacenSistemasHerramienta($buscar, $select)),
            "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarAlmacenSistemasConsumibles(){
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenSistemasConsumibles" => $this->almacen_model->inventarioAlmacenSistemasConsumibles($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenSistemasConsumibles($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenSistemasTelefonos(){
        //valor a buscar
        $select = $this->input->post('selectAC');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "telefonos" => $this->almacen_model->inventarioAlmacenSistemasTelefonos($buscar, $inicio, $cantidad),      
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenSistemasTelefonos($buscar, $select)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenAreaMedica()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenAreaMedica" => $this->almacen_model->inventarioAlmacenAreaMedica($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenAreaMedica($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenAutosControlVehicular()
    {
        //valor a buscar
        $select = $this->input->post('selectCV');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenAutosControlVehicular" => $this->almacen_model->inventarioAlmacenAutosControlVehicular($buscar, $select, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenAutosControlVehicular($buscar, $select)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarAlmacenTarjetas()
    {
        //valor a buscar
        $select = $this->input->post('selectCV');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenTarjetas" => $this->almacen_model->inventarioAlmacenTarjetas($buscar, $select, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenTarjetas($buscar, $select)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function obtenerPersonal()
    {
        $data = array(
      "usuarios" => $datos['users'] = $this->personal_model->todos_los_usuarios('interno'),
    );
        echo json_encode($data);
    }

    public function mostrarAlmacenAreaMedicaConsumibles()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "almacenAreaMedicaConsumibles" => $this->almacen_model->inventarioAlmacenAreaMedicaConsumibles($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->inventarioAlmacenAreaMedicaConsumibles($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function asignaciones($tipo_asignacion='')
    {
        $datos['titulo'] = 'Asignaciones';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['tipo_asignacion'] = $tipo_asignacion;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        //$datos['asignaciones'] = $this->almacen_model->asignaciones();
        $this->load->view('almacen/ver-asignaciones', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarAsignaciones()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "asignaciones" => $this->almacen_model->asignaciones($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->asignaciones($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function traspasos($almacen)
    {
        $datos['titulo'] = 'Asignaciones';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['almacen'] = $almacen;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        //$datos['asignaciones'] = $this->almacen_model->asignaciones();
        $this->load->view('almacen/ver-traspasos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarTraspasos()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "traspasos" => $this->almacen_model->traspasos($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->traspasos($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function nueva_entrada_ac($uid)
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');        
        if (!($this->permisos_almacen_alto_costo > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['catalogo'] = $this->almacen_model->catalogo($tipo='alto-costo');
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['uid_almacen'] = $uid;
        $this->load->view('almacen/nueva-entrada-alto-costo', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada_autos_control_vehicular($uid)
    {
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if (!($this->permisos_almacen_autos_control_vehicular > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        if($uid == '7c01113a01212'){
            $datos['catalogo'] = $this->almacen_model->todoCatalogo(8);
        }else{
            $datos['catalogo'] = $this->almacen_model->todoCatalogo(4);
        }
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['uid_almacen'] = $uid;
        $this->load->view('almacen/nueva-entrada-autos-control-vehicular', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada_sistemas($uid)
    {
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if (!($this->permisos_almacen_sistemas > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['catalogo'] = $this->almacen_model->catalogo("sistemas");
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['uid_almacen'] = $uid;
        $this->load->view('almacen/nueva-entrada-sistemas', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada_area_medica($uid)
    {
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        if (!($this->permisos_almacen_area_medica > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['catalogo'] = $this->almacen_model->todoCatalogo(7);
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['uid_almacen'] = $uid;
        $this->load->view('almacen/nueva-entrada-area-medica', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada_almacen_cliente($uid)
    {
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        if ($uid == '5f5661ca14d2f') {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['uid_almacen'] = $uid;
        $datos['listadoSegmentos'] = $this->proyectos_model->getSegmentosByProyecto($uid);
        $datos['proyecto_almacen'] = $this->proyectos_model->getProyectoAlmacen($uid);
        $this->load->view('almacen/nueva-entrada-almacen-cliente', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada_almacen_cliente_explosion($uid)
    {
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['uid_almacen'] = $uid;
        $datos['id_almacen'] = $this->almacen_model->getIdAlmacen($uid);
        $datos['detalle_explosiones'] = $this->almacen_model->detalle_explosiones($uid);
        //$datos['entradas_explosiones'] = $this->almacen_model->entrada_explosiones($uid);
        $datos['listadoSegmentos'] = $this->proyectos_model->getSegmentosByProyecto($uid);
        $datos['proyecto_almacen'] = $this->proyectos_model->getProyectoAlmacen($uid);
        $this->load->view('almacen/nueva-entrada-almacen-cliente-explosion', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //Función para mostrar explosión de insumos
    public function nueva_explosion_insumos($uid)
    {
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Explosión de Insumos';
        $datos['clase_pagina'] = 'nueva-entrada-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        if ($uid == '5f5661ca14d2f') {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['uid_almacen'] = $uid;
        $datos['listadoSegmentos'] = $this->proyectos_model->getSegmentosByProyecto($uid);
        $datos['proyecto_almacen'] = $this->proyectos_model->getProyectoAlmacen($uid);
        $this->load->view('almacen/nueva-explosion-insumos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_entrada($uid)
    {
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        if (!($this->permisos_almacen > 1 || $this->permisos_almacen_area_medica)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Nueva Entrada';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        $datos['detalle_almacen'] = $this->almacen_model->detalle_almacen($uid);
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $this->load->view('almacen/nueva-entrada', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_asignacion($uid, $tipo)
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0 || $permisos_almacen_area_medica > 0 || $permisos_almacen_autos_control_vehicular > 0 || $permisos_almacen_sistemas > 0 || $permisos_almacen_seguridad_e_higiene > 0) {
            $this->load->model('proyectos_model');
            $this->load->model('personal_model');
            if ($this->session->userdata('tipo') == 3) {
                $this->load->model('controlvehicular_model');
                $datos['prueba_manejo'] = $this->controlvehicular_model->getPruebaManejo($uid);
            }
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Almacén | Asignación';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['detalle'] = $this->personal_model->detalle_usuario($uid);
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['uid_asignacion'] = uniqid();
            if ($this->session->userdata('tipo')==1) {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_ALTO_COSTO, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            } elseif ($this->session->userdata('tipo') == 3 && $tipo != 'tarjetas') {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            } elseif ($this->session->userdata('tipo') == 3 && $tipo == 'tarjetas') {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_TARJETAS_GASOLINA, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            } elseif ($this->session->userdata('tipo')==14 || $this->departamentos_model->permisos('almacen_area_medica')>1) {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_AREA_MEDICA, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            } elseif ($this->session->userdata('tipo')==2) {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_SISTEMAS, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            } elseif($this->session->userdata('tipo')==10){
                $datos['folio'] = $this->almacen_model->iniciar_asignacion(UID_ALMACEN_GENERAL, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion'], $tipo);
            }
            $datos['tipo'] = $tipo;
            $datos['uid_usuario'] = $uid;
            if ($this->session->userdata('tipo')==1) {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_ALTO_COSTO);
            } elseif ($this->session->userdata('tipo') == 3 && $tipo != 'tarjetas') {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
            }  elseif ($this->session->userdata('tipo') == 3 && $tipo == 'tarjetas') {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_TARJETAS_GASOLINA);
            }  elseif ($this->session->userdata('tipo')==14 && $this->departamentos_model->permisos('almacen_area_medica')>1) {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AREA_MEDICA);
            } elseif ($this->session->userdata('tipo')==2) {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_SISTEMAS);
            } elseif ($this->session->userdata('tipo')==10) {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_GENERAL);
            }
            if ($datos['almacen']) {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes, $tipo);
            }
            $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
            if ($tipo == 'material') {
                $this->load->view('almacen/nueva-asignacion-material', $datos);
            } else {
                $datos['personal_control_vehicular'] = $this->almacen_model->getPersonalControlVehicular();
                $this->load->view('almacen/nueva-asignacion', $datos);
            }
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    public function nueva_asignacion_refaccion($uid)
    {
        $permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        if ($permisos_almacen_refacciones_control_vehicular > 0) {
            $this->load->model('proyectos_model');
            $this->load->model('personal_model');
            if ($this->session->userdata('tipo') == 3) {
                $this->load->model('controlvehicular_model');
            }
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Almacén | Asignación';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['detalle'] = $this->personal_model->detalle_usuario($uid);
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['uid_asignacion'] = uniqid();
            if ($this->session->userdata('tipo') == 3) {
                $datos['folio'] = $this->almacen_model->iniciar_asignacion_refaccion(UID_ALMACEN_REFACCIONES_CONTROL_VEHICULAR, $datos['detalle']->idtbl_usuarios, $datos['uid_asignacion']);
            }
            $datos['tipo'] = $tipo;
            $datos['uid_usuario'] = $uid;
            if ($this->session->userdata('tipo') == 3) {
                $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_REFACCIONES_CONTROL_VEHICULAR);
            }
            if ($datos['almacen']) {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes, $tipo);
            }
            $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
            $this->load->view('almacen/nueva-asignacion-material', $datos);
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    public function nueva_salida($uid)
    {
        //$this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        //if (!($this->permisos_almacen > 1)) {
        //    redirect(base_url());
        //}
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $this->load->model('racks_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Asignación';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['folio'] = uniqid();
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid);
        if ($datos['almacen']) {
            $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen(ID_ALMACEN_GENERAL);
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/nueva-salida', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_salida_solicitud($uid, $uid_solicitud, $uid_proyecto)
    {
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->solicitudes_asignadas = $this->departamentos_model->permisos('solicitudes_asignadas');
        //if (!($this->permisos_almacen > 1) && !($this->solicitudes_asignadas)) {
        //    redirect(base_url());
        //}
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Asignación';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['solicitud'] = $this->almacen_model->detalle_solicitud($uid_solicitud);
        $datos['folio'] = uniqid();
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid);
        $datos['detalle'] = $this->almacen_model->detalle_solicitud_catalogo_existencias($datos['solicitud']->idtbl_solicitud_material, $datos['solicitud']->tipo_producto, $datos['almacen']->idtbl_almacenes);
        if ($datos['almacen']) {
            $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes, 'general');
        }
        //$datos['catalogo']= $this->almacen_model->catalogo();
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/nueva-salida-default', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function nueva_hoja_asignacion($uid, $tipo)
    {
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['uid'] = $uid;
        $datos['tipo'] = $tipo;
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';        
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-asignacion', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud($id_mantenimiento = null)
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';
        $datos['detalle'] = $this->almacen_model->detalle_mantenimientoById($id_mantenimiento);
        if($datos['detalle'][0]->tbl_clientes_idtbl_clientes == 3 || $datos['detalle'][0]->tbl_clientes_idtbl_clientes == 36 || $datos['detalle'][0]->tbl_clientes_idtbl_clientes == 19){
            $datos['productos'] = $this->almacen_model->productosByService($datos['detalle'][0]->tbl_tipo_red_idtbl_tipo_red, $datos['detalle'][0]->tbl_clientes_idtbl_clientes);
        }
        $datos['id_proyecto'] = $datos['detalle'][0]->tbl_proyectos_idtbl_proyectos;
        $datos['mantenimiento'] = $id_mantenimiento;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_almacen()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';        
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-almacen', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('alto-costo');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('alto-costo');
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-alto-costo', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_sistemas()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud_sistemas');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['chip'] = $this->almacen_model->chip();
        if ($this->session->userdata('tipo') == 2) {
            $datos['catalogo'] = $this->almacen_model->catalogo('sistemas');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('sistemas');
        }        
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_Sistemas();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-sistemas', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_tarjetas()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud_tarjetas');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de tarjetas';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-tarjetas', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_instalacion()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud_instalacion');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de tarjetas';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-instalacion', $datos);
        $this->load->view('plantillas/footer', $datos);
    }
    

    //muestra la vista de Kuali digital y permite crear nueva solicitud/requisición de productos de Kuali digital
    public function solicitud_kuali_digital()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['catalogo'] = $this->almacen_model->catalogo('kuali_digital');
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_kuali();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-kuali-digital', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //muestra la vista de area médica y permite crear nueva solicitud/requisición de productos de Kuali digital
    public function solicitud_area_medica()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['catalogo'] = $this->almacen_model->catalogo('area_medica');
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_medica();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-area-medica', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function getSegmento()
    {
        $resultado = $this->almacen_model->getAllSegmentos($_POST['id']);
        echo json_encode($resultado);
    }

    public function getHojaAsignacion()
    {
        $resultado = $this->almacen_model->getHojaAsignacion();
        echo json_encode($resultado);
    }

    public function getAlmacenesByProject()
    {
        $resultado = $this->almacen_model->getAlmacenesByProject($_POST['id']);
        echo json_encode($resultado);
    }

    public function getMaterialesClientes()
    {
        $resultado = $this->almacen_model->getMaterialesClientes();
        echo json_encode($resultado);
    }

    public function getGeoreferencias()
    {
        $resultado = $this->almacen_model->getGeoreferencias($_POST['id']);
        echo json_encode($resultado);
    }

    public function getGeoreferenciasJustificadas()
    {
        $resultado = $this->almacen_model->getGeoreferenciasJustificadas($_POST['id']);
        echo json_encode($resultado);
    }

    public function getSitiosByProducto()
    {
        $resultado = $this->almacen_model->getSitiosByProducto($_POST['id']);
        echo json_encode($resultado);
    }

    //Obtiene todos los ecos de un id catalogo
    public function getEco()
    {
        $resultado = $this->almacen_model->getAllEcos($_POST['id']);
        echo json_encode($resultado);
    }

    //muestra la vista de seguridad e higiene y permite crear nueva solicitud/requisición de productos de seguridad e higiene
    public function solicitud_almacen_seguridad()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de almacen';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_seguridad();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-almacen-seguridad', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    // Nueva funcion
    public function tipo_recibe()
    {
        $this->load->model('personal_model');
        if ($this->input->post('tipo')) {
            if ($this->input->post('tipo') == 'contratista') {
                $datos['contratistas'] = $this->personal_model->contratistas_solicitudes();
                $datos['supervisores'] = $this->personal_model->todos_los_usuarios('interno');
            } else {
                $datos['personal_recibe'] = $this->personal_model->todos_los_usuarios($this->input->post('tipo'));
            }
            echo json_encode(array(
        $datos
      ));
        } else {
            echo json_encode(array(
        'error' => "Error en POST."
      ));
        }
    }

    // Nueva funcion
    public function getPersonalCuadrilla()
    {
        $this->load->model('personal_model');
            
            $datos['personal_recibe'] = $this->personal_model->getPersonalCuadrilla();
            
            echo json_encode(array($datos));
        
    }

    // Nueva funcion
    public function getPersonalCuadrillaLider()
    {
        $this->load->model('personal_model');
            
            $datos['personal_recibe'] = $this->personal_model->getPersonalCuadrillaLider();
            
            echo json_encode(array($datos));
        
    }

    public function personal_contratista()
    {
        $this->load->model('personal_model');
        if ($this->input->post('contratista')) {
            $datos = $this->personal_model->personal_contratista($this->input->post('contratista'));
            echo json_encode(array(
                $datos
            ));
        } else {
            echo json_encode(array(
        'error' => "Error en POST."
      ));
        }
    }

    public function personal_estatus()
    {
        $this->load->model('personal_model');
        
            $datos = $this->personal_model->personal_estatus($this->input->post('estatus'));
            echo json_encode(array($datos));
        
    }

    //función para traer el catalogo por almacen
    public function catalogo_compra()
    {        
        
            $datos = $this->almacen_model->catalogo_compra($this->input->post('almacen'));
            echo json_encode(array($datos));
        
    }

    //función para traer el catalogo por tipo de servicio
    public function catalogo_servicios()
    {        
        
            $datos = $this->almacen_model->catalogo_servicios($this->input->post('servicio'));
            echo json_encode(array($datos));
        
    }

    public function detalle_solicitud($uid)
    {
        $permiso_solicitudes = $this->departamentos_model->permisos('solicitud-almacen');
        $permiso_solicitudes_almacen = $this->departamentos_model->permisos('solicitudes');
        $permiso_solicitudes_asignadas = $this->departamentos_model->permisos('solicitudes_asignadas');
        $permiso_orden_servicio = $this->departamentos_model->permisos('orden_servicio');
        if (!($permiso_solicitudes > 0 || $permiso_solicitudes_almacen > 0 || $permiso_orden_servicio > 0 || $permiso_solicitudes_asignadas > 0)) {
            redirect(base_url());
        }
        $data['token'] = $this->token();
        $data['titulo'] = 'Detalle Solicitud';
        $data['clase_pagina'] = 'compras-page';
        $datos['permiso'] = $permiso_solicitudes_almacen;
        $datos['solicitud'] = $this->almacen_model->detalle_solicitud($uid);
        $datos['solicitudPM'] = $this->almacen_model->detalle_solicitud('_' . $uid);
        $datos['solicitudCO'] = $this->almacen_model->detalle_solicitud('__' . $uid);
        $datos['solicitudAG'] = $this->almacen_model->detalle_solicitud('___' . $uid);

        if($datos['solicitud']->idtbl_almacenes != 1 && $datos['solicitud']->idtbl_almacenes != 16 && $datos['solicitud']->idtbl_almacenes != 2 && $datos['solicitud']->idtbl_almacenes != 23 && $datos['solicitud']->idtbl_almacenes != 28 && $datos['solicitud']->idtbl_almacenes != 29 && $datos['solicitud']->idtbl_almacenes != 30 && $datos['solicitud']->idtbl_almacenes != 122 && $datos['solicitud']->idtbl_almacenes != NULL && $datos['solicitud']->idtbl_almacenes != ''){

        $datos['prueba'] = $this->almacen_model->actualizar_existencias_cuadre($datos['solicitud']->idtbl_almacenes);
        }

        $datos['detalle'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitud']->idtbl_solicitud_material, $datos['solicitud']->tipo_producto, $datos['solicitud']->uid_almacen_seleccionado);
        if (isset($datos['solicitudPM']->idtbl_solicitud_material)) {
            $datos['detallePM'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitudPM']->idtbl_solicitud_material);
        }
        if (isset($datos['solicitudCO']->idtbl_solicitud_material)) {
            $datos['detalleCO'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitudCO']->idtbl_solicitud_material);
        }
        if (isset($datos['solicitudAG']->idtbl_solicitud_material)) {
            $datos['detalleAG'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitudAG']->idtbl_solicitud_material);
        }        
        if($datos['solicitud']->estatus_solicitud == 'S' || $datos['solicitud']->estatus_solicitud == 'SRCV'){
            $datos['entrega'] = $this->almacen_model->obtenerEntrega($datos['solicitud']->idtbl_solicitud_material);            
        }
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['almacen_seleccionado'] = $this->almacen_model->getAlmacenByUid($datos['solicitud']->uid_almacen_seleccionado);
        $datos['uid'] = $uid;
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['existencias'] = $this->almacen_model->detalle_existencias_catalogo($datos['solicitud']->idtbl_solicitud_material);
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu', $data);
        $this->load->view('almacen/detalle-solicitud', $datos);
        $this->load->view('plantillas/footer');
    }

    public function detalle_solicitud_material($uid)
    {
        $permiso_solicitudes = $this->departamentos_model->permisos('solicitud-almacen');
        $permiso_solicitudes_almacen = $this->departamentos_model->permisos('solicitudes');
        if (!($permiso_solicitudes > 0 || $permiso_solicitudes_almacen > 0)) {
            redirect(base_url());
        }
        $data['token'] = $this->token();
        $data['titulo'] = 'Detalle Solicitud';
        $data['clase_pagina'] = 'compras-page';
        $datos['permiso'] = $permiso_solicitudes_almacen;
        $datos['solicitud'] = $this->almacen_model->detalle_solicitud($uid);
        $datos['solicitudPM'] = $this->almacen_model->detalle_solicitud('_' . $uid);
        $datos['solicitudCO'] = $this->almacen_model->detalle_solicitud('__' . $uid);
        $datos['detalle'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitud']->idtbl_solicitud_material);
        if (isset($datos['solicitudPM']->idtbl_solicitud_material)) {
            $datos['detallePM'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitudPM']->idtbl_solicitud_material);
        }
        if (isset($datos['solicitudCO']->idtbl_solicitud_material)) {
            $datos['detalleCO'] = $this->almacen_model->detalle_solicitud_catalogo($datos['solicitudCO']->idtbl_solicitud_material);
        }
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['almacen_seleccionado'] = $this->almacen_model->getAlmacenByUid($datos['solicitud']->uid_almacen_seleccionado);
        $datos['uid'] = $uid;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu', $data);
        $this->load->view('almacen/detalle-solicitud-material', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_auto_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud_auto_control_vehicular');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de auto control vehicular';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 3) {
            $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-auto-control-vehicular', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitud_refacciones_control_vehicular($idtbl_tramites_vehiculares = "", $iddtl_almacen = "", $uid_tramites_vehiculares = "")
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud_refacciones_control_vehicular');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de refacciones control vehicular';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['ecos'] = $this->almacen_model->ecos();
        if ($this->session->userdata('tipo') == 3) {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        }
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion();
        $datos['clase_pagina'] = 'compras-page';
        $datos['idtbl_tramites_vehiculares'] = $idtbl_tramites_vehiculares;
        $datos['iddtl_almacen'] = $iddtl_almacen;
        $datos['uid_tramites_vehiculares'] = $uid_tramites_vehiculares;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitud-de-refacciones-control-vehicular', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitudes_almacen()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('compras_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitud de compra';
        //$datos['solicitudes'] = $this->almacen_model->mis_solicitudes();
        $datos['permisos'] = $this->permisos;
        //foreach ($datos['solicitudes'] as $key => $value) {
        //  $datos['solicitudes'][$key]->entregado = 0;
        //  $datos['solicitudes'][$key]->cantidad = 0;
        //  foreach ($this->almacen_model->detalle_solicitud_catalogo($value->idtbl_solicitud_material) as $subkey => $subvalue) {
        //    $datos['solicitudes'][$key]->entregado += $subvalue->entregado;
        //    $datos['solicitudes'][$key]->cantidad += $subvalue->cantidad;
        //  }
        //}
        $datos['clase_pagina'] = 'solicitudes-almacen';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitudes-almacen', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarSolicitudesAlmacenAG()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesAG($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesAG($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesMarco()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesMarco($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesMarco($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenAC()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesAC($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesAC($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenKuali()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesKuali($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesKuali($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenCV()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesCV($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesCV($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    //Función para ver detalle del recurso
    public function detalle_recurso($uid, $tipo)
    {
        $data['token'] = $this->token();
        $data['titulo'] = 'Detalle Recurso';
        $data['clase_pagina'] = 'recurso-page';
        $datos['detalle'] = $this->almacen_model->detalle_recurso($uid, $tipo);

        if($tipo == 'viaticos'){
            $datos['detalle_recurso'] = $this->almacen_model->dtl_recurso($datos['detalle'][0]->idtbl_solicitud_recursos,$tipo);
        }
        $datos['uid'] = $uid;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu', $data);
        $this->load->view('almacen/detalle-recurso', $datos);
        $this->load->view('plantillas/footer');
    }

    //Función para guardar Firma
    public function guardarFirma()
    {
        $uid = $this->input->post('uid');
            
        $this->form_validation->set_rules('imagen6', 'imagen6', 'required');

        if ($this->form_validation->run() == false) {
            echo json_encode(array(
                'status' => false,
                'message' => 'Crear la imagen de la firma'
            ));
        } else {
            $baseFromJavascript6 = $_POST['imagen6'];
            $data6 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript6));
            $filepath6 = "./uploads/firmas/caja_chica/".$uid.".png";
            file_put_contents($filepath6, $data6);

            $imagenes = array(
            'imagen6' => $filepath6
            );
            /*$carpeta = './uploads/soporte/' . $uid;
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = '*';
                $config['overwrite'] = true;*/
                try {
                    //$config['file_name'] = 'evidencias';

                    
                    $parametros = array(
                        'imagenes_firmas' => json_encode($imagenes),
                    );
                    
                                  
                    $this->almacen_model->guardarFirma($parametros);
                    echo json_encode(array(
                    'status' => true,
                    'message' => 'La firma se ha guardado correctamente'
                    ));
                } catch (Exception $e) {
                    echo json_encode(array(
                    'status' => false,
                    'message' => $e->getMessage()
                    ));
                }
            
        }
    }

    public function registro_caja_chica() {
        $this->load->model('almacen_model');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if(!$this->permisos_almacen_autos_control_vehicular > 1)
          redirect(base_url());
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
          $uid = uniqid();
          $carpeta = './uploads/caja_chica';
          $this->load->library('upload');
          $urlimg = $carpeta . '/';
          $config['upload_path'] = $urlimg;
          $config['allowed_types'] = 'pdf';
          $config['overwrite'] = TRUE;
          try {
            if($_FILES['archivo']['name'] != ""){
              $config['file_name'] = $uid;
              $this->upload->initialize($config);
              if(!$this->upload->do_upload('archivo')){
                throw new Exception('Error al subir archivo');
              }
            }
  
            if ($this->almacen_model->registro_caja_chica($uid) != true) {
              echo json_encode(array(
                'error' => true,
                'mensaje' => 'Error al registar en caja chica.'
              ));
              return;
            }else{
              echo json_encode(array(
                'error' => false,
                'mensaje' => 'Registro correcto en caja chica.'
              ));
            }
          } catch (Exception $e) {
            echo json_encode(array(
                'error' => true,
                'mensaje' => $e->getMessage()
            ));
          }
        } else {
          redirect(base_url());
        }
      }

    //Función para aprobar caja chica
    public function aprobar_caja_chica($proceso)
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                if($proceso == 'finalizar'){
                    $carpeta = './uploads/caja_chica/' . $this->input->post('uid');
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $this->load->library('upload');
                    $urlimg = $carpeta . '/';
                    $config['upload_path'] = $urlimg;
                    $config['allowed_types'] = 'pdf';
                    $config['overwrite'] = true;
                    try {                    
                        $config['file_name'] = 'responsiva';
                        $this->upload->initialize($config);
                        $this->upload->do_upload('responsiva');                        
                        $check = $this->almacen_model->aprobar_caja_chica($proceso);
                        if ($check == true) {
                            echo json_encode(array(
                            'error' => false,
                            'mensaje' => 'Caja Chica aprobada correctamente.'
                            ));
                            $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una caja chica', 'almacen/detalle_recurso/' . $this->input->post('uid'));
                        } else {
                            echo json_encode(array(
                            'error' => true,
                            'mensaje' => $check
                            ));
                        }
                    }catch (Exception $e) {
                        $this->rmDir_rf($carpeta);
                        echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                        ));
                    }
                
            }else{
                
                $check = $this->almacen_model->aprobar_caja_chica($proceso);
                if ($check == true) {
                    echo json_encode(array(
                    'error' => false,
                    'mensaje' => 'Caja Chica aprobada correctamente.'
                    ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una caja chica', 'almacen/detalle_recurso/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'message' => $check
                    ));
                }
            }
        } else {
            echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
          ));
        }
    
    }

    //Función para regresar viaticos
    public function regresar_viaticos()
    {
                   
            $check = $this->almacen_model->regresar_viaticos();
            if ($check == true) {
                echo json_encode(array(
                    'error' => false,
                    'mensaje' => 'Se regresó los viaticos.'
                ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' regresó los viaticos', 'almacen/detalle_recurso/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
                    'error' => true,
                    'message' => $check
                ));
            }
            
        
    
    }

    public function mostrarSolicitudesAlmacenSistemas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesSistemas($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesSistemas($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenAreaMedica()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesAreaMedica($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesAreaMedica($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenRCV()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->mis_solicitudesRCV($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mis_solicitudesRCV($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function solicitudes()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitudes');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('compras_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitudes de almacén';
        $datos['permisos'] = $this->departamentos_model->permisos('solicitud-almacen');
        //$datos['solicitudes'] = $this->almacen_model->solicitudes();
        //foreach ($datos['solicitudes'] as $key => $value) {
        //$datos['solicitudes'][$key]->entregado = 0;
        //$datos['solicitudes'][$key]->cantidad = 0;
        //foreach ($this->almacen_model->detalle_solicitud_catalogo($value->idtbl_solicitud_material) as $subkey => $subvalue) {
        //$datos['solicitudes'][$key]->entregado += $subvalue->entregado;
        //$datos['solicitudes'][$key]->cantidad += $subvalue->cantidad;
        //}
        //}
        $datos['almacenes_clientes'] = $this->almacen_model->todos_almacenes_clientes();
        $datos['segmentos_clientes'] = $this->almacen_model->todos_segmentos_clientes();
        $datos['clientes_generadores'] = $this->almacen_model->todos_clientes_generadores();
        if($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != ''){
            $datos['estado'] = $this->almacen_model->estado_almacen();
        }
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        if($this->session->userdata('id') == 163 || $this->session->userdata('id') == 166  || $this->session->userdata('id') == 137){
            $this->load->view('almacen/solicitudes-almacen-encargados', $datos);
        }else{
            $this->load->view('almacen/solicitudes-almacen', $datos);
        }
        $this->load->view('plantillas/footer', $datos);
    }

    public function solicitudes_asignadas()
    {
        $this->permisos = $this->departamentos_model->permisos('solicitudes_asignadas');
        if (!($this->permisos > 1)) {
            redirect(base_url());
        }
        $this->load->model('compras_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Solicitudes Asignadas';
        $datos['permisos'] = $this->departamentos_model->permisos('solicitud-almacen');
        //$datos['solicitudes'] = $this->almacen_model->solicitudes();
        //foreach ($datos['solicitudes'] as $key => $value) {
        //$datos['solicitudes'][$key]->entregado = 0;
        //$datos['solicitudes'][$key]->cantidad = 0;
        //foreach ($this->almacen_model->detalle_solicitud_catalogo($value->idtbl_solicitud_material) as $subkey => $subvalue) {
        //$datos['solicitudes'][$key]->entregado += $subvalue->entregado;
        //$datos['solicitudes'][$key]->cantidad += $subvalue->cantidad;
        //}
        //}
        $datos['clase_pagina'] = 'compras-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/solicitudes-asignadas', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //quitar esta función cuando este lista la versión 1.0.0
    public function mostrarSolicitudes()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudes" => $this->almacen_model->solicitudes($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAG()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesAG" => $this->almacen_model->solicitudesAG($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesAG($buscar, $buscar2)),
          "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAGEstatus()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesAGEstatus" => $this->almacen_model->solicitudesAGEstatus($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesAGEstatus($buscar, $buscar2)),
          "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAlmacenes()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesAlmacenes" => $this->almacen_model->solicitudesAlmacenes($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesAlmacenes($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesReynosa()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesReynosa" => $this->almacen_model->solicitudesReynosa($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesReynosa($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesTabasco()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTabasco" => $this->almacen_model->solicitudesTabasco($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesTabasco($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesTecate()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTecate" => $this->almacen_model->solicitudesTecate($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesTecate($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesNatura()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesNatura" => $this->almacen_model->solicitudesNatura($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesNatura($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesB2()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesB2" => $this->almacen_model->solicitudesB2($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesB2($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesMagistral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesMagistral" => $this->almacen_model->solicitudesMagistral($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesMagistral($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesColinas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesColinas" => $this->almacen_model->solicitudesColinas($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesColinas($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesCentro()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesCentro" => $this->almacen_model->solicitudesCentro($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesCentro($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesIlustres()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesIlustres" => $this->almacen_model->solicitudesIlustres($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesIlustres($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesFiber()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesFiber" => $this->almacen_model->solicitudesFiber($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesFiber($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesBravo()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesBravo" => $this->almacen_model->solicitudesBravo($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesBravo($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesAcereros()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesAcereros" => $this->almacen_model->solicitudesAcereros($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesAcereros($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesJalisco()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesJalisco" => $this->almacen_model->solicitudesJalisco($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesJalisco($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesAsignadas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesAsignadas" => $this->almacen_model->solicitudesAsignadas($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesAsignadas($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesTijuana()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTijuana" => $this->almacen_model->solicitudesTijuana($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesTijuana($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesTuxpan()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTuxpan" => $this->almacen_model->solicitudesTuxpan($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesTuxpan($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesMonclova()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesMonclova" => $this->almacen_model->solicitudesMonclova($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesMonclova($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesHigiene()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesHigiene" => $this->almacen_model->solicitudesHigiene($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesHigiene($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesTarjetas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTarjetas" => $this->almacen_model->solicitudesTarjetas($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesTarjetas($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarMisSolicitudesTarjetas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesTarjetas" => $this->almacen_model->misSolicitudesTarjetas($buscar, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->misSolicitudesTarjetas($buscar)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesInstalacion()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesInstalacion" => $this->almacen_model->solicitudesInstalacion($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesInstalacion($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarMisSolicitudesInstalacion()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesInstalacion" => $this->almacen_model->misSolicitudesInstalacion($buscar, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->misSolicitudesInstalacion($buscar)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesReynosas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesReynosas" => $this->almacen_model->solicitudesReynosas($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesReynosas($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesVilla()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesVilla" => $this->almacen_model->solicitudesVilla($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesVilla($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudes86()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudes86" => $this->almacen_model->solicitudes86($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudes86($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudes87()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudes87" => $this->almacen_model->solicitudes87($buscar, $buscar2, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudes87($buscar, $buscar2)),
          "cantidad" => $cantidad
        );
        echo json_encode($data);
    }

    public function mostrarSolicitudesAC()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesAC" => $this->almacen_model->solicitudesAC($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesAC($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarJustificaciones()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "justificaciones" => $this->almacen_model->justificaciones($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->justificaciones($buscar)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesKuali()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesKuali" => $this->almacen_model->solicitudesKuali($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesKuali($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesKualiMI()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesKualiMI" => $this->almacen_model->solicitudesKualiMI($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesKualiMI($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesCV()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesCV" => $this->almacen_model->solicitudesCV($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesCV($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesSistemas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesSistemas" => $this->almacen_model->solicitudesSistemas($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesSistemas($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesAreaMedica()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesAreaMedica" => $this->almacen_model->solicitudesAreaMedica($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesAreaMedica($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesRCV()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesRefaccionesControlVehicular" => $this->almacen_model->solicitudesRCV($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudesRCV($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    //Función para mostrar los tickets
    public function mostrarCajasChicas()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
        "cajaschicas" => $this->almacen_model->mostrarCajasChicas($buscar, $inicio, $cantidad),
        "totalRegistros" => count($this->almacen_model->mostrarCajasChicas($buscar)),
        "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los tickets
    public function mostrarViaticos()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
        "viaticos" => $this->almacen_model->mostrarViaticos($buscar, $inicio, $cantidad),
        "totalRegistros" => count($this->almacen_model->mostrarViaticos($buscar)),
        "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los tickets
    public function mostrarCajasPersonal()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
        "cajaschicas" => $this->almacen_model->mostrarCajasPersonal($buscar, $inicio, $cantidad),
        "totalRegistros" => count($this->almacen_model->mostrarCajasPersonal($buscar)),
        "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function nueva_solicitud()
    //contratista  <----
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        $permisos2 = $this->departamentos_model->permisos('orden_servicio');
        if ($permisos > 0 || $permisos2 > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $uid = uniqid();
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Tarjetas" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('id') == 3) && $_POST['tipo_producto'] === "Tarjetas" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'RCV';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 1 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 4) && $_POST['tipo_producto'] === "Tarjetas" && $_POST['tipo'] == 'interno') {
                    $estatus = 'RCV';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 1 || $this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 4) && $_POST['tipo_producto'] === "Instalacion" && $_POST['tipo'] == 'interno') {
                    $estatus = 'PMC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === "Tarjetas") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 24) && $_POST['tipo_producto'] === "Tarjetas") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 10) && $_POST['tipo_producto'] === "Tarjetas") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'interno') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'interno' && $this->input->post('proyecto') == 247) {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'interno') {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 24) && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'interno') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 7) && $_POST['tipo_producto'] === "Almacen General" && $_POST['tipo'] == 'interno') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 7) && $_POST['tipo_producto'] === "Seguridad e Higiene" && $_POST['tipo'] == 'interno') {
                    $estatus = 'AG';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 5) && $_POST['tipo_producto'] === "Alto costo" && $_POST['tipo'] == 'interno') {
                    $estatus = 'AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'no' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 24 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 21 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 5 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 8 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                //Entra cuando se crea una solicitud de SH en un perfil de almacen
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 4 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 10 && $_POST['tipo_producto'] === 'Seguridad e Higiene' && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO SH';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 10 && $_POST['tipo_producto'] === 'Seguridad e Higiene' && $_POST['tipo'] == 'interno') {
                    $estatus = 'AG';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 10 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === 'Control Vehicular' && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 10 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 24 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === 'Control Vehicular' && $_POST['tipo'] == 'interno') {
                    $estatus = 'CV';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 10 && $_POST['tipo_producto'] === 'Almacen General') {
                    $estatus = 'PM';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo PM interno
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 24) && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo operaciones
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 10) && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo contratistas
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 12 && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo capital humano
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 17) && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'PM';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo control vehicular
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 3 && $_POST['tipo_producto'] === "Refacciones Control Vehicular") {
                    $estatus = 'AG';
                }

                //entra al if cuando es una solicitud de asignacion control vehicular con usuarios de tipo control vehicular
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 3 && $_POST['tipo_producto'] === "Control Vehicular") {
                    $estatus = 'CV';
                }

                if (($this->session->userdata('permiso_autorizar') != 'si' || $this->session->userdata('permiso_autorizar') == 'si') && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 24 || $this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 10) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'PM';
                }

                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 20) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'Sis';
                }

                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 20) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'Sis';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 4) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'Sis';
                }


                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 17) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'PM';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 17) && $_POST['tipo_producto'] === "Sistemas" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO PM';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 24 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 3) && $_POST['tipo_producto'] === "Sistemas" && $_POST['tipo'] == 'interno') {
                    $estatus = 'Sis';
                }

                if (($this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'PM';
                }

                if ($this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 2 && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'SU Sis';
                }

                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 2 && $_POST['tipo_producto'] === "Sistemas") {
                    $estatus = 'SU Sis';
                }

                if (isset($this->session->userdata('permisos')['solicitud_refacciones_control_vehicular']) && $this->session->userdata('permisos')['solicitud_refacciones_control_vehicular'] == 2 && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $_POST['tipo_producto'] === "Refacciones Control Vehicular") {
                    $estatus = 'RCV';
                }

                if (isset($this->session->userdata('permisos')['solicitud_refacciones_control_vehicular']) && $this->session->userdata('permisos')['solicitud_refacciones_control_vehicular'] == 2 && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $_POST['tipo_producto'] === "Refacciones Control Vehicular") {
                    $estatus = 'RCV';
                }

                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Alto costo" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 21 || $this->session->userdata('tipo') == 24) && $_POST['tipo_producto'] === "Alto costo" && $_POST['tipo'] == 'interno') {
                    $estatus = 'AC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 24 || $this->session->userdata('tipo') == 21) && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 19 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 19 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 19 && $_POST['tipo_producto'] === "Alto costo" && $_POST['tipo'] == 'contratista') {
                    $estatus = 'CO AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 19 && $_POST['tipo_producto'] === "Alto costo" && $_POST['tipo'] == 'interno') {
                    $estatus = 'AC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 5 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 8 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 10 && $_POST['tipo_producto'] === 'Alto costo') {
                    $estatus = 'PM AC';
                }
                if ($this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 10 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === 'Kuali') {
                    $estatus = 'PM K';
                }
                if ($this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }                
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 9 || $this->session->userdata('tipo') == 24)  && $_POST['tipo_producto'] === "Kuali") {
                    $estatus = 'PM K';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 24 || $this->session->userdata('id') == 226 || $this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19) && $_POST['tipo_producto'] === "Kuali") {
                    $estatus = 'K';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 13 && $_POST['tipo_producto'] === "Material Instalacion Kuali") {
                    $estatus = 'PM K';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 8 && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 8 && $_POST['tipo_producto'] === "Kuali") {
                    $estatus = 'PM K';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                //if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 10 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                //$estatus = 'SH';
                //}
                //Si algun jefe de área pide a almacen general pase directo a almacen
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 18 || $this->session->userdata('id') == 93 || $this->session->userdata('id') == 43 || $this->session->userdata('id') == 47 || $this->session->userdata('id') == 45 || $this->session->userdata('id') == 46 || $this->session->userdata('id') == 48 || $this->session->userdata('id') == 51 || $this->session->userdata('id') == 52 || $this->session->userdata('id') == 60) && ($_POST['tipo_producto'] === "Almacen General")) {
                    $estatus = 'AG';
                }
                //Si algun jefe de área pide a Kuali pase directo a almacen
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 18 || $this->session->userdata('id') == 43 || $this->session->userdata('id') == 47 || $this->session->userdata('id') == 45 || $this->session->userdata('id') == 46 || $this->session->userdata('id') == 48 || $this->session->userdata('id') == 51 || $this->session->userdata('id') == 52 || $this->session->userdata('id') == 60) && ($_POST['tipo_producto'] === "Kuali")) {
                    $estatus = 'K';
                }
                //Si algun jefe de área pide a seguridad e higiene pase directo a almacen
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 18 || $this->session->userdata('id') == 43 || $this->session->userdata('id') == 47 || $this->session->userdata('id') == 45 || $this->session->userdata('id') == 46 || $this->session->userdata('id') == 48 || $this->session->userdata('id') == 51 || $this->session->userdata('id') == 52 || $this->session->userdata('id') == 60) && ($_POST['tipo_producto'] === "Seguridad e Higiene")) {
                    $estatus = 'AG';
                }
                //Si algun jefe de área pide a control vehicular pase directo a almacen
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 250 || $this->session->userdata('id') == 43 || $this->session->userdata('id') == 47 || $this->session->userdata('id') == 45 || $this->session->userdata('id') == 46 || $this->session->userdata('id') == 48 || $this->session->userdata('id') == 51 || $this->session->userdata('id') == 52 || $this->session->userdata('id') == 60) && ($_POST['tipo_producto'] === "Control Vehicular")) {
                    $estatus = 'CV';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 60 || $this->session->userdata('tipo') == 4)  && ($_POST['tipo_producto'] === "Alto costo")) {
                    $estatus = 'AC';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 1 || $this->session->userdata('id') == 60)  && ($_POST['tipo_producto'] === "Kuali")) {
                    $estatus = 'K';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 1 && $_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 1 && $_POST['tipo_producto'] === "Alto costo") {
                    $estatus = 'PM AC';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 1 && $_POST['tipo_producto'] === "Kuali") {
                    $estatus = 'PM K';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 5 && $_POST['tipo_producto'] === "Kuali") {
                    $estatus = 'PM K';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('tipo') == 1 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'AG';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && $this->session->userdata('id') == 3 && $_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                }
                if ($this->session->userdata('permiso_autorizar') != 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 5 || $this->session->userdata('tipo') == 14) && $_POST['tipo_producto'] === "Medica") {
                    $estatus = 'AM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') == $this->session->userdata('id') && ($this->session->userdata('tipo') == 10 || $this->session->userdata('tipo') == 14)  && ($_POST['tipo_producto'] === "Medica")) {
                    $estatus = 'AM';
                }
                if ($this->session->userdata('permiso_autorizar') == 'si' && $this->input->post('persona_autorizacion') != $this->session->userdata('id') && ($this->session->userdata('tipo') == 10 || $this->session->userdata('tipo') == 14) && $_POST['tipo_producto'] === 'Medica') {
                    $estatus = 'AM';
                }
                if ($this->input->post('persona_autorizacion') == $this->session->userdata('id') && $this->session->userdata('tipo') == 9 && $this->input->post('proyecto') == 237 && $_POST['tipo_producto'] === 'Almacen General') {
                    $estatus = 'AG';
                }
        
                /*else {
                  if($_POST['tipo_producto'] === "Almacen General") {
                    $estatus = 'PM';
                    echo "OK3";
                    return;
                  }
                  if($_POST['tipo_producto'] === "Seguridad e Higiene") {
                    $estatus = 'SH';
                    echo "OK4";
                    return;
                  }
                }*/
                
                $check = $this->almacen_model->nueva_solicitud($uid, $estatus);
                if ($check == true) {
                    echo json_encode(array(
            'error' => false
          ));
                    $this->session->set_flashdata('exito', 'Solicitud enviada correctamente.');
                //$this->almacen_model->log($this->session->userdata('nombre').' generó una nueva solicitud de almacen','almacen/detalle-solicitud/'.$uid);
                } else {
                    echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
                }
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
        ));
            }
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function mostrarSolicitudesHojaAsignacion() {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "solicitudesHojaAsignacion" => $this->almacen_model->solicitudesHojaAsignacion($buscar, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->solicitudesHojaAsignacion($buscar)),
          "cantidad" => $cantidad
        );
    
        echo json_encode($data);
      }

    public function guardar_hoja_asignacion()
    //contratista  <----
    {
   
       
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $uid = uniqid();
                
                if($this->session->userdata('tipo') == 11){
                    $estatus = 'aprobada';
                }else{
                    $estatus = 'CO';
                }
                
                $check = $this->almacen_model->guardar_hoja_asignacion($uid, $estatus);
                if ($check == true) {
                    echo json_encode(array(
            'error' => false
          ));
                    $this->session->set_flashdata('exito', 'Solicitud enviada correctamente.');
                //$this->almacen_model->log($this->session->userdata('nombre').' generó una nueva solicitud de almacen','almacen/detalle-solicitud/'.$uid);
                } else {
                    echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
                }
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
        ));
            }
        
    }

    public function nueva_solicitud_viaticos()
    //contratista  <----
    {
        $permisos = $this->departamentos_model->permisos('viaticos');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $uid = uniqid();
                $estatus = "creada";
                $check = $this->almacen_model->nueva_solicitud_viaticos($uid, $estatus);
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false
                    ));
                    $this->session->set_flashdata('exito', 'Solicitud enviada correctamente.');
                //$this->almacen_model->log($this->session->userdata('nombre').' generó una nueva solicitud de almacen','almacen/detalle-solicitud/'.$uid);
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function nueva_solicitud_caja()
    //contratista  <----
    {
        $permisos = $this->departamentos_model->permisos('caja_chica');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $uid = uniqid();
                $estatus = "creada";
                $check = $this->almacen_model->nueva_solicitud_caja($uid, $estatus);
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false
                    ));
                    $this->session->set_flashdata('exito', 'Solicitud enviada correctamente.');
                //$this->almacen_model->log($this->session->userdata('nombre').' generó una nueva solicitud de almacen','almacen/detalle-solicitud/'.$uid);
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

   

    public function nueva_solicitud_generador()
    {        
        
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {                
                                
                $check = $this->almacen_model->nueva_solicitud_generador();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false
                    ));
                    $this->session->set_flashdata('exito', 'Solicitud enviada correctamente.');
                    //$this->almacen_model->log($this->session->userdata('nombre').' generó una nueva solicitud de almacen','almacen/detalle-solicitud/'.$uid);
                } else {
                    echo json_encode(array(
                            'error' => true,
                            'mensaje' => $check
                        ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        
    }

    public function nueva_justificacion_material()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('imagen', 'imagen', 'required');
            if ($this->form_validation->run() == false) {
                echo json_encode(array(
                'status' => false,
                'message' => 'Favor de crear la firma'
                ));
            } else {
                $uid = uniqid();
                $baseFromJavascript1 = $_POST['imagen'];
                $data1 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript1));
                $filepath1 = "./uploads/justificaciones/firmas/".$uid.".png";
                file_put_contents($filepath1, $data1);
                if ($this->session->userdata('tipo') == 18) {
                    $estatus = 'Supervisor';
                }
                $carpeta = './uploads/justificaciones/' . $uid;
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'pdf';
                $config['overwrite'] = true;
                try {
                    $config['file_name'] = 'evidencias';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('evidencias')) {
                        throw new Exception('Problema al cargar evidencias.');
                    }
                    $check = $this->almacen_model->nueva_justificacion_material($uid, $estatus, $filepath1);
                    if ($check == true) {
                        echo json_encode(array(
                        'error' => false
                        ));
                        $this->session->set_flashdata('exito', 'Justificacion creada correctamente.');
                    } else {
                        echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                        ));
                    }
                } catch (Exception $e) {
                    echo json_encode(array(
                    'status' => false,
                    'message' => $e->getMessage()
                    ));
                }
            }
        } else {
            echo json_encode(array(
            'error' => true,
            'mensaje' => 'Token Incorrecto.'
            ));
        }
    }

    public function cancelar_solicitud()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->cancelar_solicitud();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => 'Solicitud cancelada correctamente.'
                    ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    //Cancelar Recurso
    public function cancelar_recurso()
    {                        
        $check = $this->almacen_model->cancelar_recurso();
        if ($check == true) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Recurso cancelado correctamente.'
            ));
            $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo un recurso', 'almacen/detalle_recurso/' . $this->input->post('uid'));
        } else {
            echo json_encode(array(
               'error' => true,
               'mensaje' => $check
            ));
        }
    
    }

    public function cancelar_traspaso()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->cancelar_traspaso();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => 'Traspaso cancelado correctamente.'
                    ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo un traspaso de almacen', 'almacen/cancelar-traspaso/' . $this->input->post('id_movimiento'));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function cancelar_justificacion()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $check = $this->almacen_model->cancelar_justificacion();
            if ($check == true) {
                echo json_encode(array(
            'error' => false,
            'mensaje' => 'Justificación cancelada correctamente.'
          ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo una justificacion de material', 'almacen/detalle-justificacion/' . $this->input->post('uid_justificacion'));
            } else {
                echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
            }
        } else {
            echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
        ));
        }
    }

    public function cancelar_asignacion()
    {
        
        
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->cancelar_asignacion();
                if ($check == true) {
                    echo json_encode(array(
            'error' => false,
            'mensaje' => 'Solicitud cancelada correctamente.'
          ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
                }
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
        ));
            }
        
    }

    public function activar_codigo()
    {
        $permisos = $this->departamentos_model->permisos('almacen');
        if ($permisos > 0) {
            $check = $this->almacen_model->activar_codigo();
            if ($check == true) {
                echo json_encode(array(
            'error' => false,
            'mensaje' => 'Código activado correctamente.'
          ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' activo el codigo', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
            }
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function desactivar_codigo()
    {
        $permisos = $this->departamentos_model->permisos('almacen');
        if ($permisos > 0) {
            $check = $this->almacen_model->desactivar_codigo();
            if ($check == true) {
                echo json_encode(array(
            'error' => false,
            'mensaje' => 'Código desactivado correctamente.'
          ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' desactivo el codigo', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
            }
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function modificar_solicitud()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->modificar_solicitud();
                if ($check == true) {
                    echo json_encode(array(
            'error' => false,
            'mensaje' => 'Solicitud modificada y aprobada correctamente.'
          ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' modifico una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
                }
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => 'Token Incorrecto.'
        ));
            }
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function aprobar_solicitud()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //if($check_exist=$this->almacen_model->check_exist() == false){
                //    echo json_encode(array(
                //        'error' => true,
                //        'mensaje' => '¡No cuenta con existencias!'
                //    ));
                //    return;
                //}
                $check = $this->almacen_model->aprobar_solicitud();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => 'Solicitud aprobada correctamente.'
                    ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function actualizar_neodata()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->actualizar_neodata();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => 'Neodata actualizado correctamente.'
                    ));
                    $this->almacen_model->log($this->session->userdata('nombre') . ' actualizo el neodata', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function comentarios_neodata()
    {
        $check = $this->almacen_model->comentarios_neodata();
        if ($check == true) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Comentarios de neodata actualizado correctamente.'
            ));
            $this->almacen_model->log($this->session->userdata('nombre') . ' actualizo el neodata', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => $check
            ));
        }
    }

    public function comentarios_neodata_devolucion()
    {
        $check = $this->almacen_model->comentarios_neodata_devolucion();
        if ($check == true) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Comentarios de neodata actualizado correctamente.'
            ));
            $this->almacen_model->log($this->session->userdata('nombre') . ' actualizo el neodata', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => $check
            ));
        }
    }

    public function guardar_recorrido()
    {
        
    $uid = $this->input->post('uid');
    $carpeta = './uploads/solicitud_servicio/' . $uid;
    if (!file_exists($carpeta)) {
        mkdir($carpeta, 0755, true);
    }

    $check = $this->almacen_model->guardar_recorrido();
        if ($check == true) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Recorrido actualizado correctamente.'
            ));
            $this->almacen_model->log($this->session->userdata('nombre') . ' actualizo el recorrido', 'almacen/guardar-recorrido/' . $this->input->post('uid'));
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => $check
            ));
        }
        
    }

    public function aprobar_justificacion()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $check = $this->almacen_model->aprobar_justificacion();
            if ($check == true) {
                echo json_encode(array(
                    'error' => false,
                    'mensaje' => 'Justificación aprobada correctamente.'
                ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una justificación de material', 'almacen/detalle-justificacion/' . $this->input->post('uid_justificacion'));
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => $check
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'Token Incorrecto.'
            ));
        }
    }
  
    public function surtir_solicitudAC()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            //if ($this->input->post('token') && $this->input->post('token') != $this->session->userdata('token')) {
            $check = $this->almacen_model->surtir_solicitudAC();
            if ($check == true) {
                echo json_encode(array(
          'error' => false,
          'mensaje' => 'Solicitud surtida correctamente.'
        ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => $check
        ));
            }
            /*} else {
              echo json_encode(array(
                'error' => true,
                'mensaje' => 'Token Incorrecto.'
              ));
            }*/
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function surtir_solicitudCV()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            //if ($this->input->post('token') && $this->input->post('token') != $this->session->userdata('token')) {
            $check = $this->almacen_model->surtir_solicitudCV();
            if ($check == true) {
                echo json_encode(array(
          'error' => false,
          'mensaje' => 'Solicitud surtida correctamente.'
        ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una solicitud de control vehicular', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => $check
        ));
            }
            /*} else {
              echo json_encode(array(
                'error' => true,
                'mensaje' => 'Token Incorrecto.'
              ));
            }*/
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function surtir_solicitudRCV()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            //if ($this->input->post('token') && $this->input->post('token') != $this->session->userdata('token')) {
            $check = $this->almacen_model->surtir_solicitudRCV();
            if ($check == true) {
                echo json_encode(array(
          'error' => false,
          'mensaje' => 'Solicitud surtida correctamente.'
        ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una solicitud de refacciones control vehicular', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => $check
        ));
            }
            /*} else {
              echo json_encode(array(
                'error' => true,
                'mensaje' => 'Token Incorrecto.'
              ));
            }*/
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    public function surtir_solicitudSistemas()
    {
        $permisos = $this->departamentos_model->permisos('solicitud-almacen');
        if ($permisos > 0) {
            //if ($this->input->post('token') && $this->input->post('token') != $this->session->userdata('token')) {
            $check = $this->almacen_model->surtir_solicitudSistemas();
            if ($check == true) {
                echo json_encode(array(
          'error' => false,
          'mensaje' => 'Solicitud surtida correctamente.'
        ));
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo una solicitud de sistemas', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
            } else {
                echo json_encode(array(
          'error' => true,
          'mensaje' => $check
        ));
            }
            /*} else {
              echo json_encode(array(
                'error' => true,
                'mensaje' => 'Token Incorrecto.'
              ));
            }*/
        } else {
            echo json_encode(array(
        'error' => true,
        'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
      ));
        }
    }

    //Modifica las cantidades de una entrada de cliente
    public function editar_entrada_almacen_cliente()
    {        
        $check = $this->almacen_model->editar_entrada_almacen_cliente();
        if ($check == true) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Entrada modificada correctamente.'
            ));
            $this->almacen_model->log($this->session->userdata('nombre') . ' modifico una solicitud de almacen', 'almacen/detalle-solicitud/' . $this->input->post('uid'));
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => $check
            ));
        }                    
    }

    /**
      * Funciones Devolucion
    **/
    public function solicitudes_devoluciones()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devoluciones();
        $datos['tipo_permiso'] = $this->permisos;
        if($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != ''){
            $datos['estado'] = $this->almacen_model->estado_almacen();
        }
        $datos['almacenes_clientes'] = $this->almacen_model->todos_almacenes_clientes();
        $datos['segmentos_clientes'] = $this->almacen_model->todos_segmentos_clientes();
        $datos['clientes_generadores'] = $this->almacen_model->todos_clientes_generadores();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        if($this->session->userdata('id') == 163 || $this->session->userdata('id') == 166 || $this->session->userdata('id') == 172){
            $this->load->view('almacen/solicitudes-devolucion-encargados', $datos);
        }else{
            $this->load->view('almacen/solicitudes-devolucion', $datos);
        }
        $this->load->view('plantillas/footer');
    }

    public function mostrarSolicitudesDevolucionAG()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionAG" => $this->almacen_model->solicitudes_devoluciones($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionTarjetas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionTarjetas" => $this->almacen_model->solicitudes_devoluciones_tarjetas($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_tarjetas($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }
    

    public function mostrarSolicitudesDevolucionTecate()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesTecate" => $this->almacen_model->solicitudes_devolucionesTecate($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesTecate($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionNatura()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesNatura" => $this->almacen_model->solicitudes_devolucionesNatura($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesNatura($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionB2()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesB2" => $this->almacen_model->solicitudes_devolucionesB2($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesB2($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionMagistral()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesMagistral" => $this->almacen_model->solicitudes_devolucionesMagistral($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesMagistral($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionCentro()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesCentro" => $this->almacen_model->solicitudes_devolucionesCentro($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesCentro($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionIlustres()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesIlustres" => $this->almacen_model->solicitudes_devolucionesIlustres($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesIlustres($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionAcereros()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesAcereros" => $this->almacen_model->solicitudes_devolucionesAcereros($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesAcereros($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionJalisco()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesJalisco" => $this->almacen_model->solicitudes_devolucionesJalisco($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesJalisco($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionAlmacenes()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesAlmacenes" => $this->almacen_model->solicitudes_devolucionesAlmacenes($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesAlmacenes($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionSH()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionSH" => $this->almacen_model->solicitudes_devoluciones_seguridad($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_seguridad($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionReynosa()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionReynosa" => $this->almacen_model->solicitudes_devoluciones_reynosa($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_reynosa($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionTabasco()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionTabasco" => $this->almacen_model->solicitudes_devoluciones_tabasco($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_tabasco($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionTijuana()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionTijuana" => $this->almacen_model->solicitudes_devoluciones_tijuana($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_tijuana($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionTuxpan()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionTuxpan" => $this->almacen_model->solicitudes_devoluciones_tuxpan($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_tuxpan($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionMonclova()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionMonclova" => $this->almacen_model->solicitudes_devoluciones_monclova($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_monclova($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionVilla()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $buscar2 = $this->input->post('buscar2');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionVilla" => $this->almacen_model->solicitudes_devoluciones_villa($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devoluciones_villa($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionKuali()
    {
        //valor a buscar
        $buscar2  =$this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionKuali" => $this->almacen_model->solicitudes_devolucionesKuali($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesKuali($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionRCV()
    {
        //valor a buscar
        $buscar2  =$this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "solicitudesDevolucionRCV" => $this->almacen_model->solicitudes_devolucionesRCV($buscar, $buscar2, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesRCV($buscar, $buscar2)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function solicitud_devolucion()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion', $datos);
        $this->load->view('plantillas/footer');
    }

    //Carga la vista para daevolución de seguridad
    public function solicitud_devolucion_seguridad()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución Seguridad e Higiene';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        
            $datos['catalogo'] = $this->almacen_model->catalogo('seguridad_e_higiene');
        
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-seguridad', $datos);
        $this->load->view('plantillas/footer');
    }

    //Carga la vista para la devolución de un generador.
    public function devolucion_generador($uid)
    {
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['detalle'] = $this->almacen_model->detalle_mantenimiento($uid);
        $datos['detalleSolicitudMaterial'] = $this->almacen_model->detalleAsignacionMaterial($datos['detalle'][0]->idtbl_mantenimientos);
        $datos['token'] = $this->token();
        $datos['mantenimiento'] = $datos['detalle'][0]->idtbl_mantenimientos;
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-generador', $datos);
        $this->load->view('plantillas/footer');
    }

    public function cancelar_devolucion()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post() && !empty($this->input->post('solicitudUID'))) {
                if ($this->almacen_model->cancelar_devolucion($this->input->post('solicitudUID')) == true) {
                    $this->almacen_model->log($this->session->userdata('nombre') . ' cancelo una devolución', 'almacen/movimientos/detalle/devolucion-almacen' . $this->input->post('uid'));
                    echo json_encode(array(
            'error' => false,
            'message' => 'Se cancelo correctamente'
          ));
                } else {
                    echo json_encode(array(
            'error' => true,
            'message' => 'Ocurrio un problema intente nuevamente.'
          ));
                }
            } else {
                echo json_encode(array(
          'error' => true,
          'message' => 'Ocurrio un problema intente nuevamente.'
        ));
            }
        } else {
            echo json_encode(array(
        'error' => true,
        'message' => 'Token Incorrecto.'
      ));
        }
    }
    public function guardar_solicitud_devolucion()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post() && count($this->input->post('cantidad')) == count($this->input->post('producto'))) {
                $uid = (null != $this->input->post('parent')) ? $this->input->post('parent') : uniqid();
                if ($this->almacen_model->guardar_solicitud_devolucion($uid) == true) {
                    $this->session->set_flashdata('exito', 'Registro exitoso');
                    $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo la devolución', 'almacen/movimientos/detalle/devolucion-almacen' . $this->input->post($uid));
                    echo json_encode(array(
            'status' => true,
            'message' => 'Se aprobó correctamente'
          ));
                } else {
                    echo json_encode(array(
            'status' => false,
            'message' => 'Ocurrio un problema intente nuevamente.l3'
          ));
                }
            } else {
                echo json_encode(array(
          'status' => false,
          'message' => 'Ocurrio un problema intente nuevamente.l2'
        ));
            }
        } else {
            echo json_encode(array(
        'status' => false,
        'message' => 'Token Incorrecto.'
      ));
        }
    }
    public function guardar_solicitud_devolucion_generador()
    {
        if ($this->input->post() && count($this->input->post('cantidad')) == count($this->input->post('producto'))) {
            $uid = (null != $this->input->post('parent')) ? $this->input->post('parent') : uniqid();
            if ($this->almacen_model->guardar_solicitud_devolucion_generador($uid) == true) {
                $this->session->set_flashdata('exito', 'Registro exitoso');
                $this->almacen_model->log($this->session->userdata('nombre') . ' aprobo la devolución', 'almacen/movimientos/detalle/devolucion-almacen' . $this->input->post($uid));
                echo json_encode(array(
                    'status' => true,
                    'message' => 'Se aprobó correctamente'
                ));
            } else {
                echo json_encode(array(
                    'status' => false,
                    'message' => 'Ocurrio un problema intente nuevamente.l3'
                ));
            }
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l2'
            ));
        }
        
    }
    public function detalle_devolucion($uid)
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
        $this->permisos3 = $this->departamentos_model->permisos('devoluciones_kuali');
        $this->permisos4 = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
        $this->permisos5 = $this->departamentos_model->permisos('devoluciones_refacciones_control_vehicular');
        $this->permisos6 = $this->departamentos_model->permisos('devoluciones_sistemas');
        $this->permisos7 = $this->departamentos_model->permisos('devoluciones_area_medica');
        if (!($this->permisos2 > 0 || $this->permisos > 0 || $this->permisos3 > 0 || $this->permisos4 > 0 || $this->permisos5 > 0 || $this->permisos6 > 0 || $this->permisos7 > 0)) {
            redirect(base_url());
        }
        $solicitud = $datos['solicitud'] = $this->almacen_model->detalle_devolucion($uid);
        $data['token'] = $this->token();
        $data['titulo'] = 'Detalle Solicitud Devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['permiso'] = $this->permisos;
        $datos['permisoAC'] = $this->permisos2;
        $datos['permisoK'] = $this->permisos3;
        $datos['permisoACV'] = $this->permisos4;
        $datos['permisoRCV'] = $this->permisos5;
        $datos['permisoSistemas'] = $this->permisos6;
        $datos['permisoAreaMedica'] = $this->permisos7;
        $datos['detalle'] = $this->almacen_model->detalle_devolucion_catalogo($datos['solicitud']->idtbl_solicitud_devolucion, $datos['solicitud']->tipo_devolucion);
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['uid_salida'] = uniqid();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        if ($this->uri->segment(2) == 'detalle-devolucion-interno') {
            $asignaciones = $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAG($solicitud->uid_usuario);
            $this->load->view('almacen/detalle-devolucion-interno', $datos);
        } else {
            $this->load->view('almacen/detalle-devolucion', $datos);
        }
        $this->load->view('plantillas/footer');
    }
    /**
      * Funciones Devolucion
    **/

    /**
      * Funciones Devoluciones Kuali
    **/

    public function solicitudes_devoluciones_kuali()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_kuali');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesKuali();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-kuali', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_kuali()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_kuali');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('kuali_digital');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('kuali_digital');
        }
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-kuali', $datos);
        $this->load->view('plantillas/footer');
    }

    /**
      * Funciones Devoluciones Autos Control Vehicular
    **/
    public function solicitudes_devoluciones_autos_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-autos-control-vehicular', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_autos_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        /*if ($this->session->userdata('tipo') == 3) {
            $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
        }*/
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-autos-control-vehicular', $datos);
        $this->load->view('plantillas/footer');
    }

    /**
      * Funciones Devoluciones Sistemas
    **/
    public function solicitudes_devoluciones_sistemas()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_sistemas');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-sistemas', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_sistemas()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_sistemas');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 2) {
            $datos['catalogo'] = $this->almacen_model->catalogo('sistemas');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('sistemas');
        }
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-sistemas', $datos);
        $this->load->view('plantillas/footer');
    }
    /**
      * Funciones Devoluciones Refacciones Control Vehicular
    **/
    public function solicitudes_devoluciones_refacciones_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_refacciones_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-refacciones-control-vehicular', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_refacciones_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_refacciones_control_vehicular');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        /*if ($this->session->userdata('tipo') == 3) {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        }*/
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-refacciones-control-vehicular', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_tarjetas()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_tarjetas');
        //if ($this->permisos <= 1) {
        //    redirect(base_url());
        //}
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        /*if ($this->session->userdata('tipo') == 3) {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
        }*/
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-tarjetas', $datos);
        $this->load->view('plantillas/footer');
    }

    /**
      * Funciones Devoluciones Alto costo
    **/
    public function solicitudes_devoluciones_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_alto_costo');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-alto-costo', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitudes_devoluciones_tarjetas()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_alto_costo');
        //if (!($this->permisos > 0)) {
        //    redirect(base_url());
        //}
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-tarjetas', $datos);
        $this->load->view('plantillas/footer');
    }

    public function devoluciones_area_medica(){
        $this->permisos = $this->departamentos_model->permisos('devoluciones_area_medica');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $data['clase_pagina'] = 'devoluciones-page';
        $data['titulo'] = 'Solicitudes de devolución';
        $datos['permiso'] = $this->permisos;
        //$datos['solicitudes'] = $this->almacen_model->solicitudes_devolucionesAC();
        $datos['tipo_permiso'] = $this->permisos;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/solicitudes-devolucion-area-medica', $datos);
        $this->load->view('plantillas/footer');
    }

    public function mostrarSolicitudesDevolucionAC()
    {
        //valor a buscar
        $buscar2 = $this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionAC" => $this->almacen_model->solicitudes_devolucionesAC($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesAC($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionAreaMedica()
    {
        //valor a buscar
        $buscar2 = $this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionAC" => $this->almacen_model->solicitudes_devolucionesAreaMedica($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesAreaMedica($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionSistemas()
    {
        //valor a buscar
        $buscar2 = $this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionSistemas" => $this->almacen_model->solicitudes_devolucionesSistemas($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesSistemas($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function mostrarSolicitudesDevolucionACV()
    {
        //valor a buscar
        $buscar2 = $this->input->post('buscar2');
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "solicitudesDevolucionACV" => $this->almacen_model->solicitudes_devolucionesACV($buscar, $buscar2, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->solicitudes_devolucionesACV($buscar, $buscar2)),
      "cantidad" => $cantidad
    );

        echo json_encode($data);
    }

    public function solicitud_devolucion_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_alto_costo');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        /*if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('alto-costo');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('alto-costo');
        }*/
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['kuali'] = $this->almacen_model->almacen_kuali();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-alto-costo', $datos);
        $this->load->view('plantillas/footer');
    }

    public function solicitud_devolucion_area_medica()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones_area_medica');
        if ($this->permisos <= 1) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $data['titulo'] = 'Solicitud de devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('area_medica');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo('area_medica');
        }
        $datos['token'] = $this->token();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/nueva-devolucion-area-medica', $datos);
        $this->load->view('plantillas/footer');
    }
  
    public function detalle_devolucion_material($uid)
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
        $this->permisos3 = $this->departamentos_model->permisos('devoluciones_kuali');
        $this->permisos4 = $this->departamentos_model->permisos('devoluciones_sistemas');
        $this->permisos5 = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
        $this->permisos6 = $this->departamentos_model->permisos('devoluciones_area_medica');
        if (!($this->permisos2 > 0 || $this->permisos > 0 || $this->permisos3 > 0 || $this->permisos4 > 0 || $this->permisos5 > 0 || $this->permisos6 > 0)) {
            redirect(base_url());
        }
        $solicitud = $datos['solicitud'] = $this->almacen_model->detalle_devolucion($uid);
        //$data['token'] = $this->token();
        $data['titulo'] = 'Detalle Solicitud Devolución';
        $data['clase_pagina'] = 'devolucion-page';
        $datos['permiso'] = $this->permisos;
        $datos['permisoAC'] = $this->permisos2;
        $datos['detalle'] = $this->almacen_model->detalle_devolucion_catalogo($datos['solicitud']->idtbl_solicitud_devolucion);
        $datos['detalle_auto'] = $this->almacen_model->detalle_devolucion_auto($datos['solicitud']->idtbl_solicitud_devolucion);
        $datos['catalogo'] = $this->almacen_model->catalogo();
        if($this->session->userdata('tipo') == 4){
          $datos['almacenes'] = $this->almacen_model->almacenes();
        }else{
          $datos['almacenes'] = $this->almacen_model->almacenes();
        }
        $datos['personal_autorizacion_control_vehicular'] = $this->almacen_model->autorizados_control_vehicular();
        $datos['personal_autorizacion_sistemas'] = $this->almacen_model->autorizados_sistemas();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['uid_salida'] = uniqid();
        $datos['uid_devolucion'] = $uid;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu');
        
        if ($this->uri->segment(2) == 'detalle-devolucion-interno') {
            $asignaciones = $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAG($solicitud->uid_usuario);
            $this->load->view('almacen/detalle-devolucion-interno', $datos);
        } else {
            if($this->session->userdata('tipo') == 3){
                $datos['ecos_asignados'] = $this->almacen_model->getEcosAsignados($solicitud->tbl_usuarios_idtbl_usuarios);
                //$datos['ecos_asignadosdos'] = $this->almacen_model->getEcosAsignadosDos($solicitud->numero_interno);
            }elseif($this->session->userdata('tipo') == 2){
                $datos['ecos_asignados'] = $this->almacen_model->getEquiposAsignados($solicitud->tbl_usuarios_idtbl_usuarios);
            }
            $this->load->view('almacen/detalle-devolucion-material', $datos);
        }
        $this->load->view('plantillas/footer');
    }

    public function devolucion_alto_costo($uid)
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
        $this->permisos3 = $this->departamentos_model->permisos('devoluciones_kuali');
        $this->permisos4 = $this->departamentos_model->permisos('devoluciones_refacciones_control_vehicular');
        $this->permisos5 = $this->departamentos_model->permisos('devoluciones_sistemas');
        $this->permisos6 = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
        $this->permisos7 = $this->departamentos_model->permisos('devoluciones_area_medica');
        if (!($this->permisos2 > 0 || $this->permisos > 0 || $this->permisos3 > 0 || $this->permisos4 > 0 || $this->permisos5 || $this->permisos6 || $this->permisos7)) {
            redirect(base_url());
        }
        if($this->session->userdata('tipo') == 2){
            if($_POST['categoria_p'][0] === 16) {
                $this->form_validation->set_rules('imagen', 'imagen', 'required');
                $this->form_validation->set_rules('imagen2', 'imagen2', 'required');
            }
        }else{
            $this->form_validation->set_rules('tipo_devolucion', 'tipo_devolucion', 'required');            
        }
		
		if ($this->form_validation->run() == FALSE && $_POST['categoria_p'][0] === 16) {
			echo json_encode(array(
				'status' => false,
				'message' => 'Favor de crear todas las imagenes'
			));
		}else{
            if ($this->session->userdata('tipo') == 2) {
                if($_POST['categoria_p'][0] == 16) {
                    $baseFromJavascript1 = $_POST['imagen'];
                    $data1 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript1));
                    $filepath1 = "./uploads/sistemas/".uniqid()."1.png";
                    file_put_contents($filepath1, $data1);

                    $baseFromJavascript2 = $_POST['imagen2'];
                    $data2 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript2));
                    $filepath2 = "./uploads/sistemas/".uniqid()."2.png";
                    file_put_contents($filepath2, $data2);

                    $imagenes = array(
                        'imagen1' => $filepath1,
                        'imagen2' => $filepath2
                    );
                } else {
                    $imagenes = null;
                }
            } else {
                $imagenes = null;
            }
            if ($this->session->userdata('tipo')==4) {
                $this->form_validation->set_rules('almacen', 'almacen', 'required|trim');
                $this->form_validation->set_rules('usuario_entrega', 'usuario entrega', 'required|trim');
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/detalle-devolucion-material/'.$uid);
                } else {
                    $check = $this->almacen_model->devolucion_alto_costo($uid, $imagenes);
                }
            } else {
                $check = $this->almacen_model->devolucion_alto_costo($uid, $imagenes);
            }
            if ($check) {
                $this->session->set_flashdata('exito', 'Registro exitoso');
                $this->almacen_model->log($this->session->userdata('nombre') . ' hizo la devolución');
                echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
            } else {
                echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
            }
        }
    }

    public function devolucion_recursos($id)
    {

        $check = $this->almacen_model->devolucion_recursos($id);
            
        if ($check) {
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.'
            ));
        }
        
    }

    public function getTodosActivosAsignadosAC() {
        
        $resultado = $this->almacen_model->getTodosActivosAsignadosAC($_POST['idtbl_usuarios']);
        echo json_encode($resultado);
      }

    //Función para eliminar una explosión de insumos
    public function eliminar_explosion()
    {
        
        $check = $this->almacen_model->eliminar_explosion();
        
        if ($check) {            
            $this->almacen_model->log($this->session->userdata('nombre') . ' elimino explosion');
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }


    //Completar devoluciones de almacen general
    public function completar_devolucion()
    {
        $acum_entregado = 0;
        $iddtl_almacen = 0;
        $aux = 0;
        foreach($this->input->post('iddtl_devolucion') AS $key => $value)
        {
            if ($this->session->userdata('tipo')==3) {
            $this->almacen_model->insertDtlSolicitudDevolucion($parametros);
                        $info = array(
                            'uid_desasignacion' =>$this->input->post('uid_desasignacion')
                        );
                        $this->almacen_model->guardarCheck($info);
                    }
            //validaciones
            if($iddtl_almacen == 0 || ($iddtl_almacen == $this->input->post('iddtl_devolucion')[$key])) {
                if(isset($this->input->post('estado')[$key]) && $this->input->post('estado')[$key] != '' && $this->input->post('entregado')[$key] >= 0) {
                //echo $this->input->post('iddtl_devolucion')[$key] . "|" . $this->input->post('estado')[$key] . "|" . $this->input->post('entregado')[$key] . '|' . $this->input->post('cantidad_p')[$key] . "<br>";
                
                    $iddtl_almacen = $this->input->post('iddtl_devolucion')[$key];
                    $acum_entregado = $acum_entregado + $this->input->post('entregado')[$key];
                    //echo $acum_entregado . "<br>";
                   
                    //insertar datos
                    if($acum_entregado == $this->input->post('cantidad_p')[$key] || $acum_entregado == 0) {
                        //echo "cerrar devolucion" . "<br>";
                        $parametros = array(
                            'cantidad' => $this->input->post('cantidad_p')[$key],
                            'tbl_solicitud_devolucion_idtbl_solicitud_devolucion' => $this->input->post('parent'),
                            'tbl_catalogo_idtbl_catalogo' => $this->input->post('producto_p')[$key],
                            'entregado' => $this->input->post('entregado')[$key],
                            'estado' => $this->input->post('estado')[$key]
                        );                                                
                        if ($this->session->userdata('id')==50) {
                            $datas = array(
                                'estatus_solicitud' => 'entregado',
                                'tbl_users_idtbl_users_kuali' => $this->session->userdata('id')
                            );
                        } else {
                            $datas = array(
                                'estatus_solicitud' => 'entregado',
                                'tbl_users_idtbl_users_ag' => $this->session->userdata('id')
                            );
                        }
                        $this->almacen_model->updateSolicitudDevolucion($datas, $this->input->post('parent'));
                        $aux = 1;
                        //$this->almacen_model->deleteDtlSolicitudDevolucion($this->input->post('iddtl_devolucion')[$key]);
                    } elseif($acum_entregado > $this->input->post('cantidad_p')[$key]) {
                        //echo "usted no puede devolver la cantidad de " . $this->input->post('entregado')[$key] .  " ya que sobre pasa la cantidad de la solicitud" . "<br>";
                    } elseif($acum_entregado < $this->input->post('cantidad_p')[$key]) {
                        //echo "aún falta mercancía por devolver" . "<br>";
                        $parametros = array(
                            'cantidad' => $this->input->post('cantidad_p')[$key],
                            'tbl_solicitud_devolucion_idtbl_solicitud_devolucion' => $this->input->post('parent'),
                            'tbl_catalogo_idtbl_catalogo' => $this->input->post('producto_p')[$key],
                            'entregado' => $this->input->post('entregado')[$key],
                            'estado' => $this->input->post('estado')[$key]
                        );
                        $this->almacen_model->insertDtlSolicitudDevolucion($parametros);                        
                    }
                }    
            } else {
                if(isset($this->input->post('estado')[$key]) && $this->input->post('estado')[$key] != '' && $this->input->post('entregado')[$key] >= 0) {
                    $iddtl_almacen = $this->input->post('iddtl_devolucion')[$key];
                    $acum_entregado = 0;
                    $acum_entregado = $acum_entregado + $this->input->post('entregado')[$key];
                    //echo $acum_entregado . "<br>";
                    //insertar datos
                    if($acum_entregado == $this->input->post('cantidad_p')[$key]) {
                        //echo "cerrar devolucion" . "<br>";
                        $parametros = array(
                            'cantidad' => $this->input->post('cantidad_p')[$key],
                            'tbl_solicitud_devolucion_idtbl_solicitud_devolucion' => $this->input->post('parent'),
                            'tbl_catalogo_idtbl_catalogo' => $this->input->post('producto_p')[$key],
                            'entregado' => $this->input->post('entregado')[$key],
                            'estado' => $this->input->post('estado')[$key]
                        );
                        $this->almacen_model->insertDtlSolicitudDevolucion($parametros);
                        if ($this->session->userdata('id')==50) {
                            $datas = array(
                                'estatus_solicitud' => 'entregado',
                                'tbl_users_idtbl_users_kuali' => $this->session->userdata('id')
                            );
                        } else {
                            $datas = array(
                                'estatus_solicitud' => 'entregado',
                                'tbl_users_idtbl_users_ag' => $this->session->userdata('id')
                            );
                        }
                        $this->almacen_model->updateSolicitudDevolucion($datas, $this->input->post('parent'));
                        $aux = 1;
                        $this->almacen_model->deleteDtlSolicitudDevolucion($this->input->post('iddtl_devolucion')[$key]);
                    } elseif($acum_entregado > $this->input->post('cantidad_p')[$key]) {
                        //echo "usted no puede devolver la cantidad de " . $this->input->post('entregado')[$key] .  " ya que sobre pasa la cantidad de la solicitud" . "<br>";
                    } elseif($acum_entregado < $this->input->post('cantidad_p')[$key]) {
                        //echo "aún falta mercancía por devolver" . "<br>";
                        $parametros = array(
                            'cantidad' => $this->input->post('cantidad_p')[$key],
                            'tbl_solicitud_devolucion_idtbl_solicitud_devolucion' => $this->input->post('parent'),
                            'tbl_catalogo_idtbl_catalogo' => $this->input->post('producto_p')[$key],
                            'entregado' => $this->input->post('entregado')[$key],
                            'estado' => $this->input->post('estado')[$key]
                        );
                        $this->almacen_model->insertDtlSolicitudDevolucion($parametros);
                    }
                }
            }
        }
        if($aux == 1) {
            $this->permisos = $this->departamentos_model->permisos('devoluciones');
            $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
            $this->permisos3 = $this->departamentos_model->permisos('devoluciones_kuali');
            $this->permisos4 = $this->departamentos_model->permisos('devoluciones_refacciones_control_vehicular');
            $this->permisos5 = $this->departamentos_model->permisos('devoluciones_sistemas');
            $this->permisos6 = $this->departamentos_model->permisos('devoluciones_autos_control_vehicular');
            if (!($this->permisos2 > 0 || $this->permisos > 0 || $this->permisos3 > 0 || $this->permisos4 > 0 || $this->permisos5 || $this->permisos6)) {
                redirect(base_url());
            }
            if ($this->session->userdata('tipo')==4) {
                //$this->form_validation->set_rules('uid_almacen', 'almacen', 'required|trim');
                $this->form_validation->set_rules('usuario_entrega', 'usuario entrega', 'required|trim');
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/detalle-devolucion-material/');
                } else {
                    $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones';
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones/' . $this->input->post('uid_devolucion');
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $this->load->library('upload');
                    $urlimg = $carpeta . '/';
                    $config['upload_path'] = $urlimg;
                    $config['allowed_types'] = 'pdf';
                    $config['overwrite'] = true;
                    try {                    
                        $config['file_name'] = 'responsiva';
                        $this->upload->initialize($config);
                        $this->upload->do_upload('responsiva');                        
                        $check = $this->almacen_model->completar_devolucion();
                    }catch (Exception $e) {
                        $this->rmDir_rf($carpeta);
                        echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                        ));
                    }
                }
            } else {
                $check = $this->almacen_model->completar_devolucion();
            }
            if ($check) {
                $this->session->set_flashdata('exito', 'Registro exitoso');
                $this->almacen_model->log($this->session->userdata('nombre') . ' hizo la devolución');
                echo json_encode(array(
                    'status' => true,
                    'message' => 'Se aprobó correctamente'
                ));
            } else {
                echo json_encode(array(
                    'status' => false,
                    'message' => 'Ocurrio un problema intente nuevamente.l3'
                ));
            }
        } else {
            $this->almacen_model->deleteDtlSolicitudDevolucionBy($this->input->post('parent'));
            echo json_encode(array(
                'status' => false,
                'message' => 'Verifique la información proporcionada'
            )); 
        }       
    }

    public function mostrarCuadrillas()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
          "cuadrillas" => $this->almacen_model->getCuadrillas($buscar, $inicio, $cantidad),
          "totalRegistros" => count($this->almacen_model->getCuadrillas($buscar)),
          "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Carga vista de cuadrillas
  public function cuadrillas() {
    $this->load->model('personal_model');
    $datos['titulo'] = 'Cuadrillas';
    $datos['clase_pagina'] = 'cuadrillas-page';

    //$datos['certificados'] = $this->personal_model->certificados();
    //$datos['instructores'] = $this->curso_model->getInstructores();
    //$datos['departamentos'] = $this->personal_model->departamentos();
    $this->load->view('plantillas/header', $datos);
    $this->load->view('plantillas/menu', $datos);
    $this->load->view('almacen/ver-cuadrillas', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function nuevaCuadrilla()
    {
        $this->form_validation->set_rules('nombre_cuadrilla', 'Nombre Cuadrilla', 'required');
        if ($this->form_validation->run() == false) {
            echo json_encode(array(
            'status' => false,
            'message' => 'El campo nombre es requerido'
            ));
        } else {
            $exist = $this->almacen_model->verificarCuadrilla();
            if($exist == true){
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => '¡La cuadrilla ya existe!'
                    ));
                    return;
            }

            $check = $this->almacen_model->nuevaCuadrilla();
            if ($check == true) {
                echo json_encode(array(
                'error' => false,
                'mensaje' => 'Se registro la cuadrilla correctamente'
                ));
            } else {
                echo json_encode(array(
                'error' => true,
                'mensaje' => $check
                ));
            }
                
        }
    }

    public function editarCuadrilla()
    {
        $this->form_validation->set_rules('nombre_cuadrillaEdit', 'Nombre Cuadrilla', 'required');
        if ($this->form_validation->run() == false) {
            echo json_encode(array(
            'status' => false,
            'message' => 'El campo nombre es requerido'
            ));
        } else {
            $exist = $this->almacen_model->verificarCuadrilla();
            if($exist == true){
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => '¡La cuadrilla ya existe!'
                    ));
                    return;
            }

            $check = $this->almacen_model->editarCuadrilla();
            if ($check == true) {
                echo json_encode(array(
                'error' => false,
                'mensaje' => 'Se modificó la cuadrilla correctamente'
                ));
            } else {
                echo json_encode(array(
                'error' => true,
                'mensaje' => $check
                ));
            }
                
        }
    }

    public function guardar_personal_cuadrilla() {
		
			/*$this->form_validation->set_rules('personal_cuadrilla', 'Personal Cuadrilla', 'required|trim');
			//$this->form_validation->set_rules('folio', 'folio', 'trim');
			if ($this->form_validation->run() == FALSE) {
				$this->session->set_flashdata('error', 'Datos incorrectos, intente nuevamente.');
				redirect(base_url() . $this->input->post('from'));
			}*/
			
            
			if ($this->almacen_model->guardar_personal_cuadrilla()) {
				//$this->session->set_flashdata('exito', 'Registro exitoso');
				echo json_encode(array(
                    'error' => false,
                    'mensaje' => 'Se registro el personal correctamente'
                ));
				
			} else {
				$this->session->set_flashdata('error', 'Ocurrio un error intente nuevamente.');
				redirect(base_url() . $this->input->post('from'));
			}
		
	}

    public function movimientos_devoluciones()
    {
        $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
        if (!($this->permisos2 > 0)) {
            redirect(base_url());
        }
    
        $check = $this->almacen_model->movimientos_devoluciones();
       
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
      
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    public function devolucion_material_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('devoluciones');
        $this->permisos2 = $this->departamentos_model->permisos('devoluciones_alto_costo');
        if (!($this->permisos2 > 0 || $this->permisos > 0)) {
            redirect(base_url());
        }
        $check = $this->almacen_model->devolucion_material_alto_costo();
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' hizo la devolución');
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    public function nueva_devolucion($uid)
    {
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos_almacen > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Devolución';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['autorizados'] = $this->almacen_model->autorizados_almacen();
        $datos['folio'] = uniqid();
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid);
        if ($datos['almacen']) {
            $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes);
        }
        $datos['catalogo'] = $this->almacen_model->catalogo();
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/nueva-devolucion', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function continuar_traspaso($uid_traspaso, $uid_almacen)
    {
        $datos['uid_traspaso'] = $uid_traspaso;
        if (!$datos['traspaso'] = $this->almacen_model->continuar_traspaso($uid_traspaso)) {
            redirect(base_url());
        }
    
        $id_movimiento = $datos['traspaso']->idtbl_almacen_movimientos;
        $folio = $datos['traspaso']->folio;
        $tipo = $datos['traspaso']->tipo_movimiento;
        $datos['folio'] = array(
      'folio' => $folio,
      'id_movimiento' => $id_movimiento
        );
        $datos['almacen_origen'] = $this->almacen_model->detalle_almacen($datos['traspaso']->tbl_almacenes_idtbl_almacenes);
        $datos['almacen_destino'] = $this->almacen_model->detalle_almacen($datos['traspaso']->tbl_almacenes_idtbl_almacenes_destino);
        $datos['tipo'] = $datos['traspaso']->tipo_movimiento;
        $datos['uid_almacen'] = $uid_almacen;
        /* */
    
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
       
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Continuar traspasos';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid_almacen);
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
    
        /*if ($datos['almacen_origen']) {
            if ($tipo == 'herramienta') {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'alto-mediano-costo');
            } elseif ($tipo == 'consumible') {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'material');
            } else {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'general');
            }
        }*/
    
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
   
        $this->load->view('almacen/nuevo-traspaso', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function continuar_asignacion($uid_asignacion, $uid_usuario)
    {
        $datos['uid_asignacion'] = $uid_asignacion;
        if (!$datos['asignacion'] = $this->almacen_model->continuar_asignacion($uid_asignacion)) {
            redirect(base_url());
        }
    
        $datos['folio'] = $datos['asignacion']->folio;
        $datos['tipo'] = $datos['asignacion']->tipo_movimiento;
        $datos['uid_usuario'] = $uid_usuario;
        /* */
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen_area_medica');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $this->permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
    
        if (!($this->permisos_almacen > 1 || $this->permisos_almacen_alto_costo > 1 || $this->permisos_almacen_autos_control_vehicular > 1 || $this->permisos_almacen_sistemas > 1 || $this->permisos_almacen_seguridad_e_higiene > 1)) {
            redirect(base_url());
        }
    
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
    
        if ($this->session->userdata('tipo') == 3) {
            $this->load->model('controlvehicular_model');
            $datos['prueba_manejo'] = $this->controlvehicular_model->getPruebaManejo($uid_usuario);
        }

        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Continuar asignación';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['detalle'] = $this->personal_model->detalle_usuario($uid_usuario);
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
   
        if ($this->session->userdata('tipo')==1) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_ALTO_COSTO);
        } elseif ($this->session->userdata('tipo') == 3 && $datos['tipo'] != "refaccion") {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        } elseif ($this->session->userdata('tipo') == 3 && $datos['tipo'] == "refaccion") {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_REFACCIONES_CONTROL_VEHICULAR);
        } elseif ($this->session->userdata('tipo') == 3 && $datos['tipo'] == "tarjetas") {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_TARJETAS_GASOLINA);
        } elseif ($this->session->userdata('tipo')==14 || $this->permisos_almacen > 1) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AREA_MEDICA);
        } elseif($this->session->userdata('tipo')==10){
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_GENERAL);
        } elseif ($this->session->userdata('tipo')==2) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_SISTEMAS);
        }
    
        if ($datos['almacen']) {
            $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen']->idtbl_almacenes, $datos['tipo']);
        }
    
        $datos['tipo_documentos'] = $this->almacen_model->tipo_documentos();
        if ($datos['tipo'] == 'material' || $datos['tipo'] == 'refaccion' || ($this->session->userdata('tipo')==14 || ($this->session->userdata('tipo')==10 && $this->permisos_almacen > 1))) {
            $this->load->view('almacen/nueva-asignacion-material', $datos);
        } else {
            $datos['personal_control_vehicular'] = $this->almacen_model->getPersonalControlVehicular();
            $this->load->view('almacen/nueva-asignacion', $datos);
        }
        $this->load->view('plantillas/footer', $datos);
    }

    public function continuar_asignacion_paginacion()
    {
        $uid_asignacion = $this->input->post("uid_asignacion");
        $uid_usuario = $this->input->post("uid_usuario");
        $precio_dolar = $this->precio_actual_dolar();

        $datos['uid_asignacion'] = $uid_asignacion;
        if (!$datos['asignacion'] = $this->almacen_model->continuar_asignacion($uid_asignacion)) {
            redirect(base_url());
        }
        $datos['folio'] = $datos['asignacion']->folio;
        $datos['tipo'] = $datos['asignacion']->tipo_movimiento;
        $datos['uid_usuario'] = $uid_usuario;

        if ($this->session->userdata('tipo') == 1) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_ALTO_COSTO);
        } elseif ($this->session->userdata('tipo') == 3 && $datos['tipo'] != 'tarjetas') {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        } elseif ($this->session->userdata('tipo') == 3 && $datos['tipo'] == 'tarjetas') {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_TARJETAS_GASOLINA);
        } elseif ($this->session->userdata('tipo')==14 || ($this->session->userdata('tipo')==10 && $this->permisos_almacen > 1)) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_AREA_MEDICA);
        } elseif ($this->session->userdata('tipo')==2) {
            $datos['almacen'] = $this->almacen_model->detalle_almacen(UID_ALMACEN_SISTEMAS);
        }
        if ($datos['almacen']) {
            if ($datos['tipo'] == "herramienta") {
                $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo']);
                $datos['count'] = count($this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo']));
            } else {
                if ($this->session->userdata('tipo') == 3) {
                    //valor a buscar
                    $buscar = $this->input->post('buscar');
                    $numeroPagina = $this->input->post('nropagina');
                    $cantidad = 10;
                    $inicio = ($numeroPagina - 1) * $cantidad;
                    if($datos['tipo'] == 'tarjetas'){
                        $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo'], true);
                        $datos['count'] = count($this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo']));
                    }else{
                        $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen_paginacion_acv($buscar, $inicio, $cantidad);
                        $datos['count'] = count($this->almacen_model->inventario_almacen_paginacion_acv($buscar));
                    }
                } else {
                    $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo'], true);
                    $datos['count'] = count($this->almacen_model->inventario_almacen_paginacion($datos['almacen']->idtbl_almacenes, $datos['tipo']));
                }
            }
        }
    
    for($r=0; $r<count($datos['inventario_almacen']); $r++){
      $value = $datos['inventario_almacen'][$r];
      $value->precio_letra = ($value->tipo_moneda=='d') ? $this->numletras(($value->precio*$precio_dolar), 'd') : $this->numletras($value->precio, 'p');
      $value->precio_formato = ($value->tipo_moneda=='d') ? number_format($value->precio*$precio_dolar, 2) : number_format($value->precio, 2);
    }
    echo json_encode($datos);
  }

  public function detalle_asignacion($uid) {
    $this->permisos = $this->departamentos_model->permisos('almacen_alto_costo');
    $this->permisos_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
    $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
    $this->permisos_personal = $this->departamentos_model->permisos('personal');
    //if (!($this->permisos > 0 || $this->permisos_area_medica > 0 || $this->permisos_almacen_autos_control_vehicular > 0 || $this->permisos_personal > 0))
    //  redirect(base_url());
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Asignación';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->detalle_asignacion($uid);
    $this->load->model('controlvehicular_model');
    $datos['numero_interno'] = $datos['detalle'][0]->numero_interno;
    $datos['checklist_devolucion'] = [];
    if($datos['detalle'][0]->tbl_almacenes_idtbl_almacenes == 28){
        $uid_devolucion = $this->almacen_model->getChecklistDevolucion($datos['detalle'][0]->folio);
        $datos['checklist_devolucion'] = $this->controlvehicular_model->getChecklistDevolucion($uid_devolucion);
    }        
    $datos['checklist_asignacion'] = $this->controlvehicular_model->getChecklist($uid);
    $this->load->view('almacen/detalle-asignacion', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_entrada($uid) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Entrada';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosReporte($uid);
    if($datos['detalle'][0]->movimiento_virtual == 3){
        $this->load->view('almacen/detalle-entrada-explosion', $datos);
    }else{
        $this->load->view('almacen/detalle-entrada', $datos);
    }
    $this->load->view('plantillas/footer', $datos);
  }

  /*FUNCION PARA ICONO DE INFORMACION*/
  public function detalle_info($uid) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Información entrada';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosInfo($uid);
    $this->load->view('almacen/detalle-entrada', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function editar_entrada($uid) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Editar Entrada';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosReporte($uid);
    $this->load->view('almacen/editar-entrada', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_salida($uid, $virtual) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Salida';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosReporteSalidas($uid, $virtual);
    $datos['id_almacen_movimientos'] = $uid;
    $this->load->view('almacen/detalle-salida', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function devolucion_detalle($uid) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Devolución';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosReporteDevoluciones($uid);
    $this->load->view('almacen/devolucion_detalle', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_traspaso($uid) {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Traspaso';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->getProductosReporteTraspaso($uid);
    $this->load->view('almacen/detalle-traspaso', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_movimientos($tipo, $uid) {
    $this->permisos = $this->departamentos_model->permisos('almacen');
    if (!($this->permisos > 0))
      redirect(base_url());
    $datos['token'] = $this->token();
    $datos['titulo'] = ucwords(str_replace('-almacen', ' almacén', str_replace('devolucion', 'devolución', $tipo)));
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->detalle_movimiento($tipo, $uid);
    if ($tipo == 'traspaso-almacen') {
      $datos['detalle'][0]->numero_proyecto_destino = $this->almacen_model->datos_traspaso($datos['detalle'][0]->uid)->numero_proyecto;
      $datos['detalle'][0]->nombre_proyecto_destino = $this->almacen_model->datos_traspaso($datos['detalle'][0]->uid)->nombre_proyecto;
    }
    $datos['tipo'] = $tipo;
    $this->load->view('almacen/detalle-movimiento', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_producto($iddtl_almacen) {
    $this->permisos = $this->departamentos_model->permisos('almacen_alto_costo');
    $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
    $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
    $this->permisos_almacen_general = $this->departamentos_model->permisos('almacen');
    if (!($this->permisos > 0 || $this->permisos_almacen_autos_control_vehicular > 0 || $this->permisos_almacen_sistemas > 0 || $this->permisos_almacen_general))
      redirect(base_url());
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Producto';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->detalle_producto($iddtl_almacen);    
    $datos['nombre'] = $this->almacen_model->nombre_desasignacion($iddtl_almacen);
    $this->load->view('almacen/detalle-producto', $datos);    
    $this->load->view('plantillas/footer', $datos);
  } 


  public function impAsignacionesCV($uid_asignacion) {    
    $this->load->model('almacen_model');
    $this->load->model('controlvehicular_model');
    $header['titulo'] = 'CheckList Asignación';
    $header['clase_pagina'] = 'personal-page';
    $datos['token'] = $this->token();        
    $datos['checklist_asignacion'] = $this->controlvehicular_model->getChecklist($uid_asignacion);    
    $datos['precio_dolar'] = $this->precio_actual_dolar();        
    $this->load->view('plantillas/header', $header);
    $this->load->view('almacen/detalle_productoCV', $datos);
}
public function impDevolucionesCV($uid_asignacion) {    
    $this->load->model('almacen_model');
    $this->load->model('controlvehicular_model');
    $header['titulo'] = 'CheckList Devolución';
    $header['clase_pagina'] = 'personal-page';
    $datos['token'] = $this->token();        
    $datos['checklist_devolucion'] = $this->controlvehicular_model->getChecklistDevolucion($uid_asignacion);    
    //echo($uid_devolucion);
    //return;
    $datos['precio_dolar'] = $this->precio_actual_dolar();        
    $this->load->view('plantillas/header', $header);
    $this->load->view('almacen/detalle_productodevCV', $datos);
}

  public function detalle_producto_combustible($iddtl_almacen) {
    $this->permisos = $this->departamentos_model->permisos('almacen_alto_costo');
    $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
    $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
    $this->permisos_almacen_general = $this->departamentos_model->permisos('almacen');
    if (!($this->permisos > 0 || $this->permisos_almacen_autos_control_vehicular > 0 || $this->permisos_almacen_sistemas > 0 || $this->permisos_almacen_general))
      redirect(base_url());
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Producto';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->detalle_producto_combustible($iddtl_almacen);
    $this->load->view('almacen/detalle-producto-combustible', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  public function detalle_personal($uid_usuario) {
    $this->permisos = $this->departamentos_model->permisos('almacen_alto_costo');
    $this->permisos = $this->departamentos_model->permisos('almacen_sistemas');
    if (!($this->permisos > 0))
      redirect(base_url());
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Detalle Producto';
    $datos['clase_pagina'] = 'almacen-page';
    $this->load->view('plantillas/header', $datos);
    $datos['precio_dolar'] = $this->precio_actual_dolar();
    $datos['detalle'] = $this->almacen_model->detalle_personal($uid_usuario);
    $this->load->view('almacen/almacen-detalle-personal', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  

    public function guardar_asignacion_hilti()
    {
        //if($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')){
        $uid = $this->input->post('uid_asignacion');
        $carpeta = './uploads/' . $this->input->post('uid_usuario');
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $uid;
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $this->load->library('upload');
        $urlimg = $carpeta . '/';
        $config['upload_path'] = $urlimg;
        $config['allowed_types'] = 'pdf';
        $config['overwrite'] = true;
        try {
            $config['file_name'] = 'solicitud-almacen';
            $this->upload->initialize($config);
            if (!$this->upload->do_upload('solicitud')) {
                throw new Exception('Problema al cargar solicitud de almacen.');
            }
            $config['file_name'] = 'salida-almacen-hilti';
            $this->upload->initialize($config);
            if (!$this->upload->do_upload('salida-almacen')) {
                throw new Exception('Problema al cargar solicitud de almacen.');
            }
            if ($this->almacen_model->guardar_asignacion_alto_costo() != true) {
                throw new Exception('Problema al guardar asignación.');
            }
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva asignación', 'almacen/asignacion/detalle/' . $uid);
            echo json_encode(array(
                'status' => true
            ));
        } catch (Exception $e) {
            $this->rmDir_rf($carpeta);
            echo json_encode(array(
                'status' => false,
                'message' => $e->getMessage()
            ));
        }
        //}else
        //  redirect(base_url());
    }

    public function guardar_asignacion_alto_costo()
    {
        if($this->session->userdata('tipo') == 2){
            $this->form_validation->set_rules('imagen', 'imagen', 'required');
            $this->form_validation->set_rules('imagen2', 'imagen2', 'required');
        }else{
            $this->form_validation->set_rules('tipo', 'tipo', 'required');            
        }
		
		if ($this->form_validation->run() == FALSE) {
			echo json_encode(array(
				'status' => false,
				'message' => 'Favor de crear todas las imagenes'
			));
		}else{
            if($this->session->userdata('tipo') == 2){
                $baseFromJavascript1 = $_POST['imagen'];
                $data1 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript1));
                $filepath1 = "./uploads/sistemas/".uniqid()."1.png";
                file_put_contents($filepath1,$data1);

                $baseFromJavascript2 = $_POST['imagen2'];
                $data2 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript2));
                $filepath2 = "./uploads/sistemas/".uniqid()."2.png";
                file_put_contents($filepath2,$data2);

                $imagenes = array(
                    'imagen1' => $filepath1,
                    'imagen2' => $filepath2                
                );
            }else{
                $imagenes = NULL;
            }

            //if($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')){
            $uid = $this->input->post('uid_asignacion');
            $carpeta = './uploads/' . $this->input->post('uid_usuario');
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $uid;
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $this->load->library('upload');
            $urlimg = $carpeta . '/';
            $config['upload_path'] = $urlimg;
            $config['allowed_types'] = 'pdf';
            $config['overwrite'] = true;
            try {
                $config['file_name'] = 'solicitud-almacen';
                $this->upload->initialize($config);
                if ($this->upload->do_upload('solicitud')) {
                    throw new Exception('Problema al cargar solicitud de almacen.');
                }
                $config['file_name'] = 'contrato';
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('contrato')) {
                    throw new Exception('Problema al cargar contrato.');
                }
                if ($this->almacen_model->guardar_asignacion_alto_costo($imagenes) != true) {
                    throw new Exception('Problema al guardar asignación.');
                }
                $this->session->set_flashdata('exito', 'Registro exitoso');
                $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva asignación', 'almacen/asignacion/detalle/' . $uid);
                echo json_encode(array(
                    'status' => true
                ));
            } catch (Exception $e) {
                $this->rmDir_rf($carpeta);
                echo json_encode(array(
                    'status' => false,
                    'message' => $e->getMessage()
                ));
            }
            //}else
            //  redirect(base_url());
        }
    }

    public function editarDocumentoACV()
    {
        if (!file_exists($_FILES['contrato']['tmp_name']) || !is_uploaded_file($_FILES['contrato']['tmp_name'])) {
            throw new Exception('No se seleccionó ningún archivo.');
        } else {
            $carpeta = './uploads/' . $this->input->post('uid_user') . '/asignaciones/' . $this->input->post('uid_movimiento');
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $this->load->library('upload');
            $urlimg = $carpeta . '/';
            $config['upload_path'] = $urlimg;
            $config['allowed_types'] = 'pdf';
            $config['overwrite'] = true;
            try {
                $config['file_name'] = 'contrato';
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('contrato')) {
                    throw new Exception('Problema al cargar contrato.');
                }
                $this->session->set_flashdata('exito', 'Registro exitoso');
                echo json_encode(array(
                    'status' => true
                ));
            } catch (Exception $e) {
                $this->rmDir_rf($carpeta);
                echo json_encode(array(
                    'status' => false,
                    'message' => $e->getMessage()
                ));
            }
            //}else
      //  redirect(base_url());
        }
    }

    public function guardar_asignacion_autos_control_vehicular()
    {
        //if($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')){
        $uid = $this->input->post('uid_asignacion');
        $carpeta = './uploads/' . $this->input->post('uid_usuario');
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $uid;
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $this->load->library('upload');
        $urlimg = $carpeta . '/';
        $config['upload_path'] = $urlimg;
        $config['allowed_types'] = 'pdf';
        $config['overwrite'] = true;
        try {
            $imagenes = NULL;
            //$config['file_name'] = 'solicitud-almacen';
            //$this->upload->initialize($config);
            //if ($this->upload->do_upload('solicitud'))
            //throw new Exception('Problema al cargar solicitud de almacen.');
            $config['file_name'] = 'contrato';
            $this->upload->initialize($config);
            if (!$this->upload->do_upload('contrato')) {
                throw new Exception('Problema al cargar contrato.');
            }
            if ($this->almacen_model->guardar_asignacion_alto_costo($imagenes) != true) {
                throw new Exception('Problema al guardar asignación.');
            }
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva asignación', 'almacen/asignacion/detalle/' . $uid);
            echo json_encode(array(
                'status' => true
            ));
        } catch (Exception $e) {
            $this->rmDir_rf($carpeta);
            echo json_encode(array(
                'status' => false,
                'message' => $e->getMessage()
            ));
        }
        //}else
    //  redirect(base_url());
    }

    public function guardar_asignacion_herramienta()
    {
        //if($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')){
        $uid = $this->input->post('uid_asignacion');
        $carpeta = './uploads/' . $this->input->post('uid_usuario');
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $uid;
        if (!file_exists($carpeta)) {
            mkdir($carpeta, 0755, true);
        }
        $this->load->library('upload');
        $urlimg = $carpeta . '/';
        $config['upload_path'] = $urlimg;
        $config['allowed_types'] = 'pdf';
        $config['overwrite'] = true;
        try {
            $imagenes = NULL;
            $config['file_name'] = 'solicitud-almacen';
            $this->upload->initialize($config);
            if ($this->upload->do_upload('solicitud')) {
                throw new Exception('Problema al cargar solicitud de almacen.');
            }
            $config['file_name'] = 'responsiva';
            $this->upload->initialize($config);
            if (!$this->upload->do_upload('responsiva')) {
                throw new Exception('Problema al cargar la responsiva.');
            }
            if ($this->almacen_model->guardar_asignacion_alto_costo($imagenes) != true) {
                throw new Exception('Problema al guardar asignación.');
            }
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva asignación', 'almacen/asignacion/detalle/' . $uid);
            echo json_encode(array(
                'status' => true
            ));
        } catch (Exception $e) {
            $this->rmDir_rf($carpeta);
            echo json_encode(array(
                'status' => false,
                'message' => $e->getMessage()
            ));
        }
        //}else
    //  redirect(base_url());
    }

    public function guardar_asignacion_material()
    {
        //if($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')){
        if (count($this->input->post('cantidad')) == count($this->input->post('producto'))) {
            $uid = $this->input->post('uid_asignacion');
            $carpeta = './uploads/' . $this->input->post('uid_usuario');
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }
            $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $uid;
            if (!file_exists($carpeta)) {
                mkdir($carpeta, 0755, true);
            }

            $baseFromJavascript6 = $this->input->post('imagen6') !== NULL ? $this->input->post('imagen6') : "";
            if($baseFromJavascript6 != ""){
                $data6 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript6));
                $filepath6 = "./uploads/firmas/solicitudes/". $uid ."6.png";
                file_put_contents($filepath6, $data6);
            }
            $baseFromJavascript7 = $this->input->post('imagen7') !== NULL ? $this->input->post('imagen7') : "";
            if($baseFromJavascript7 != ""){
                $data7 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript7));
                $filepath7 = "./uploads/firmas/solicitudes/". $uid ."7.png";
                file_put_contents($filepath7, $data7);
            }

            $this->load->library('upload');
            $urlimg = $carpeta . '/';
            $config['upload_path'] = $urlimg;
            $config['allowed_types'] = 'pdf';
            $config['overwrite'] = true;
            try {
                $config['file_name'] = 'solicitud-almacen';
                $this->upload->initialize($config);
                if ($this->upload->do_upload('solicitud')) {
                    throw new Exception('Problema al cargar solicitud de almacen.');
                }
                if(isset($_FILES['responsiva']) && $_FILES['responsiva']['name'] != ""){
                    $config['file_name'] = 'responsiva';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('responsiva')) {
                        throw new Exception('Problema al cargar la responsiva.');
                    }
                }
                if ($this->almacen_model->guardar_asignacion() != true) {
                    throw new Exception('Problema al guardar asignación.');
                }
                $this->session->set_flashdata('exito', 'Registro exitoso');
                $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva asignación', 'almacen/asignacion/detalle/' . $uid);
                echo json_encode(array(
                    'status' => true
                ));
            } catch (Exception $e) {
                $this->rmDir_rf($carpeta);
                echo json_encode(array(
                    'status' => false,
                    'message' => $e->getMessage()
                ));
            }
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.' . count($this->input->post('cantidad')) . "-" . count($this->input->post('producto'))
            ));
            //}else
      //  redirect(base_url());
        }
    }

    public function guardar_salida()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if (count($this->input->post('cantidad')) == count($this->input->post('producto'))) {
                if ($this->input->post('activo_fijo') == 0 && $this->session->userdata('id') != 50) {
                    $this->form_validation->set_rules('imagen6', 'imagen6', 'required');
                    $this->form_validation->set_rules('imagen7', 'imagen7', 'required');
                }else{
                    $this->form_validation->set_rules('activo_fijo', 'activo_fijo', 'required');
                }

                if ($this->form_validation->run() == false) {
                    echo json_encode(array(
                        'status' => false,
                        'message' => 'Crear la imagen de la firma'
                    ));
                } else {
                    if ($this->input->post('activo_fijo') == 0 && $this->session->userdata('id') != 50) {
                        $baseFromJavascript6 = $_POST['imagen6'];
                        $baseFromJavascript7 = $_POST['imagen7'];
                        $data6 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript6));
                        $data7 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript7));
                        $filepath6 = "./uploads/firmas/solicitudes/".$this->input->post('uid_salida')."6.png";
                        $filepath7 = "./uploads/firmas/solicitudes/".$this->input->post('uid_salida')."7.png";
                        file_put_contents($filepath6, $data6);
                        file_put_contents($filepath7, $data7);

                        $imagenes = array(
                            'imagen6' => $filepath6,
                            'imagen7' => $filepath7
                        );
                    }else{
                        $imagenes = '';
                    }
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones';
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/asignaciones/' . $this->input->post('uid_salida');
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'pdf|jpg|png|jpeg|PNG';
                $config['overwrite'] = true;
                try {
                    $config['file_name'] = 'solicitud-almacen';
                    $this->upload->initialize($config);
                    $this->upload->do_upload('solicitud');
                    //if (!$this->upload->do_upload('solicitud')) {
                    //    throw new Exception('Problema al cargar solicitud de almacen.');
                    //}
                    $config['file_name'] = 'responsiva';
                    $this->upload->initialize($config);
                    if ($this->input->post('activo_fijo') == 1) {
                        if (!$this->upload->do_upload('responsiva')) {
                            throw new Exception('Problema al cargar la responsiva.');
                        }
                    }
                    if ($this->almacen_model->guardar_salida($imagenes) != true) {
                        throw new Exception('Problema al guardar asignación.');
                    }
                    $this->session->set_flashdata('exito', 'Registro exitoso');
                    $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva salida de almacen', 'almacen/movimientos/detalle/salida-almacen/' . $this->input->post('uid_salida'));
                    echo json_encode(array(
                        'status' => true
                    ));
                } catch (Exception $e) {
                    $this->rmDir_rf($carpeta);
                    echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                    ));
                } 
            }
            } else {
                echo json_encode(array(
                    'status' => false,
                    'message' => 'Ocurrio un problema intente nuevamente.x2'
                ));
            }
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.'
            ));
        }
    }

    public function guardar_devolucion()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if (count($this->input->post('cantidad')) == count($this->input->post('producto')) && count($this->input->post('estado')) == count($this->input->post('entregado'))) {
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones';
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones/' . $this->input->post('uid_devolucion');
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'pdf';
                $config['overwrite'] = true;
                try {
                    $config['file_name'] = 'solicitud-almacen';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('solicitud')) {
                        throw new Exception('Problema al cargar solicitud de almacen.');
                    }
                    $config['file_name'] = 'responsiva';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('responsiva')) {
                        throw new Exception('Problema al cargar la responsiva.');
                    }
                    if ($this->almacen_model->guardar_devolucion() != true) {
                        throw new Exception('Problema al guardar asignación.');
                    }
                    $this->session->set_flashdata('exito', 'Registro exitoso');
                    $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva devolución', 'almacen/movimientos/detalle/devolucion-almacen' . $this->input->post('uid_devolucion'));
                    echo json_encode(array(
                        'status' => true,
                        'message' => 'Se guardo la devolución'
                    ));
                    redirect($_SERVER["HTTP_REFERER"]);
                } catch (Exception $e) {
                    $this->rmDir_rf($carpeta);
                    echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                    ));
                }
            } else {
                echo json_encode(array(
                    'status' => false,
                    'message' => 'Ocurrio un problema intente nuevamente. Los valores no coinciden'
                ));
            }
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Token Incorrecto.'
            ));
        }
    }

    public function guardar_devolucion_interno()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if (count($this->input->post('iddtl_asignacion')) == count($this->input->post('producto')) && count($this->input->post('estado')) == count($this->input->post('entregado')) && count($this->input->post('observaciones')) == count($this->input->post('cantidad_entregar'))) {
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones';
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $carpeta = './uploads/' . $this->input->post('uid_usuario') . '/devoluciones/' . $this->input->post('uid_devolucion');
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'pdf';
                $config['overwrite'] = true;
                try {
                    $config['file_name'] = 'solicitud-almacen';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('solicitud')) {
                        throw new Exception('Problema al cargar solicitud de almacen.');
                    }
                    $config['file_name'] = 'responsiva';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload('responsiva')) {
                        throw new Exception('Problema al cargar la responsiva.');
                    }
                    if ($this->almacen_model->guardar_devolucion_interno() != true) {
                        throw new Exception('Problema al guardar devolucion.');
                    }
                    $this->session->set_flashdata('exito', 'Registro exitoso');
                    $this->almacen_model->log($this->session->userdata('nombre') . ' generó una nueva devolución', 'almacen/movimientos/detalle/devolucion-almacen' . $this->input->post('uid_devolucion'));
                    echo json_encode(array(
                        'status' => true,
                        'message' => 'Se guardo la devolución'
                    ));
                    // redirect($_SERVER["HTTP_REFERER"]);
                } catch (Exception $e) {
                    $this->rmDir_rf($carpeta);
                    echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                    ));
                }
            } else {
                echo json_encode(array(
                    'status' => false,
                    'message' => 'Ocurrio un problema intente nuevamente. Los valores no coinciden'
                ));
            }
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Token Incorrecto.'
            ));
            // redirect($_SERVER["HTTP_REFERER"]);
        }
    }

    public function movimientos()
    {
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen | Movimientos';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['movimientos'] = $this->almacen_model->movimientos();
        $this->load->view('almacen/movimientos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function mostrarMovimientosAlmacen()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "movimientos" => $this->almacen_model->movimientos($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->movimientos($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function devolucion($uid_usuario, $tipo='')
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_almacen_kuali = $this->departamentos_model->permisos('almacen_kuali');

        $this->load->model('personal_model');
        $permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        $datos['detalle'] = $this->personal_model->detalle_usuario($uid_usuario);
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0 || $permisos_almacen_kuali > 0 || $permisos_almacen_area_medica > 0 || $permisos_almacen_autos_control_vehicular > 0 || $permisos_almacen_refacciones_control_vehicular > 0 || $permisos_almacen_sistemas > 0 || $permisos_almacen_seguridad_e_higiene > 0) {
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Devolución';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['uid_usuario'] = $uid_usuario;
            $datos['tipo'] = $tipo;
            $datos['kuali'] = $this->almacen_model->almacenesKuali();             
            $datos['almacenes'] = $this->almacen_model->almacenesClientes();
            $datos['uno'] = $this->almacen_model->almacenesCliente();
            $datos['refacciones'] = $this->almacen_model->almacenRefacciones(); 
                                   
            $this->load->model('proyectos_model');
            $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();  
            if ($this->session->userdata('tipo')==1) {
                $datos['catalogo'] = $this->almacen_model->catalogo('alto-costo');
            } elseif ($this->session->userdata('id')==50) {
                $datos['catalogo'] = $this->almacen_model->catalogo('kuali_tizayuca');
            } elseif ($this->session->userdata('tipo')==14 || $this->session->userdata('tipo')==10) {
                $datos['catalogo'] = $this->almacen_model->catalogo('area_medica');
            } elseif ($this->session->userdata('tipo')==3 && $tipo != 'refacciones') {
                $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
            } elseif ($this->session->userdata('tipo')==3 && $tipo == 'refacciones') {
                $datos['catalogo'] = $this->almacen_model->catalogo('refacciones_control_vehicular');
            } elseif ($this->session->userdata('tipo')==3 && $tipo == 'tarjetas') {
                $datos['catalogo'] = $this->almacen_model->catalogo('tarjetas');
            } elseif ($this->session->userdata('tipo')==2) {
                $datos['catalogo'] = $this->almacen_model->catalogo('sistemas');
            }
            if ($this->session->userdata('tipo')==1) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAC($uid_usuario);
            } elseif ($this->session->userdata('tipo')==4 && $this->session->userdata('id')!=50) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAG($uid_usuario);
            } elseif ($this->session->userdata('tipo')==4 && $this->session->userdata('id')==50) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalKuali($uid_usuario);
            } elseif ($this->session->userdata('tipo')==14) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAreaMedica($uid_usuario);
            } elseif($this->session->userdata('tipo')==10){
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalEHS($uid_usuario);
            } elseif ($this->session->userdata('tipo')==3 && ($tipo != 'refacciones' && $tipo != 'tarjetas')) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAutosControlVehicular($uid_usuario);
            } elseif ($this->session->userdata('tipo')==3 && $tipo == 'refacciones') {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalRefaccionesControlVehicular($uid_usuario);
            } elseif ($this->session->userdata('tipo')==3 && $tipo == 'tarjetas') {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalTarjetas($uid_usuario);
            } elseif ($this->session->userdata('tipo')==2) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalSistemas($uid_usuario);
            }
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/devolucion-alto-costo', $datos);
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    public function devolucion_almacen($uid_usuario)
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $datos['detalle'] = $this->personal_model->detalle_usuario($uid_usuario);
        $datos['almacenes'] = $this->almacen_model->almacenesClientes();
        $datos['uno'] = $this->almacen_model->almacenesCliente();
        $datos['refacciones'] = $this->almacen_model->almacenRefacciones();                   
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0) {
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Devolución';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['uid_usuario'] = $uid_usuario;
            $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();    
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
            if (($this->session->userdata('tipo') == 4 || ($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != '')) && $this->session->userdata('id') != 50) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAG($uid_usuario);
            }elseif($this->session->userdata('tipo') == 4 && $this->session->userdata('id') == 50){
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalKuali($uid_usuario);
            }
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/devolucion-alto-costo', $datos);
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    public function devolucion_asignacion_generador($uid_usuario, $id_mantenimiento)
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $datos['detalle'] = $this->personal_model->detalle_usuario($uid_usuario);
        $datos['almacenes'] = $this->almacen_model->almacenesClientes();
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0) {
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Devolución';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['uid_usuario'] = $uid_usuario;
            $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();    
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
            if (($this->session->userdata('tipo') == 4 || ($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != '')) && $this->session->userdata('id') != 50) {
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalAG_generador($uid_usuario, $id_mantenimiento);
            }elseif($this->session->userdata('tipo') == 4 && $this->session->userdata('id') == 50){
                $datos['asignaciones'] = $this->almacen_model->asignaciones_personalKuali($uid_usuario);
            }
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/devolucion-alto-costo', $datos);
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    public function ajax_desasignacion()
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_almacen_kuali = $this->departamentos_model->permisos('almacen_kuali');
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0 || $permisos_almacen_kuali > 0 || $permisos_almacen_autos_control_vehicular > 0 || $permisos_almacen_sistemas > 0) {
            //if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $this->form_validation->set_rules('estatus', 'estatus', 'required|trim');
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/devolucion/');
                } else {
                    $check = $this->almacen_model->desasignacion();
                    if ($check == true) {
                        echo json_encode(array(
                            'error' => false,
                            'mensaje' => ''
                        ));
                    } else {
                        echo json_encode(array(
                            'error' => true,
                            'mensaje' => $check
                        ));
                    }
                }
            /*} else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }*/
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos.'
            ));
        }
    }

    public function ajax_devolucion()
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        $permisos_almacen_kuali = $this->departamentos_model->permisos('almacen_kuali');
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0 || $permisos_almacen_kuali > 0 || $permisos_almacen_area_medica > 0 || $permisos_almacen_autos_control_vehicular > 0 || $permisos_almacen_refacciones_control_vehicular > 0 || $permisos_almacen_sistemas > 0 || $permisos_almacen_seguridad_e_higiene > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->devolucion();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => ''
                    ));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos.'
            ));
        }
    }

    public function ajax_devolucion_contratistas()
    {
        $permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_almacen = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        if ($permisos_almacen > 0 || $permisos_almacen_alto_costo > 0 || $permisos_almacen_area_medica > 0 || $permisos_almacen_autos_control_vehicular > 0 || $permisos_almacen_refacciones_control_vehicular > 0 || $permisos_almacen_sistemas > 0 || $permisos_almacen_seguridad_e_higiene > 0) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $check = $this->almacen_model->devolucion_contratistas();
                if ($check == true) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => ''
                    ));
                } else {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => $check
                    ));
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos.'
            ));
        }
    }

    public function catalogo($tipo_catalogo='null')
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $this->permisos_almacen_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if (!($this->permisos_almacen > 0 || $this->permisos_almacen_alto_costo > 0 || $this->permisos_almacen_area_medica > 0 || $this->permisos_almacen_seguridad_e_higiene > 0 || $this->permisos_almacen_autos_control_vehicular > 0 || $this->permisos_almacen_sistemas > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Catálogo';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['tipo_catalogo'] = $tipo_catalogo;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['categorias'] = $this->almacen_model->categorias($tipo_catalogo);
        $datos['unidades_medida'] = $this->almacen_model->unidades_medida();
        //$datos['catalogo'] = $this->almacen_model->catalogo();
        $this->load->view('almacen/catalogo', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    /*public function mostrarCatalogo($tipo_catalogo)
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "catalogo" => $this->almacen_model->todoCatalogo($tipo_catalogo, $buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->todoCatalogo($tipo_catalogo, $buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }*/

    //Muestra un json del catalogo por almacén
    public function mostrarCatalogoAlmacen()
    {
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "catalogo" => $this->almacen_model->catalogoPorAlmacen($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->catalogoPorAlmacen($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    public function guardar_categoria()
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if ($this->permisos_almacen > 1 || $this->permisos_almacen_alto_costo > 1 || $this->permisos_almacen_area_medica > 1 || $this->permisos_almacen_autos_control_vehicular > 1 || $this->permisos_almacen_sistemas > 1) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $this->form_validation->set_rules('categoria', 'categoría', 'required|trim|min_length[4]|max_length[45]|is_unique[ctl_categorias.categoria]');
                $this->form_validation->set_rules('abreviatura', 'abreviatura', 'required|trim|min_length[1]|max_length[3]|is_unique[ctl_categorias.abreviatura]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                } else {
                    $categoria = ucwords($this->input->post('categoria'));
                    $abreviatura = strtoupper($this->input->post('abreviatura'));
                    $check = $this->almacen_model->nueva_categoria($categoria, $abreviatura);
                    if ($check) {
                        $this->almacen_model->log($this->session->userdata('nombre') . ' creó categoría "' . $categoria . '"', 'almacen/catalogo');
                        $this->session->set_flashdata('exito', 'Registro exitoso');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    } else {
                        $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    }
                }
            } else {
                redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
            }
        } else {
            $this->session->set_flashdata('error', 'No cuenta con los permisos necesarios.');
            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
        }
    }

    public function guardar_unidad_medida()
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if ($this->permisos_almacen > 1 || $this->permisos_almacen_alto_costo > 1 || $this->permisos_almacen_area_medica > 1 || $this->permisos_almacen_autos_control_vehicular > 1 || $this->permisos_almacen_sistemas > 1) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $this->form_validation->set_rules('unidad_medida', 'unidad de medida', 'required|trim|min_length[4]|max_length[45]|is_unique[ctl_unidades_medida.unidad_medida]');
                $this->form_validation->set_rules('abreviatura', 'abreviatura', 'required|trim|min_length[1]|max_length[3]|is_unique[ctl_unidades_medida.unidad_medida_abr]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                } else {
                    $unidad_medida = ucwords($this->input->post('unidad_medida'));
                    $abreviatura = strtoupper($this->input->post('abreviatura'));
                    $check = $this->almacen_model->nueva_unidad_medida($unidad_medida, $abreviatura);
                    if ($check) {
                        $this->almacen_model->log($this->session->userdata('nombre') . ' creó unidad de medida "' . $unidad_medida . '"', 'almacen/catalogo');
                        $this->session->set_flashdata('exito', 'Registro exitoso');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    } else {
                        $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    }
                }
            } else {
                $this->session->set_flashdata('error', 'Token incorrecto.');
                redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
            }
        } else {
            $this->session->set_flashdata('error', 'No cuenta con los permisos necesarios.');
            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
        }
    }

    public function guardar_producto_catalogo()
    {
        /*if($this->almacen_model->checkNeodata() == true){
            $this->session->set_flashdata('error', 'El neodata ya existe');
            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);            
        }*/
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if ($this->permisos_almacen > 1 || $this->permisos_almacen_alto_costo > 1 || $this->permisos_almacen_area_medica > 1 || $this->permisos_almacen_autos_control_vehicular > 1 || $this->permisos_almacen_sistemas > 1) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                if ($this->session->userdata('tipo') == 1) {
                    $this->form_validation->set_rules('neodata', 'neodata', 'trim|min_length[4]');
                } elseif ($this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 4) {
                    $this->form_validation->set_rules('neodata', 'neodata', 'required|trim|min_length[4]');
                }
                $this->form_validation->set_rules('descripcion', 'descripción', 'required|trim|min_length[4]');
                $this->form_validation->set_rules('categoria', 'categoría', 'required|trim');
                $this->form_validation->set_rules('unidad_medida', 'unidad de medida', 'required|trim');
                $this->form_validation->set_rules('marca', 'marca', 'trim');
                $this->form_validation->set_rules('modelo', 'modelo', 'trim');
                $this->form_validation->set_rules('minimo', 'mínimo en stock', 'trim|integer|greater_than_equal_to[0]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                } else {
                    if(!$this->almacen_model->verificar_neodata()){
                        $check = $this->almacen_model->nuevo_producto_catalogo();
                        if ($check) {
                            $this->almacen_model->log($this->session->userdata('nombre') . ' creó producto "' . $this->input->post('descripcion') . '"', 'almacen/catalogo');
                            $this->session->set_flashdata('exito', 'Registro exitoso');
                            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                        } else {
                            $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                        }
                    }else{
                        $this->session->set_flashdata('error', 'Neodata especificado, ya existe');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    }
                }
            } else {
                $this->session->set_flashdata('error', 'Error de Token');
                redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
            }
        } else {
            $this->session->set_flashdata('error', 'No cuenta con los permisos necesarios.');
            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
        }
    }

    public function actualizar_producto_catalogo()
    {
        //$this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        //$this->permisos_almacen = $this->departamentos_model->permisos('almacen_alto_costo');
        //if (!($this->permisos_almacen > 1) || !($this->permisos_almacen_alto_costo > 1))
        //redirect(base_url());
        if ($this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 6) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $this->form_validation->set_rules('descripcion', 'descripción', 'required|trim|min_length[4]');
                $this->form_validation->set_rules('unidad_medida', 'unidad de medida', 'required|trim');
                //$this->form_validation->set_rules('marca', 'marca', 'required|trim');
                //$this->form_validation->set_rules('modelo', 'modelo', 'required|trim');
                //$this->form_validation->set_rules('minimo', 'mínimo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //$this->form_validation->set_rules('maximo', 'máximo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                } else {
                    if(!$this->almacen_model->verificar_neodata_actualizar()){
                        $check = $this->almacen_model->actualizar_producto_catalogo();
                        if ($check) {
                            $this->almacen_model->log($this->session->userdata('nombre') . ' actualizó producto "' . $this->input->post('descripcion') . '"', 'almacen/catalogo');
                            $this->session->set_flashdata('exito', 'Actualización exitosa');
                            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                        } else {
                            $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                        }
                    }else{
                        $this->session->set_flashdata('error', 'Neodata especificado, ya existe');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    }
                }
            } else {
                redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
            }
        }
        if ($this->session->userdata('tipo') != 7 && $this->session->userdata('tipo') != 6) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('descripcion', 'descripción', 'required|trim|min_length[4]');
                //$this->form_validation->set_rules('unidad_medida', 'unidad de medida', 'required|trim');
                //$this->form_validation->set_rules('marca', 'marca', 'required|trim');
                //$this->form_validation->set_rules('modelo', 'modelo', 'required|trim');
                $this->form_validation->set_rules('minimo', 'mínimo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                $this->form_validation->set_rules('maximo', 'máximo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                } else {
                    $check = $this->almacen_model->actualizar_producto_catalogo();
                    if ($check) {
                        $this->almacen_model->log($this->session->userdata('nombre') . ' actualizó producto "' . $this->input->post('descripcion') . '"', 'almacen/catalogo');
                        $this->session->set_flashdata('exito', 'Actualización exitosa');
                        if ($this->session->userdata('tipo') == 4) {
                            redirect($_SERVER["HTTP_REFERER"]);
                        } else {
                            redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                        }
                    } else {
                        $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                        redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
                    }
                }
            } else {
                redirect(base_url() . 'almacen/catalogo/' . $_POST['tipo_catalogo']);
            }
        }
    }

    //Función para actualizar explosión de insumos
    public function actualizar_explosion()
    {               
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('descripcion', 'descripción', 'required|trim|min_length[4]');
                $this->form_validation->set_rules('cantidad', 'Cantidad', 'required|trim');                
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    return;
                } else {
                    if($this->input->post('cantidad') <= $this->input->post('cantidad_anterior')){
                        $this->session->set_flashdata('error', 'La cantidad no puede ser menor a la entrada existente');
                        redirect(base_url(). 'almacen/detalle_almc/'. $_POST['uid_almacen']);
                    }else{
                        $check = $this->almacen_model->actualizar_explosion();
                        if ($check) {
                            $this->almacen_model->log($this->session->userdata('nombre') . ' actualizó la explosion "' . $this->input->post('iddtlentrada') . '"', 'almacen/detalle_almc');
                            $this->session->set_flashdata('exito', 'Actualización exitosa');
                            redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        } else {
                            $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                            redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        }
                    }
                }
            } else {
                redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
            }                
    }

    public function getCatalogoKit(){
        $resultado = $this->almacen_model->getCatalogoKit();
        echo json_encode($resultado);
    }

    public function actualizar_estatus_existencias()
    {
        //$this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        //$this->permisos_almacen = $this->departamentos_model->permisos('almacen_alto_costo');
        //if (!($this->permisos_almacen > 1) || !($this->permisos_almacen_alto_costo > 1))
        //redirect(base_url());
        if ($this->session->userdata('tipo') == 4) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('existencias', 'existencias', 'required|trim|integer|greater_than_equal_to[0]');
                $this->form_validation->set_rules('existenciascambiar', 'existenciascambiar', 'required|trim');
                $this->form_validation->set_rules('estatus', 'estatus', 'required|trim');
                //$this->form_validation->set_rules('marca', 'marca', 'required|trim');
                //$this->form_validation->set_rules('modelo', 'modelo', 'required|trim');
                //$this->form_validation->set_rules('minimo', 'mínimo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //$this->form_validation->set_rules('maximo', 'máximo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen');
                } else {
                    if ($this->input->post('existencias')<=0) {
                        $this->session->set_flashdata('error', 'No tienes existencias');
                        redirect(base_url() . 'almacen');
                    } else {
                        $check = $this->almacen_model->actualizar_estatus_existencias();
                        if ($check) {
                            $this->almacen_model->log($this->session->userdata('nombre') . " actualizó estatus producto '" . $this->input->post('uid') . "' a"." '".$this->input->post('estatus')."'"." cantidad:".$this->input->post('existenciascambiar'), 'almacen/catalogo');
                            $this->session->set_flashdata('exito', 'Actualización exitosa');
                            redirect(base_url() . 'almacen');
                        } else {
                            $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                            redirect(base_url() . 'almacen');
                        }
                    }
                }
            } else {
                redirect(base_url() . 'almacen');
            }
        }
    }

    public function devolver_material_generador()
    {
        //$this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        //$this->permisos_almacen = $this->departamentos_model->permisos('almacen_alto_costo');
        //if (!($this->permisos_almacen > 1) || !($this->permisos_almacen_alto_costo > 1))
        //redirect(base_url());
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('existencias', 'existencias', 'required|trim|integer|greater_than_equal_to[0]');
                $this->form_validation->set_rules('uid_devolucion', 'uid_devolucion', 'required|trim');                
                //$this->form_validation->set_rules('marca', 'marca', 'required|trim');
                //$this->form_validation->set_rules('modelo', 'modelo', 'required|trim');
                //$this->form_validation->set_rules('minimo', 'mínimo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //$this->form_validation->set_rules('maximo', 'máximo en stock', 'required|trim|integer|greater_than_equal_to[0]');
                //lanzamos mensajes de error si es que los hay
                if ($this->form_validation->run() == false) {
                    $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                    redirect(base_url() . 'almacen/detalle_servicio/' . $this->input->post('uid_servicio'));
                } else {
                    if ($this->almacen_model->verificarDevolucion()) {
                        $check = $this->almacen_model->actualizar_estatus_existencias();
                        if ($check) {
                            $this->almacen_model->log($this->session->userdata('nombre') . " actualizó estatus producto '" . $this->input->post('uid') . "' a"." '".$this->input->post('estatus')."'"." cantidad:".$this->input->post('existenciascambiar'), 'almacen/catalogo');
                            $this->session->set_flashdata('exito', 'Actualización exitosa');
                            redirect(base_url() . 'almacen');
                        } else {
                            $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                            redirect(base_url() . 'almacen');
                        }                        
                    } else {
                        $this->session->set_flashdata('error', 'No existe la devolución');
                        redirect(base_url() . 'almacen/detalle_servicio/' . $this->input->post('uid_servicio'));
                    }
                }
            } else {
                $this->session->set_flashdata('error', 'Error de token');
                redirect(base_url() . 'almacen/detalle_servicio/' . $this->input->post('uid_servicio'));
            }
    }

    public function actualizar_producto_almacen()
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        if ((!$this->permisos_almacen_alto_costo > 1) || (!$this->permisos_almacen > 1)) {
            redirect(base_url());
        }
        //if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            //$this->form_validation->set_rules('numero_serie', 'número de serie', 'required|trim');
            //$this->form_validation->set_rules('numero_interno', 'número interno', 'required|trim');
            if($this->session->userdata('tipo') == 4){
                $this->form_validation->set_rules('existencias', 'existencias', 'required|trim');
            }else{
                $this->form_validation->set_rules('existencias', 'existencias', 'required|trim');
            }
            //lanzamos mensajes de error si es que los hay
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen');
            } else {
                $check = $this->almacen_model->actualizar_producto_almacen();
                if ($check) {
                    $this->almacen_model->log($this->session->userdata('nombre') . ' actualizó producto "' . $this->input->post('numero_serie') . '"', 'almacen');
                    $this->session->set_flashdata('exito', 'Actualización exitosa');
                    if ($this->session->userdata('tipo') == 3) {
                        redirect(base_url() . 'almacen/almacen-autos-control-vehicular');
                    } else {
                        redirect(base_url(). 'almacen');
                    }
                } else {
                    $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                    redirect(base_url() . 'almacen');
                }
            }
        //} else {
        //    redirect(base_url() . 'almacen/catalogo');
        //}
    }

    public function actualizar_linea_almacen(){
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        if ((!$this->permisos_almacen_alto_costo > 1) || (!$this->permisos_almacen > 1)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {            
            if($this->session->userdata('tipo') == 4){                
                $this->form_validation->set_rules('existencias', 'existencias', 'required|trim');
            }else{
                $this->form_validation->set_rules('existencias', 'existencias', 'required|trim');
            }            
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('error', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen');
            } else {
                $check = $this->almacen_model->actualizar_linea_almacen();
                if ($check) {
                    $this->almacen_model->log($this->session->userdata('nombre') . ' actualizó producto "' . $this->input->post('numero_serie') . '"', 'almacen');
                    $this->session->set_flashdata('exito', 'Actualización exitosa');
                    if ($this->session->userdata('tipo') == 3) {
                        redirect(base_url() . 'almacen/almacen-autos-control-vehicular');
                    } else {
                        redirect(base_url(). 'almacen');
                    }
                } else {
                    $this->session->set_flashdata('error', 'Ocurrio un problema intente nuevamente');
                    redirect(base_url() . 'almacen');
                }
            }
        } else {
            redirect(base_url() . 'almacen/catalogo');
        }
    }

    public function guardar_nueva_entrada_ac()
    {
        $this->permisos_almacen_alto_costo = $this->departamentos_model->permisos('almacen_alto_costo');
        if (!($this->permisos_almacen_alto_costo > 1)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
            $this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
            //lanzamos mensajes de error si es que los hay
            if ($this->form_validation->run() == false) {
                $this->nueva_entrada_ac(UID_ALMACEN_ALTO_COSTO);
            } else {
                $tipo = '';
                $uid = uniqid();
                $check = $this->almacen_model->guardar_nueva_entrada_ac($uid, ID_ALMACEN_ALTO_COSTO, $tipo);
                if ($check === true) {
                    //Inicia carga de archivo
                    $carpeta = './docs/entradas/' . $uid;
                    if (!is_dir($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $config['upload_path'] = $carpeta . '/';
                    $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';                    
                    $config['file_name'] = $this->input->post('documento');
                    $this->load->library('upload', $config);
                    $this->upload->do_upload('documento');
                    //termina carga de archivos
                    $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de Alto Costo', 'entradas/' . $uid);
                    $this->session->set_flashdata('exito', 'Registro exitoso.');
                    redirect(base_url() . 'almacen');
                } else {
                    $this->session->set_flashdata('error', $check);
                    $this->nueva_entrada(UID_ALMACEN_ALTO_COSTO);
                }
            }
        } else {
            redirect(base_url() . 'almacen/nueva-entrada/' . UID_ALMACEN_ALTO_COSTO);
        }
    }

    public function guardar_nueva_entrada_autos_control_vehicular()
    {
        $this->permisos_almacen_autos_control_vehicular = $this->departamentos_model->permisos('almacen_autos_control_vehicular');
        if (!($this->permisos_almacen_autos_control_vehicular > 1)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
            $this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
            //lanzamos mensajes de error si es que los hay
            if ($this->form_validation->run() == false) {
                $this->nueva_entrada_autos_control_vehicular(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
            } else {
                $uid = uniqid();
                if($this->input->post('tipo_entrada') == 'auto'){
                    $check = $this->almacen_model->guardar_nueva_entrada_autos_control_vehicular($uid, ID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
                }else{
                    $check = $this->almacen_model->guardar_nueva_entrada_autos_control_vehicular($uid, ID_ALMACEN_TARJETAS_GASOLINA);
                }
                if ($check === true) {
                    //Inicia carga de archivo
                    $carpeta = './docs/entradas/' . uniqid();
                    if (!is_dir($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $config['upload_path'] = $carpeta . '/';
                    $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
                    $config['max_size'] = '5120';
                    $config['file_name'] = $this->input->post('numero_documento');
                    $this->load->library('upload', $config);
                    $this->upload->do_upload('documento');
                    //termina carga de archivos
                    $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de Autos Control Vehicular', 'entradas/' . $uid);
                    $this->session->set_flashdata('exito', 'Registro exitoso.');
                    if($this->input->post('tipo_entrada') == 'auto'){
                        redirect(base_url() . 'almacen/almacen-autos-control-vehicular');
                    }else{
                        redirect(base_url() . 'almacen/almacen-tarjetas-gasolina');
                    }
                } else {
                    $this->session->set_flashdata('error', $check);
                    $this->nueva_entrada(UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
                }
            }
        } else {
            redirect(base_url() . 'almacen/nueva-entrada/' . UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        }
    }

    public function guardar_nueva_entrada_sistemas()
    {
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        if (!($this->permisos_almacen_sistemas > 1)) {
            redirect(base_url());
        }

        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
            $this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
            //lanzamos mensajes de error si es que los hay
            if ($this->form_validation->run() == false) {
                $this->nueva_entrada_sistemas(UID_ALMACEN_SISTEMAS);
            } else {
                $uid = uniqid();
                $check = $this->almacen_model->guardar_nueva_entrada_sistemas($uid, ID_ALMACEN_SISTEMAS);
                if ($check === true) {
                    //Inicia carga de archivo
                    $carpeta = './docs/entradas/' . uniqid();
                    if (!is_dir($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $config['upload_path'] = $carpeta . '/';
                    $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
                    $config['max_size'] = '5120';
                    $config['file_name'] = $this->input->post('numero_documento');
                    $this->load->library('upload', $config);
                    $this->upload->do_upload('documento');
                    //termina carga de archivos
                    $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de Autos Control Vehicular', 'entradas/' . $uid);
                    $this->session->set_flashdata('exito', 'Registro exitoso.');
                    redirect(base_url() . 'almacen');
                } else {
                    $this->session->set_flashdata('error', $check);
                    $this->nueva_entrada(UID_ALMACEN_SISTEMAS);
                }
            }
        } else {
            $this->session->set_flashdata('error', "Error Token" . $this->input->post('token') . " - " . $this->session->userdata('token'));
            redirect(base_url() . 'almacen/nueva-entrada-sistemas/' . UID_ALMACEN_AUTOS_CONTROL_VEHICULAR);
        }
    }

    public function guardar_nueva_entrada_area_medica()
    {
        $this->permisos_almacen_area_medica = $this->departamentos_model->permisos('almacen_area_medica');
        if (!($this->permisos_almacen_area_medica > 1)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
            $this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
            //lanzamos mensajes de error si es que los hay
            if ($this->form_validation->run() == false) {
                $this->nueva_entrada_area_medica(UID_ALMACEN_AREA_MEDICA);
            } else {
                $uid = uniqid();
                $check = $this->almacen_model->guardar_nueva_entrada_area_medica($uid, ID_ALMACEN_AREA_MEDICA);
                if ($check === true) {
                    //Inicia carga de archivo
                    $carpeta = './docs/entradas/' . $uid;
                    if (!is_dir($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $config['upload_path'] = $carpeta . '/';
                    $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
                    $config['max_size'] = '5120';
                    $config['file_name'] = $this->input->post('numero_documento');
                    $this->load->library('upload', $config);
                    $this->upload->do_upload('documento');
                    //termina carga de archivos
                    $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de Área Médica', 'entradas/' . $uid);
                    $this->session->set_flashdata('exito', 'Registro exitoso.');
                    redirect(base_url() . 'almacen/almacen-area-medica');
                } else {
                    $this->session->set_flashdata('error', $check);
                    $this->nueva_entrada(UID_ALMACEN_AREA_MEDICA);
                }
            }
        } else {
            redirect(base_url() . 'almacen/nueva-entrada/' . UID_ALMACEN_ALTO_COSTO);
        }
    }


    public function guardar_nueva_entrada_manual() {
        if(isset($_POST['estatus'])){
            $estatus = $_POST['estatus'];
        }else{
            $estatus = $_POST['estatus_entrada'];
        }
        $id_almacen = $this->almacen_model->getIdAlmacen($_POST['uid_almacen']);
        $check = $this->almacen_model->guardar_nueva_entrada_manual($id_almacen[0]['idtbl_almacenes']);
        if($check) {
            echo json_encode(array(
                'error' => false,
                'mensaje' => 'Solicitud ' . $estatus . ' correctamente'
            ));
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'Ocurrió un error'
            ));
        }
    }

    //Guardar nueva explosión de insumo
    public function guardar_nueva_entrada_explosion()
    {
            
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
                //$this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
                //lanzamos mensajes de error si es que los hay
                $id_almacen = $_POST['id_almacen_entrada'];
                
                //if ($this->form_validation->run() == false) {
                    //$this->nueva_entrada_almacen_cliente($_POST['uid_almacen']);
                //} else {
                    $uid = uniqid();
                    $check = $this->almacen_model->guardar_nueva_entrada_explosion($uid, $id_almacen);
                    if ($check === true) {
                       
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen del cliente', 'entradas/' . $uid);
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25' || $this->session->userdata('tipo') == 11) && !isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                             redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        } 
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                            redirect(base_url() . 'almacen');
                        } else{
                            if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 11){
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }else{
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }
                        }
                        
                    }
                //}
            } else {
                redirect(base_url() . 'almacen/nueva-entrada/' . $_POST['uid_almacen']);
            }
        
    }

    public function guardar_nueva_entrada_almacen_cliente()
    {        
        if (!isset($_POST['tipo'])) {
            $tipo = '';
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
                //$this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
                //lanzamos mensajes de error si es que los hay
                $id_almacen = $this->almacen_model->getIdAlmacen($_POST['uid_almacen']);
                if (isset($_POST['sitio'])) {
                    $existeSitio = $this->almacen_model->validateSitio(trim($_POST['sitio']));
                }
                if ($this->session->userdata('id') != 150) {
                    if (isset($existeSitio)) {
                        $this->session->set_flashdata('error', 'El sitio ' . trim($_POST['sitio']) . ' ya existe, no se puede duplicar');
                        $this->nueva_entrada_almacen_cliente($_POST['uid_almacen']);
                    }
                }

                //if ($this->form_validation->run() == false) {
                    //$this->nueva_entrada_almacen_cliente($_POST['uid_almacen']);
                //} else {
                    $uid = uniqid();
                    $check = $this->almacen_model->guardar_nueva_entrada_ac($uid, $id_almacen[0]['idtbl_almacenes'], $tipo);
                    if ($check === true) {
                        //Inicia carga de archivo
                        $carpeta = './docs/entradas/' . $uid;
                        if (!is_dir($carpeta)) {
                            mkdir($carpeta, 0755, true);
                        }
                        $config['upload_path'] = $carpeta . '/';
                        $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
                        $config['max_size'] = '5120';
                        $config['file_name'] = $this->input->post('numero_documento');
                        $this->load->library('upload', $config);
                        $this->upload->do_upload('documento');
                        //termina carga de archivos
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen del cliente', 'entradas/' . $uid);
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && !isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                             redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        } 
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                            redirect(base_url() . 'almacen');
                        } else{
                            if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('id') == 172 || ($this->session->userdata('tipo') == 11 && $this->session->userdata('jefe') == 1 )){
                                $this->session->set_flashdata('exito', 'Registro exitoso.');
                                redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                            }else{
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }
                        }
                        
                    } else {
                        if(($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && !isset($_POST['aux'])){
                            if($this->input->post('tipo') == 'interno' || $this->input->post('tipo') == 'externo'){
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }else{
                                $this->session->set_flashdata('error', $check);
                                $this->nueva_entrada($_POST['uid_almacen']);
                            }
                        } 
                        if(($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && isset($_POST['aux'])){
                            if($this->input->post('tipo') == 'interno' || $this->input->post('tipo') == 'externo'){
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }else{
                                $this->session->set_flashdata('error', $check);
                                $this->nueva_entrada($_POST['uid_almacen']);
                            }
                        } else{
                            if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19){
                                $this->session->set_flashdata('exito', 'Registro exitoso.');
                                redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                            }else{
                                echo json_encode(array(
                                    'error' => true,
                                    'mensaje' => 'Ocurrió un error'
                                ));
                            }
                        }
                        
                        
                    }
                //}
            } else {
                redirect(base_url() . 'almacen/nueva-entrada/' . $_POST['uid_almacen']);
            }
        } else {
            if($this->input->post("tipo_entrada") == "traspaso"){
                $this->form_validation->set_rules('imagen6', 'imagen6', 'required');
                if ($this->form_validation->run() == false) {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => 'Crear firmar para continuar.'
                    ));
                    return;
                }
            }
            $this->form_validation->set_rules('cantidad[]', 'cantidad', 'required|trim');
            $tipo = $this->input->post('tipo');
            $id_almacen = $this->almacen_model->getIdAlmacen($_POST['uid_almacen']);
            if ($this->form_validation->run() == false) {
                $this->detalle_entrada($_POST['id_movimiento']);
            } else {
                $uid = uniqid();

                if($this->input->post("tipo_entrada") == "traspaso"){
                    $uid_movimiento = $this->input->post('uid_movimiento');
                    $uid_movimiento = substr($uid_movimiento, 0, -1);
                    $baseFromJavascript6 = $_POST['imagen6'];
                    $data6 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript6));
                    $filepath6 = "./uploads/firmas/traspasos/". $uid_movimiento ."_2.png";
                    file_put_contents($filepath6, $data6);
                }

                $check = $this->almacen_model->guardar_nueva_entrada_ac($uid, $id_almacen[0]['idtbl_almacenes'], $tipo);
                if ($check === true) {
                    //termina carga de archivos                    
                    $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen del cliente', 'entradas/' . $uid);
                    if($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25'){
                        if($this->input->post('tipo') == 'interno' || $this->input->post('tipo') == 'externo'){
                            if($this->input->post('uid_almacen') == '632b58229df25'){
                                $this->session->set_flashdata('exito', 'Registro exitoso.');
                                redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                            }else{
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }
                        }else{
                            $this->session->set_flashdata('error', $check);
                            $this->nueva_entrada($_POST['uid_almacen']);
                        }
                    }else{                        
                        if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || (($this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 1) && !isset($_POST['id_traspaso']))){                            
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen/entrada/detalle/' . $_POST['id_movimiento']);
                        }elseif(($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != '') && !isset($_POST['id_traspaso'])){                            
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen/entrada/detalle/' . $_POST['id_movimiento']);
                        }else{                           
                            echo json_encode(array(
                                'error' => false,
                                'mensaje' => 'Se aprobo la entrada correctamente'
                            ));
                        }
                    }
                    
                    
                } else {
                    if($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25'){
                        $this->session->set_flashdata('error', $check);
                    $this->nueva_entrada($_POST['uid_almacen']);
                    }else{
                        if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19){
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        }else{
                            $this->session->set_flashdata('error', 'Ocurrió un error');
                            redirect(base_url() . 'almacen/entrada/detalle/' . $_POST['id_movimiento']);
                        }
                    }
                    
                    
                }
            }
        }
    }

    //Guardar nueva explosión de insumo
    public function guardar_nueva_explosion_insumos()
    {
        
            
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
                //$this->form_validation->set_rules('numero_documento', 'número de documento', 'required|trim');
                //lanzamos mensajes de error si es que los hay
                $id_almacen = $this->almacen_model->getIdAlmacen($_POST['uid_almacen']);
                
                //if ($this->form_validation->run() == false) {
                    //$this->nueva_entrada_almacen_cliente($_POST['uid_almacen']);
                //} else {
                    $uid = uniqid();
                    $check = $this->almacen_model->guardar_nueva_explosion_insumos($uid, $id_almacen[0]['idtbl_almacenes']);
                    if ($check === true) {
                       
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen del cliente', 'entradas/' . $uid);
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && !isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                             redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                        } 
                        if (($this->input->post('uid_almacen') == '25839864557600770' || $this->input->post('uid_almacen') == '632b58229df25') && isset($_POST['aux'])) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');                        
                            redirect(base_url() . 'almacen');
                        } else{
                            if($this->session->userdata('tipo') == 17 || $this->session->userdata('tipo') == 19 || $this->session->userdata('tipo') == 11 || ($this->session->userdata('encargado_almacen') != null && $this->session->userdata('encargado_almacen') != '')){
                                $this->session->set_flashdata('exito', 'Registro exitoso.');
                                redirect(base_url() . 'almacen/detalle_almc/' . $_POST['uid_almacen']);
                            }else{
                                echo json_encode(array(
                                    'error' => false,
                                    'mensaje' => 'Se aprobo la entrada correctamente'
                                ));
                            }
                        }
                        
                    }
                //}
            } else {
                redirect(base_url() . 'almacen/nueva-entrada/' . $_POST['uid_almacen']);
            }
        
    }

    public function guardar_nueva_entrada()
    {
        $permisos = $this->departamentos_model->permisos('almacen');
        $permisos_ac = $this->departamentos_model->permisos('almacen_alto_costo');
        $permisos_am = $this->departamentos_model->permisos('almacen_area_medica');
        $permisos_refacciones = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $permisos_seguridad_e_higiene = $this->departamentos_model->permisos('almacen_seguridad_e_higiene');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_kuali = $this->departamentos_model->permisos('almacen_kuali');
        if ($permisos > 1 || $permisos_am > 1 || $permisos_refacciones > 1 || $permisos_ac > 1 || $permisos_seguridad_e_higiene > 1 || $permisos_almacen_sistemas > 1 || $permisos_kuali > 1) {
            //if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
                $this->form_validation->set_rules('usuario_entrega', 'usuario entrega', 'required|trim');
                if ($this->form_validation->run() == false) {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => 'Ingrese todos los datos solicitados.'
                    ));
                } else {
                    $uid = uniqid();
                    $check = $this->almacen_model->guardar_nueva_entrada($uid);
                    if ($check === true) {
                        //Inicia carga de archivo
                        $carpeta = './docs/entradas/' . $uid;
                        if (!is_dir($carpeta)) {
                            mkdir($carpeta, 0755, true);
                        }
                        $this->load->library('upload');
                        $files = $_FILES;
                        $cpt=count($_FILES['documento']['name']);
                        for ($i=0; $i<$cpt; $i++) {
                            //$archivo=$this->input->post('documento')[$i];
                            //$config['upload_path'] = $carpeta . '/';
                            //$config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
                            //$config['max_size'] = '5120';
                            //$config['file_name'] = $this->input->post('numero_documento')[$i];
                            $_FILES['documento']['name']= $files['documento']['name'][$i];
                            $_FILES['documento']['type']= $files['documento']['type'][$i];
                            $_FILES['documento']['tmp_name']= $files['documento']['tmp_name'][$i];
                            $_FILES['documento']['error']= $files['documento']['error'][$i];
                            $_FILES['documento']['size']= $files['documento']['size'][$i];
                            $this->upload->initialize($this->set_upload_options($uid));
                            $this->upload->do_upload('documento');
                        }
                        //termina carga de archivos
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de ' . $this->input->post('nombre_almacen'), 'almacen/movimientos/detalle/entrada-almacen/' . $uid);
                        if ($this->session->userdata('tipo') == 14) {
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen/almacen-area-medica');
                        }else if($this->session->userdata('tipo') == 10){
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen/almacen-seguridad-e-higiene');
                        }else{
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'almacen');
                            //echo json_encode(array(
                            //    'error' => false,
                            //    'mensaje' => 'Entrada registrada correctamente.'
                            //));
                        }
                    } else {
                        echo json_encode(array(
                            'error' => true,
                            'mensaje' => $check
                        ));
                    }
                }
            /*} else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }*/
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function guardar_nueva_entrada_virtual()
    {
        $permisos = $this->departamentos_model->permisos('almacen');
        if ($permisos > 1) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                //$this->form_validation->set_rules('tipo_documento', 'tipo de documento', 'required|trim');
                $this->form_validation->set_rules('usuario', 'usuario', 'required|trim');
                if ($this->form_validation->run() == false) {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => 'Ingrese todos los datos solicitados.'
                    ));
                } else {
                    $uid = uniqid();
                    $uidsalida = uniqid();
                    $check = $this->almacen_model->guardar_nueva_entrada_virtual($uid, $uidsalida);
                    if ($check === true) {
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nueva entrada en el almacen de ' . $this->input->post('nombre_almacen'), 'almacen/movimientos/detalle/entrada-almacen/' . $uid);
                        if($this->input->is_ajax_request()){
                            echo json_encode(array(
                                'error' => false,
                                'mensaje' => 'Entrada registrada correctamente.'
                            ));
                        }else{
                            $this->session->set_flashdata('exito', 'Registro exitoso.');
                            redirect(base_url() . 'Pedidos/pedidos_almacen');
                        }
                    }
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    private function set_upload_options($uid)
    {
        $carpeta = './docs/entradas/' . $uid;
        //upload an image options
        $config = array();
        $config['upload_path'] = $carpeta . '/';
        $config['allowed_types'] = 'pdf|jpg|jpeg|doc|docx|xlsx|csv|xls';
        $config['max_size']      = '5120';

        return $config;
    }
    public function nuevo_traspaso()
    {
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen');
        $this->permisos_almacen_ac = $this->departamentos_model->permisos('almacen_alto_costo');
        $this->permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $this->permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $uid=$this->input->post('almacen_destino');
        $id_origen=$this->input->post('almacen_origen');
        if ($this->session->userdata('id') == 3) {
            $this->load->model('proyectos_model');
            $this->load->model('personal_model');
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Almacén | Traspaso';
            $datos['clase_pagina'] = 'almacen-page';
            $datos['precio_dolar'] = $this->precio_actual_dolar();
            $datos['almacenes'] = $this->almacen_model->almacenes();
            $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
            $datos['almacen_origen'] = $this->almacen_model->detalle_almacen($id_origen);
            $datos['almacen_destino'] = $this->almacen_model->detalle_almacen($uid);
            $datos['uid_traspaso'] = uniqid();
            $datos['folio'] = $this->almacen_model->iniciar_traspaso($uid, $id_origen, $datos['uid_traspaso']);
            if ($datos['almacen_origen']) {
                if ($this->input->post('tipo') == 'herramienta') {
                    $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'alto-mediano-costo');
                } else {
                    $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'material');
                }
            }
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/nuevo-traspaso', $datos);
            $this->load->view('plantillas/footer', $datos);
            return;
        }
        if (!($this->permisos_almacen > 1 || $this->permisos_almacen_refacciones_control_vehicular > 1 || $this->permisos_almacen_sistemas > 1 || $this->permisos_almacen_ac > 1)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacén | Traspaso';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['almacen_origen'] = $this->almacen_model->detalle_almacen($id_origen);
        $datos['almacen_destino'] = $this->almacen_model->detalle_almacen($uid);
        $datos['uid_traspaso'] = uniqid();
        $datos['folio'] = $this->almacen_model->iniciar_traspaso($uid, $id_origen, $datos['uid_traspaso']);
        if ($datos['almacen_origen']) {
            $datos['inventario_almacen'] = $this->almacen_model->inventario_almacen($datos['almacen_origen']->idtbl_almacenes, 'general');
        }
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/nuevo-traspaso', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function guardar_traspaso()
    {
        $permisos = $this->departamentos_model->permisos('almacen');
        $permisos_almacen_refacciones_control_vehicular = $this->departamentos_model->permisos('almacen_refacciones_control_vehicular');
        $permisos_almacen_sistemas = $this->departamentos_model->permisos('almacen_sistemas');
        $permisos_almacen_ac = $this->departamentos_model->permisos('almacen_alto_costo');
        if ($permisos > 2 || $permisos_almacen_refacciones_control_vehicular > 2 || $permisos_almacen_ac > 2 || $permisos_almacen_sistemas > 2 || $this->session->userdata('id') == 3 || $this->session->userdata('tipo') == 19) {
            if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
                $this->form_validation->set_rules('almacen_destino', 'almacen de destino', 'required|trim');
                $this->form_validation->set_rules('imagen6', 'imagen6', 'required');
                if ($this->form_validation->run() == false) {
                    echo json_encode(array(
                        'error' => true,
                        'mensaje' => 'Ingrese todos los datos solicitados.'
                    ));
                } else {
                    $uid = uniqid();
                    $baseFromJavascript6 = $_POST['imagen6'];
                    $data6 = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $baseFromJavascript6));
                    $filepath6 = "./uploads/firmas/traspasos/". $uid ."_1.png";
                    file_put_contents($filepath6, $data6);

                    /*$carpeta = './uploads/' . $this->input->post('id_almacen');
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $carpeta = './uploads/' . $this->input->post('id_almacen') . '/traspasos';
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $carpeta = './uploads/' . $this->input->post('id_almacen') . '/traspasos/' . $this->input->post('id_movimiento');
                    if (!file_exists($carpeta)) {
                        mkdir($carpeta, 0755, true);
                    }
                    $this->load->library('upload');
                    $urlimg = $carpeta . '/';
                    $config['upload_path'] = $urlimg;
                    $config['allowed_types'] = 'pdf|jpg|png|jpeg';
                    $config['overwrite'] = true;*/
                    try {
                        /*$config['file_name'] = 'responsiva';
                        $this->upload->initialize($config);
                        if (!$this->upload->do_upload('responsiva')) {
                            throw new Exception('Problema al cargar solicitud de almacen.');
                        }*/
                        if(!isset($_POST['proceso'])){
                            if ($this->almacen_model->guardar_traspaso($uid, $proceso = '') != true) {
                                throw new Exception('Problema al hacer el traspaso.');
                            }
                        }else{
                            $proceso = $this->input->post('proceso');
                            if ($this->almacen_model->guardar_traspaso($uid, $proceso) != true) {
                                throw new Exception('Problema al hacer el traspaso.');
                            }
                        }
                        
                        //$this->session->set_flashdata('exito', 'Registro exitoso');
                        echo json_encode(array(
                            'error' => false,
                            'mensaje' => 'Traspaso registrado correctamente.'
                        ));
                        $this->almacen_model->log($this->session->userdata('nombre') . ' registro nuevo traspaso en el almacen de ' . $this->input->post('nombre_almacen'), 'almacen/detalle-movimiento/traspaso-almacen/salida-almacen/' . $uid);
                        //echo json_encode(array(
                        //  'status' => true
                        //));
                    } catch (Exception $e) {
                        $this->rmDir_rf($carpeta);
                        //echo json_encode(array(
                        //  'status' => false,
                        //  'message' => $e->getMessage()
                        //));
                        echo json_encode(array(
                            'error' => true,
                            'mensaje' => 'No se pudo completar el Traspaso.'
                        ));
                    }
                    //$check = $this->almacen_model->guardar_traspaso($uid);
                    //if ($check === true) {
                    //  $this->almacen_model->log($this->session->userdata('nombre') . ' registro nuevo traspaso en el almacen de ' . $this->input->post('nombre_almacen'), 'almacen/detalle-movimiento/traspaso-almacen/salida-almacen/' . $uid);
                    //  echo json_encode(array(
                    //    'error' => false,
                    //    'mensaje' => 'Traspaso registrado correctamente.'
                    //  ));
                    //} else {
                    //  echo json_encode(array(
                    //    'error' => true,
                    //    'mensaje' => $check
                    //  ));
                    //}
                }
            } else {
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Token Incorrecto.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'No tiene permisos suficientes para realizar esta acción.'
            ));
        }
    }

    public function guardarAlmacen()
    {
        if ($this->input->is_ajax_request()) {
            $id_proyecto = $this->input->post('proyecto');
            if($this->almacen_model->verificar_almacen($id_proyecto) == FALSE){
                if ($this->session->userdata('tipo') != 17 && $this->session->userdata('id') != 36) {
                    if($this->session->userdata('tipo') == 19) {
                        $parametros = array(
                        //'almacen' => $this->input->post('almacen'),
                        'uid' => uniqid(),
                        'tipo' => 'interno',
                        'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                        //'nombre' => $_POST['nombre'],
                        'almacen_generador' => 1
                        );
                    } else {
                        $parametros = array(
                        //'almacen' => $this->input->post('almacen'),
                        'uid' => uniqid(),
                        'tipo' => 'interno',
                        'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                        'tbl_segmentos_proyecto_idtbl_segmentos_proyecto' => (empty($this->input->post('segmento'))) ? null : $this->input->post('segmento'),
                        'tbl_sitios_idtbl_sitios' => (empty($this->input->post('sitio'))) ? null : $this->input->post('sitio')
                        );
                    }
                } else {
                    $parametros = array(
                    //'almacen' => $this->input->post('almacen'),
                    'uid' => uniqid(),
                    'tipo' => 'externo',
                    'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                    'tbl_segmentos_proyecto_idtbl_segmentos_proyecto' => (empty($this->input->post('segmento'))) ? null : $this->input->post('segmento'),
                    'almacen_generador' => 1
                    );
                }
                if ($this->almacen_model->registrarAlmacen($parametros)) {
                    echo json_encode(array(
                        'error' => false,
                        'mensaje' => 'Almacen ' . $this->input->post('almacen') . ' registrado correctamente.'
                    ));
                }
            }else{
                echo json_encode(array(
                    'error' => true,
                    'mensaje' => 'Almacén existente.'
                ));
            }
        } else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'Hubo un problema para realizar esta acción. Intente de nuevo recargando la pagina.'
            ));
        }
    }

    //Función para guardar un sub almacén
    public function guardar_subalmacen()
    {
        if ($this->input->is_ajax_request()) {
            $id_proyecto = $this->input->post('proyecto');
            $id_segmento = $this->input->post('segmento');
            if($this->almacen_model->verificar_subalmacen($id_proyecto, $id_segmento) == FALSE){
                $parametros = array(
                'almacen' => $this->input->post('nombre_almacen'),
                'uid' => uniqid(),
                'tipo' => $this->session->userdata('tipo') == 19 ? 'interno' : 'externo',
                'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                'tbl_segmentos_proyecto_idtbl_segmentos_proyecto' => $this->input->post('segmento'),
                'estatus' => 1,
                'tbl_almacenes_idtbl_almacenes' => $this->input->post('almacen'),
                'almacen_generador' => 1
                //'nombre' => $_POST['nombre']
                );                          
            if ($this->almacen_model->registrarSubAlmacen($parametros)) {
                echo json_encode(array(
                    'error' => false,
                    'mensaje' => 'Almacen ' . $this->input->post('nombre_almacen') . ' registrado correctamente.'
                ));
            }
        }
        else {
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'Subalmacén existente.'
            ));}
        } 
            else{
            echo json_encode(array(
                'error' => true,
                'mensaje' => 'Hubo un problema para realizar esta acción. Intente de nuevo recargando la pagina.'
            ));
        }
        
    }

    public function activar_almacen() {
         
        $check = $this->almacen_model->activar_almacen();
        if ($check == true) {
          echo json_encode(array(
            'error' => false,
            'mensaje' => 'Almacén activado correctamente.'
          ));
          
        } else {
          echo json_encode(array(
            'error' => true,
            'mensaje' => $check
          ));
        }     
   
  }

  public function desactivar_almacen() {
     
    $check = $this->almacen_model->desactivar_almacen();
    if ($check == true) {
      echo json_encode(array(
        'error' => false,
        'mensaje' => 'Almacén desactivado correctamente.'
      ));
     
    } else {
      echo json_encode(array(
        'error' => true,
        'mensaje' => $check
      ));
    }

}

    //Función para obtener el precio del dolar actual, mediante la API de Banxico
    private function precio_actual_dolar()
    {
        error_reporting(0);
        $url = 'https://www.banxico.org.mx/SieAPIRest/service/v1/series/SF43718/datos/oportuno?mediaType=json&token=d8ca6837fc6654742ab58ce244abe03af703031d56eb1a1fe18201bc7602c760';

        $json = file_get_contents($url);
        if ($json!='') {
            $array = json_decode($json, true);
            foreach ($array as $key => $value) {
                foreach ($value['series'] as $key => $value2) {
                    foreach ($value2['datos'] as $key => $value3) {
                        $precio_dolar=bcdiv($value3['dato'], '1', 2);
                    }
                }
            }
        } else {
            $precio_dolar=22.17;
        }
        return ($precio_dolar);
    }

    private function rmDir_rf($carpeta)
    {
        foreach (glob($carpeta . "/*") as $archivos_carpeta) {
            if (is_dir($archivos_carpeta)) {
                $this->rmDir_rf($archivos_carpeta);
            } else {
                unlink($archivos_carpeta);
            }
        }
        rmdir($carpeta);
    }

    public function uid()
    {
        $x = 1;
        while ($x < 4840) {
            echo strtoupper(uniqid());
            echo "<br>";
            $x++;
        }
    }

    private function token()
    {
        $token = md5(uniqid(rand(), true));
        $this->session->set_userdata('token', $token);
        return $token;
    }

    public function getProductos()
    {
        $resultado = $this->almacen_model->getProductosReporte($_POST['id']);
        echo json_encode($resultado);
    }

    public function getProductosSalida()
    {
        $resultado = $this->almacen_model->getProductosReporteSalidas($_POST['id']);
        echo json_encode($resultado);
    }

    public function getProductosDevolucion()
    {
        $resultado = $this->almacen_model->getProductosReporteDevoluciones($_POST['id']);
        echo json_encode($resultado);
    }

    public function getExistencias()
    {
        if($this->input->post('idtbl_almacenes') != 1 && $this->input->post('idtbl_almacenes') != 16 && $this->input->post('idtbl_almacenes') != 2 && $this->input->post('idtbl_almacenes') != 23 && $this->input->post('idtbl_almacenes') != 28 && $this->input->post('idtbl_almacenes') != 29 && $this->input->post('idtbl_almacenes') != 30 && $this->input->post('idtbl_almacenes') != 122){

            $datos['prueba'] = $this->almacen_model->actualizar_existencias_cuadre($this->input->post('idtbl_almacenes'));
        }
        $resultado = $this->almacen_model->getExistencias($_POST['idtbl_catalogo'], $_POST['idtbl_almacenes'], $_POST['idctl_categorias']);
        echo json_encode($resultado);
    }

    public function actualizar_existencias_cuadre()
    {
        if($this->input->post('idtbl_almacenes') != 1 && $this->input->post('idtbl_almacenes') != 16 && $this->input->post('idtbl_almacenes') != 2 && $this->input->post('idtbl_almacenes') != 23 && $this->input->post('idtbl_almacenes') != 28 && $this->input->post('idtbl_almacenes') != 29 && $this->input->post('idtbl_almacenes') != 30 && $this->input->post('idtbl_almacenes') != 122){

            $resultado = $this->almacen_model->actualizar_existencias_cuadre($this->input->post('idtbl_almacenes'));

            echo json_encode($resultado);
        }
        
    }

    public function reportes_almacen_cliente()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_almacen_cliente');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Reportes Almacen Cliente';
        $header['clase_pagina'] = 'almacen-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-almacen-cliente', $datos);
        $this->load->view('plantillas/footer');
    }

    public function reportes()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_almacen_general');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Almacen';
        $header['clase_pagina'] = 'almacen-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['almacenes'] = $this->almacen_model->almacenes_subalm();
        $datos['almacenes_generadores'] = $this->almacen_model->almacenes_generadores_reportes();
        $datos['proyectos_generadores'] = $this->almacen_model->almacenes_generadores();
        $datos['almacenes_pedidos'] = $this->almacen_model->almacenes_pedidos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }        
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes', $datos);
        $this->load->view('plantillas/footer');
    }

    public function reportes_pm()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_pm');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Almacen';
        $header['clase_pagina'] = 'almacen-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['almacenes'] = $this->almacen_model->almacenes_subalm();
        $datos['almacenes_generadores'] = $this->almacen_model->almacenes_generadores_reportes();
        $datos['proyectos_generadores'] = $this->almacen_model->almacenes_generadores();
        $datos['almacenes_pedidos'] = $this->almacen_model->almacenes_pedidos();
        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo('almc_gen');
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }        
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-pm', $datos);
        $this->load->view('plantillas/footer');
    }

    public function reportes_operaciones()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_operaciones');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Almacen';
        $header['clase_pagina'] = 'almacen-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
    
        $datos['catalogo'] = $this->almacen_model->catalogo();
    
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-operaciones', $datos);
        $this->load->view('plantillas/footer');
    }

    public function reporte_excel_operaciones()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_operaciones');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post('tipo_de_reporte') == 'Proyecto') {
                $this->form_validation->set_rules('proyecto', 'Proyecto', 'required|trim');
            } else {
                redirect(base_url() . 'almacen/reportes-operaciones', 'refresh');
            }
            $this->form_validation->set_rules('tipo_reporte', 'Tipo de Reporte para ' . $this->input->post('tipo_de_reporte'), 'required|in_list[entrada-almacen,salida-almacen,devolucion-almacen,traspaso-almacen]');
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesOperaciones', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportes-operaciones', 'refresh');
            } else {
                $reporte = $this->almacen_model->reporte_operaciones($this->input->post('tipo_de_reporte'));
                if (count($reporte) > 0) {
                    //Cargamos la librería de excel.
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.
                    $tipoReporte = '';
                    if ('salida-almacen'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'Salida';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(100);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'CODIGO');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'DESCRIPCION');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'UNIDAD');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'CANTIDAD SOLICITUD');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'CANTIDAD');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'N. PROYECTO');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N. SEGMENTO');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'CREADO POR');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'RECIBE');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'FECHA');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['neodata_dtl_solicitud_material']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['producto_dtl_solicitud_material']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['unidad_medida_abr_dtl_solicitud_material']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['cantidad_dtl_solicitud_material']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['entregado_dtl_solicitud_material']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto_solicitud_proyectos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['segmento_solicitud_segmentos_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['creado_por']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['recibe_material']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['fecha_almacen_movimientos']);
                        }
                    } elseif ('devolucion-almacen'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'Devolucion';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                        //$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                        //$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        //$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(80);
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //$this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //$this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        //$this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'CODIGO');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'DESCRIPCION');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'UNIDAD');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'CANTIDAD SOLICITUD');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'CANTIDAD');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'N. PROYECTO');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N. SEGMENTO');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'CREADO POR');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'DEVUELVE');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'FECHA');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'ESTADO');
                        /*$this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Contratista');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Devuelve Material');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Estado');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Comentario');*/
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['cantidad_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['entregado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto_devolucion_proyectos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['segmento_devolucion_segmentos_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['creado_por']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['devuelve_material']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['estado_dtl_solicitud_devolucion']);
                            /*$this->excel->getActiveSheet()->setCellValue("A{$contador}", 'DA-' . $dato['folio_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_devolucion_proyectos'] . ' ' . $dato['nombre_proyecto_devolucion_proyectos']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_devolucion_segmentos_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['razon_social']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['devuelve_material']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['entregado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['estado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['observaciones_dtl_solicitud_devolucion']);*/
                        }
                    }
                    //Le ponemos un nombre al archivo que se va a generar.
                    $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $archivo . '"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    //Hacemos una salida al navegador con el archivo Excel.
                    $objWriter->save('php://output');
                } else {
                    $this->session->set_flashdata('errorReportesOperaciones', 'No hay información para generar reporte.');
                    redirect(base_url() . 'almacen/reportes-operaciones', 'refresh');
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesOperaciones', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-operaciones', 'refresh');
        }
    }

    public function reporte_excel_pm()
    {
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post('tipo_de_reporte') == 'Proyecto') {
                $this->form_validation->set_rules('proyecto', 'Proyecto', 'required|trim');
            }  else {
                redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
            }
            //$this->form_validation->set_rules('tipo_reporte', 'Tipo de Reporte para ' . $this->input->post('tipo_de_reporte'), 'required|in_list[entrada-almacen,salida-almacen,devolucion-almacen,traspaso-almacen]');
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesAG', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
            } else {
                
                $reporte = $this->almacen_model->reporte_pm($this->input->post('tipo_de_reporte'), $this->input->post('tipo_reporte'));
                
                if (count($reporte) > 0) {
                    //Cargamos la librería de excel.
                    $this->load->library('Excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.
                    $tipoReporte = '';
                    if ('entrada-almacen' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);                     
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true); 
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);                        
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');  
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Neodata Pedido');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Sitio');                        
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } else {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] != NULL ? $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto'] : $dato['numero_proyecto1'] . ' ' . $dato['nombre_proyecto1']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['neodata_pedido']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['ruth']);                           
                        }
                    } elseif ('traspaso-almacen' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Almacen Origen');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Almacen Destino');
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } else {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['nombre_origen']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['almacen']);
                        }
                    } elseif ('salida-almacen'  == $this->input->post('tipo_reporte') || 'salida-virtual'  == $this->input->post('tipo_reporte') || $this->input->post('tipo_reporte') == 'salidas_neodata') {
                            $tipoReporte = 'Salida';
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(60);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(70);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(100);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('U')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('V')->setWidth(30);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("S{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("T{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("U{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("V{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Autor');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Contratista');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Recibe Material');
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Piezas');
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Comentario');
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'uid');
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Sitio');
                            $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Cleanup');
                            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Precio');
                            $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Moneda');
                            $this->excel->getActiveSheet()->setCellValue("S{$contador}", 'Total');
                            $this->excel->getActiveSheet()->setCellValue("T{$contador}", 'Neodata Salida');
                            $this->excel->getActiveSheet()->setCellValue("U{$contador}", 'Comentario Supervisor');
                            $this->excel->getActiveSheet()->setCellValue("V{$contador}", 'Comentario Neodata');
                            foreach ($reporte as $dato) {
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                if($dato['cleanup'] == 0){
                                    $cleanup = 'No';
                                }else{
                                    $cleanup = 'Si';
                                }
                                if($dato['tipo_moneda'] == 'd'){
                                    $moneda = 'Dolar';
                                }else{
                                    $moneda = 'Pesos';
                                }
                                if($dato['precio'] != NULL && $dato['precio'] != ''){
                                    $precio = $dato['precio'];
                                }else{
                                    $precio = 0;
                                }
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'SA-' . $dato['folio_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_solicitud_proyectos'] . ' ' . $dato['nombre_proyecto_solicitud_proyectos']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_solicitud_segmentos_proyecto']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['nombre_autor']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['razon_social']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['recibe_material']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['neodata_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['producto_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['entregado_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['unidad_medida_abr_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("M{$contador}", @$dato['observaciones_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['uid_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("O{$contador}", @$dato['sitio']);
                                $this->excel->getActiveSheet()->setCellValue("P{$contador}", $cleanup);
                                $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato['precio']);
                                $this->excel->getActiveSheet()->setCellValue("R{$contador}", $moneda);
                                $this->excel->getActiveSheet()->setCellValue("S{$contador}", $precio*$dato['entregado_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("T{$contador}", $dato['neodata_salida']);
                                $this->excel->getActiveSheet()->setCellValue("U{$contador}", $dato['comentarios']);
                                $this->excel->getActiveSheet()->setCellValue("V{$contador}", $dato['observaciones_neodata']);
                            }
                    }  elseif ('devolucion-almacen'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'Devolucion';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(80);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(80);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');                        
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Contratista');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Devuelve Material');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Estado');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Comentario');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            $date = new DateTime($dato['fecha_almacen_movimientos']);
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'DA-' . $dato['folio_almacen_movimientos']);                            
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $date->format('Y-m-d'));                            
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_devolucion_proyectos'] . ' ' . $dato['nombre_proyecto_devolucion_proyectos']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_devolucion_segmentos_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['razon_social']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['devuelve_material']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['entregado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['estado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['observaciones_dtl_solicitud_devolucion']);
                        }
                    } elseif ('general' == $this->input->post('tipo_reporte')) {
                        

                        $tipoReporte = 'General';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Almacen');
                        for($i = 0; $i <= 2; $i++){
                            if($i == 0){
                                $tipo='entrada-almacen';
                                $reporte_general = $this->almacen_model->reporte_pm('Proyecto', $tipo);
                            }elseif($i == 1){
                                $tipo='salida-almacen';
                                $reporte_general = $this->almacen_model->reporte_pm('Proyecto', $tipo);
                            }elseif($i == 2){
                                $tipo='devolucion-almacen';
                                $reporte_general = $this->almacen_model->reporte_pm('Proyecto', $tipo);
                            } 
                        foreach ($reporte_general as $dato) {
                            if ($tipo == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } elseif ($tipo == 'entrada-almacen') {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }else{
                                $folio = $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            if($i == 0){
                            //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] != NULL ? $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto'] : $dato['numero_proyecto1'] . ' ' . $dato['nombre_proyecto1']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Entrada');
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['almacen_entrada']);
                            }elseif($i == 1){
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'SA-' . $folio);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_solicitud_proyectos'] . ' ' . $dato['nombre_proyecto_solicitud_proyectos']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_solicitud_segmentos_proyecto']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['entregado_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Salida');
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['almacen_salida']);
                            }elseif($i == 2){
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'DA-' . $folio);                            
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);                            
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_devolucion_proyectos'] . ' ' . $dato['nombre_proyecto_devolucion_proyectos']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_devolucion_segmentos_proyecto']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['entregado_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Devolución');
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['almacen_devolucion']);
                            }
                        }
                    }
                    }  else {
                        $tipoReporte = 'Asignacion';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Asignación');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Personal');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Unidad');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['folio']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_asignacion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['nombre']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['nombres'] . ' ' . $dato['apellido_paterno'] . ' ' . $dato['apellido_materno']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['cantidad']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['unidad_medida']);
                        }
                    }
                    
                    //Le ponemos un nombre al archivo que se va a generar.
                    $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $archivo . '"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    //Hacemos una salida al navegador con el archivo Excel.
                    $objWriter->save('php://output');
                } else {
                    $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
                    redirect(base_url() . 'almacen/reportes_pm', 'refresh');
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesAG', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
        }
    }

    public function reporte_excel()
    {
        /*$this->permisos = $this->departamentos_model->permisos('reportes_almacen_general');
        $this->permisos_cliente = $this->departamentos_model->permisos('reportes_almacen_cliente');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }*/
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post('tipo_de_reporte') == 'Proyecto') {
                $this->form_validation->set_rules('proyecto', 'Proyecto', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Personal') {
                $this->form_validation->set_rules('tipo_reporte', 'Tipo Reporte', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Producto') {
                $this->form_validation->set_rules('producto', 'Producto', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Fecha') {
                $this->form_validation->set_rules('fecha_inicio', 'Fecha Inicial', 'required|trim');
                $this->form_validation->set_rules('fecha_final', 'Fecha Final', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Almacen') {
                $this->form_validation->set_rules('almacen_reporte', 'Almacen', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'caja_chica') {
                $this->form_validation->set_rules('almacen_reporte', 'Almacen', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Cuadre') {
                $this->form_validation->set_rules('almacen_reporte', 'Almacen', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'pedidos') {
                $this->form_validation->set_rules('estatus', 'Estatus', 'required|trim');
            } else {
                redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
            }
            //$this->form_validation->set_rules('tipo_reporte', 'Tipo de Reporte para ' . $this->input->post('tipo_de_reporte'), 'required|in_list[entrada-almacen,salida-almacen,devolucion-almacen,traspaso-almacen]');
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesAG', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
            } else {
                if($this->input->post('tipo_reporte') == 'cuadre materiales'){
                    $reporte = $this->almacen_model->cuadre_materiales($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'cuadre_proyecto'){
                    $reporte = $this->almacen_model->cuadre_materiales_proyecto($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'balance_general'){
                    $reporte = $this->almacen_model->balance_general($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'balance_entrada' || $this->input->post('tipo_reporte') == 'balance_salidas'){
                    $reporte = $this->almacen_model->balance_movimientos($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'inventario'){
                    $reporte = $this->almacen_model->cuadre_inventario($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'cuadre_explosion'){
                    $reporte = $this->almacen_model->cuadre_explosion($almacen = $this->input->post('almacen_reporte'));
                }elseif($this->input->post('tipo_reporte') == 'salidas_neodata'){
                    $reporte = $this->almacen_model->solicitudesRCV_reporte();
                }elseif($this->input->post('tipo_reporte') == 'devoluciones_neodata'){
                    $reporte = $this->almacen_model->devolucionesNeodata();
                }elseif($this->input->post('tipo_reporte') == 'pedidos_reporte'){
                    $this->load->model('pedidos_model');
                    $reporte = $this->pedidos_model->pedidos();
                }elseif($this->input->post('tipo_reporte') == 'asignaciones'){
                    $reporte = $this->almacen_model->reporte_asignaciones();
                }elseif($this->input->post('tipo_reporte') == 'inventario_almacenes'){
                    $reporte = $this->almacen_model->inventario_almacenes();
                }else{
                    $reporte = $this->almacen_model->reporte_por_proyecto($this->input->post('tipo_de_reporte'));
                }
                if (count($reporte) > 0) {
                    //Cargamos la librería de excel.
                    $this->load->library('Excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.
                    $tipoReporte = '';
                    if ('entrada-almacen' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);                     
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true); 
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);                        
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');  
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Neodata Pedido');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Sitio');                        
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } else {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] != NULL ? $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto'] : $dato['numero_proyecto1'] . ' ' . $dato['nombre_proyecto1']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['neodata_pedido']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['ruth']);                           
                        }
                    }
                    elseif ('explosion_insumos' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);    
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);                   
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true); 
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);    
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);                     
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');  
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Neodata Pedido');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Sitio');     
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Almacen Destino');                   
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } else {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] != NULL ? $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto'] : $dato['numero_proyecto1'] . ' ' . $dato['nombre_proyecto1']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['neodata_pedido']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['ruth']);    
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['almacen_destino']);                       
                        }
                    }
                    elseif ('asignaciones' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                                   
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                                    
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripcion');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Entregado');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Personal');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacen');
                                         
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio'];
                            } else {
                                $folio = 'EA-' . $dato['folio'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_asignacion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['cantidad']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['entregado']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['nombres']. ' '. $dato['apellido_paterno'] . ' ' . $dato['apellido_materno']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['almacen']);
            
                        }
                    }

                    elseif ('inventario_almacenes' == $this->input->post('tipo_reporte')) {

                        $tipoReporte = 'inventario';
                        
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                       
                                   
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        
                                    
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripcion');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Categoria');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Existencias');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Precio');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Moneda');
                        
                                         
                        foreach ($reporte as $dato) {

                            
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['unidad_medida']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['categoria']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['existencias']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['precio']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['tipo_moneda'] == 'd' ? 'Dolar' : 'Pesos');
                           
            
                        }
                    }

                     elseif ('traspaso-almacen' == $this->input->post('tipo_reporte')) {
                        if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                            $tipoReporte = 'Traspaso';
                        } else {
                            $tipoReporte = 'Entrada';
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Almacen Origen');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Almacen Destino');
                        foreach ($reporte as $dato) {
                            if ($this->input->post('tipo_reporte') == 'traspaso-almacen') {
                                $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                            } else {
                                $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            }
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['nombre_origen']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['almacen']);
                        }
                    } elseif ('salida-almacen'  == $this->input->post('tipo_reporte') || 'salida-virtual'  == $this->input->post('tipo_reporte') || $this->input->post('tipo_reporte') == 'salidas_neodata') {
                        if($this->input->post('tipo_reporte') == 'salidas_neodata'){
                            $tipoReporte = 'Salida';
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(70);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Proyecto');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Contratista');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe Material');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'uid');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Neodata Salida');
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Comentario Neodata');
                            foreach ($reporte as $dato) {
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['fecha_creacion']);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_almacen_general']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['razon_social']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['descripcion']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['entregado']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['uid']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['neodata_salida']);
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['observaciones_neodata']);
                            }
                        }else{
                            $tipoReporte = 'Salida';
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(60);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(70);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(100);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('U')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('V')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('W')->setWidth(30);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("S{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("T{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("U{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("V{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("W{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Autor');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Contratista');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Recibe Material');
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Piezas');
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Comentario');
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'uid Solicitud');
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'uid Salida');
                            $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Sitio');
                            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Cleanup');
                            $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Precio');
                            $this->excel->getActiveSheet()->setCellValue("S{$contador}", 'Moneda');
                            $this->excel->getActiveSheet()->setCellValue("T{$contador}", 'Total');
                            $this->excel->getActiveSheet()->setCellValue("U{$contador}", 'Neodata Salida');
                            $this->excel->getActiveSheet()->setCellValue("V{$contador}", 'Comentario Supervisor');
                            $this->excel->getActiveSheet()->setCellValue("W{$contador}", 'Comentario Neodata');
                            foreach ($reporte as $dato) {
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                if('salida-virtual' != $this->input->post('tipo_reporte')){
                                    if($dato['cleanup'] == 0){
                                        $cleanup = 'No';
                                    }else{
                                        $cleanup = 'Si';
                                    }
                                }
                                if($dato['tipo_moneda'] == 'd'){
                                    $moneda = 'Dolar';
                                }else{
                                    $moneda = 'Pesos';
                                }
                                if($dato['precio'] != NULL && $dato['precio'] != ''){
                                    $precio = $dato['precio'];
                                }else{
                                    $precio = 0;
                                }
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'SA-' . $dato['folio_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_solicitud_proyectos'] . ' ' . $dato['nombre_proyecto_solicitud_proyectos']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_solicitud_segmentos_proyecto']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['nombre_autor']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['razon_social']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['recibe_material']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['neodata_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['producto_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['entregado_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['unidad_medida_abr_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("M{$contador}", @$dato['observaciones_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['uid_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['uid_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("P{$contador}", @$dato['sitio']);
                                if('salida-virtual' != $this->input->post('tipo_reporte')){
                                $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $cleanup);
                                }
                                $this->excel->getActiveSheet()->setCellValue("R{$contador}", $dato['precio']);
                                $this->excel->getActiveSheet()->setCellValue("S{$contador}", $moneda);
                                $this->excel->getActiveSheet()->setCellValue("T{$contador}", $precio*$dato['entregado_dtl_solicitud_material']);
                                if('salida-virtual' != $this->input->post('tipo_reporte')){
                                $this->excel->getActiveSheet()->setCellValue("U{$contador}", $dato['neodata_salida']);
                                
                                $this->excel->getActiveSheet()->setCellValue("V{$contador}", $dato['comentarios']);
                                $this->excel->getActiveSheet()->setCellValue("W{$contador}", $dato['observaciones_neodata']);
                                }
                            }
                        }
                    }elseif($this->input->post('tipo_reporte') == 'devoluciones_neodata'){
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(80);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(80);

                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);

                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Fecha Creación');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizó Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Contratista');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe Material');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Código');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'uid');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Tipo Devolución');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Comentario Neodata');

                        foreach ($reporte as $dato) {
                            $contador++;
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['fecha_creacion']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_almacen_general']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['razon_social']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['entregado']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['uid']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['tipo_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['observaciones_neodata']);
                        }
                    }
                    elseif ('comparativa'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'Comparativa';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Cantidad Ingresada');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Cantidad Salida');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Diferencia');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacen');
                        foreach ($reporte as $dato) {
                            $diferencia = $dato['total_entradas'] - $dato['total_salidas'];
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_proyecto'] . ' - ' . $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['total_entradas']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['total_salidas']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $diferencia);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['almacen']);
                        }
                    } elseif ('devolucion-almacen'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'Devolucion';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(80);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(80);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');                        
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Contratista');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Devuelve Material');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Piezas');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Estado');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Comentario');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            $date = new DateTime($dato['fecha_almacen_movimientos']);
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'DA-' . $dato['folio_almacen_movimientos']);                            
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $date->format('Y-m-d'));                            
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto_devolucion_proyectos'] . ' ' . $dato['nombre_proyecto_devolucion_proyectos']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento_devolucion_segmentos_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['razon_social']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['devuelve_material']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['entregado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['estado_dtl_solicitud_devolucion']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['observaciones_dtl_solicitud_devolucion']);
                        }
                    } elseif($this->input->post('tipo_reporte') == 'cuadre materiales' || $this->input->post('tipo_reporte') == 'cuadre_proyecto' || $this->input->post('tipo_reporte') == 'balance_general'){
                        //Le aplicamos ancho las columnas.
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);              
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Existencias');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Cantidad Entrada');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Cantidad Salida');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Cantidad Devolución');
                        //if($this->input->post('tipo_reporte') == 'cuadre materiales'){
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad Entrada Traspaso');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad Salida Traspaso');
                        //}
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->existencias);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->cantidad_entrada);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->cantidad_salida);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->cantidad_devolucion);
                            //if($this->input->post('tipo_reporte') == 'cuadre materiales'){
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->cantidad_traspaso);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->cantidad_salida_traspaso);
                            //}
                        }
                    } elseif($this->input->post('tipo_reporte') == 'balance_entrada' || $this->input->post('tipo_reporte') == 'balance_salidas'){
                        //Le aplicamos ancho las columnas.
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20); 
                        if($this->input->post('tipo_reporte') == 'balance_salidas'){
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20); 
                        }
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        if($this->input->post('tipo_reporte') == 'balance_salidas'){
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        }
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Almacén');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Descripción');
                        //if($this->input->post('tipo_reporte') == 'cuadre materiales'){
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        if($this->input->post('tipo_reporte') == 'balance_salidas'){
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Recibe');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Entrega');
                        }
                        //}
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->fecha);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->numero_proyecto . ' - ' . $dato->nombre_proyecto);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->segmento);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->almacen);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->neodata);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->descripcion);
                            //if($this->input->post('tipo_reporte') == 'cuadre materiales'){
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->unidad_medida_abr);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->cantidad);
                            if($this->input->post('tipo_reporte') == 'balance_salidas'){
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->recibe_material);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->nombre);
                            }
                            //}
                        }
                    }elseif($this->input->post('tipo_reporte') == 'inventario' || $this->input->post('tipo_reporte') == 'cuadre_explosion'){
                        
                        
                        //var_dump($personal);
                        if (!empty($reporte)) {
                            $filename = 'Reporte ' . Date('d-m-Y') . '.xls';
                            header("Content-Type: application/vnd.ms-excel");
                            header("Content-Disposition: attachment; filename=" . $filename);
                            $mostrar_columnas = false;
                            $outputs = array();
                            $x = 0;
                            foreach ($reporte as $reportes) {
                               
                                        //$keys[] = str_replace('_',' ',$key);
                                        $outputs[$x] = $reportes;
                                   
                                $x++;
                            }

                            //var_dump($outputs);
                            foreach ($outputs as $output) {
                                if (!$mostrar_columnas) {
                                    echo strtoupper(str_replace('_', ' ', implode("\t", array_keys($output)) . "\n"));
                                    $mostrar_columnas = true;
                                }
                                echo utf8_decode(implode("\t", array_values($output)) . "\n");
                            }
                        }
                    } elseif($this->input->post('tipo_reporte') == 'pedidos_reporte'){
                        //Le aplicamos ancho las columnas.
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);              
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID Pedido');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Neodata Pedido');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha Pedido');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad Pedida');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad Entregada');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Proveedor');

                        $uid_anterior = '';
                        
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            /*if($uid_anterior != $dato->uid_pedido){
                                for($i = 0 ; $i < 6 ; $i++){
                                    $rgb = "";
                                    $randNum = rand(0, 15);
                                    switch ($randNum) {
                                        case 10: $randNum = "A"; 
                                        break;
                                        case 11: $randNum = "B"; 
                                        break;
                                        case 12: $randNum = "C"; 
                                        break;
                                        case 13: $randNum = "D"; 
                                        break;
                                        case 14: $randNum = "E"; 
                                        break;
                                        case 15: $randNum = "F"; 
                                        break; 
                                    }
                                $rgb .= $randNum;
                                }
                                $uid_anterior = $dato->uid_pedido;
                            }
                        
                            
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setRGB($rgb);*/
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid_pedido);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->neodata_pedido);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha_pedido);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->numero_proyecto);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->neodata);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->descripcion);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->cantidad);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->entregado);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->nombre_comercial);
                            
                        }
                    } else {
                        $tipoReporte = 'Asignacion';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Asignación');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Personal');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Neodata');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Unidad');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['folio']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_asignacion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['nombre_proyecto']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['nombre']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['nombres'] . ' ' . $dato['apellido_paterno'] . ' ' . $dato['apellido_materno']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['neodata']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['cantidad']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['unidad_medida']);
                        }
                    }
                    if($this->input->post('tipo_de_reporte') == 'caja_chica'){
                        
                        $tipoReporte = 'Entrada';
                        
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(90);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(100);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);                        
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);                        
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Segmento');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Realizo Movimiento');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Codigo');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Producto');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');                        
                        foreach ($reporte as $dato) {
                           
                            $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                            
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['numero_proyecto'] != NULL ? $dato['numero_proyecto'] . ' ' . $dato['nombre_proyecto'] : $dato['numero_proyecto1'] . ' ' . $dato['nombre_proyecto1']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['segmento']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['relizo_movimiento']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['producto_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);                            
                        }
                    }
                
                    //Le ponemos un nombre al archivo que se va a generar.
                    if($this->input->post('tipo_reporte') == 'balance_general'){
                        $archivo = 'Reporte_por_balance_general' . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                    }else{
                        $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                    }
                    if($this->input->post('tipo_reporte') != 'inventario' && $this->input->post('tipo_reporte') != 'cuadre_explosion'){
                    header('Content-Type: application/vnd.ms-excel');
                    
                    header('Content-Disposition: attachment;filename="' . $archivo . '"');
                    
                    header('Cache-Control: max-age=0');
                    
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    //Hacemos una salida al navegador con el archivo Excel.
                    $objWriter->save('php://output');
                    }
                } else {
                    $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
                    redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesAG', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
        }
    }

    public function reporte_alto_costo()
    {
        $this->permisos = $this->departamentos_model->permisos('reporte_alto_costo');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post('tipo_de_reporte') == 'Proyecto') {
                $this->form_validation->set_rules('proyecto', 'Proyecto', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Personal') {
                //$this->form_validation->set_rules('usuario', 'Personal', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Producto') {
                //$this->form_validation->set_rules('producto', 'Producto', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Fecha') {
                $this->form_validation->set_rules('fecha_inicio', 'Fecha Inicial', 'required|trim');
                $this->form_validation->set_rules('fecha_final', 'Fecha Final', 'required|trim');
            } elseif ($this->input->post('tipo_de_reporte') == 'Almacen') {
                $this->form_validation->set_rules('almacen', 'Almacen', 'required|trim');
            } else {
                redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
            }
            $this->form_validation->set_rules('tipo_reporte', 'Tipo de Reporte para ' . $this->input->post('tipo_de_reporte'), 'required|in_list[entrada,asignacion,devolucion,traspaso,traspaso-almacen,desasignacion,justificacion,herramientas]');
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesAG', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportesAC', 'refresh');
            } else {
                if ('herramientas'  == $this->input->post('tipo_reporte')) {
                    //Cargamos la librería de excel.
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.                    
                    $tipoReporte = 'Herramientas';
                    $datos['total_global_empalmadora'] = 0;
                    $datos['total_global_otdr'] = 0;
                    $datos['total_global_medidor_trafico'] = 0;
                    $datos['total_global_power_meter'] = 0;
                    $datos['total_global_luz_visible'] = 0;
                    $datos['total_global_fiber_cleaver'] = 0;
                    $datos['total_global_corte_tubo_holgado'] = 0;
                    $datos['total_global_corte_longitudinal'] = 0;
                    foreach ($this->almacen_model->estatus_herramientas_alto_costo_like('EMPALMADORA') as $key => $value) {
                        $datos['estatus_empalmadora'][ ] = ucfirst($value->estatus);
                        $datos['total_empalmadora'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_empalmadora'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_alto_costo_like('OTDR') as $key => $value) {
                        $datos['estatus_otdr'][ ] = ucfirst($value->estatus);
                        $datos['total_otdr'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_otdr'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('MEDIDOR DE TRAFICO') as $key => $value) {
                        $datos['estatus_medidor_trafico'][ ] = ucfirst($value->estatus);
                        $datos['total_medidor_trafico'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_medidor_trafico'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('POWER METER') as $key => $value) {
                        $datos['estatus_power_meter'][ ] = ucfirst($value->estatus);
                        $datos['total_power_meter'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_power_meter'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('LUZ VISIBLE') as $key => $value) {
                        $datos['estatus_luz_visible'][ ] = ucfirst($value->estatus);
                        $datos['total_luz_visible'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_luz_visible'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('FIBER CLEAVER') as $key => $value) {
                        $datos['estatus_fiber_cleaver'][ ] = ucfirst($value->estatus);
                        $datos['total_fiber_cleaver'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_fiber_cleaver'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('TUBO HOLGADO') as $key => $value) {
                        $datos['estatus_corte_tubo_holgado'][ ] = ucfirst($value->estatus);
                        $datos['total_corte_tubo_holgado'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_corte_tubo_holgado'] += $value->total;
                        }
                    }
                    foreach ($this->almacen_model->estatus_herramientas_mediano_costo_like('CORTE LONGITUDINAL') as $key => $value) {
                        $datos['estatus_corte_longitudinal'][ ] = ucfirst($value->estatus);
                        $datos['total_corte_longitudinal'][ ] = $value->total;
                        if ($value->estatus == 'almacen' || $value->estatus == 'asignado') {
                            $datos['total_global_corte_longitudinal'] += $value->total;
                        }
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    
                    //Le aplicamos negrita a los títulos de la cabecera.
                    $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            
                    //Definimos los títulos de la cabecera.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Herramienta');
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Total');
                  
                        //Informacion de las filas de la consulta.
                        //$this->excel->getActiveSheet()->setCellValue("A1", 'Herramienta');
                        //$this->excel->getActiveSheet()->setCellValue("B1", 'Total');
                        $this->excel->getActiveSheet()->setCellValue("A2", 'Empalmadora');
                        $this->excel->getActiveSheet()->setCellValue("B2", $datos['total_global_empalmadora']);
                        $this->excel->getActiveSheet()->setCellValue("A3", 'OTDR');
                        $this->excel->getActiveSheet()->setCellValue("B3", $datos['total_global_otdr']);
                        $this->excel->getActiveSheet()->setCellValue("A4", 'Medidor de Tráfico');
                        $this->excel->getActiveSheet()->setCellValue("B4", $datos['total_global_medidor_trafico']);
                        $this->excel->getActiveSheet()->setCellValue("A5", 'Medidor de Potencia');
                        $this->excel->getActiveSheet()->setCellValue("B5", $datos['total_global_power_meter']);
                        $this->excel->getActiveSheet()->setCellValue("A6", 'Luz Visible');
                        $this->excel->getActiveSheet()->setCellValue("B6", $datos['total_global_luz_visible']);
                        $this->excel->getActiveSheet()->setCellValue("A7", 'Fiber Cleaver');
                        $this->excel->getActiveSheet()->setCellValue("B7", $datos['total_global_fiber_cleaver']);
                        $this->excel->getActiveSheet()->setCellValue("A8", 'Corte de tubo holgado');
                        $this->excel->getActiveSheet()->setCellValue("B8", $datos['total_global_corte_tubo_holgado']);
                        $this->excel->getActiveSheet()->setCellValue("A9", 'Corte Longitudinal');
                        $this->excel->getActiveSheet()->setCellValue("B9", $datos['total_global_corte_longitudinal']);
                        
                        //Le ponemos un nombre al archivo que se va a generar.
                        $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $archivo . '"');
                        header('Cache-Control: max-age=0');
                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        //Hacemos una salida al navegador con el archivo Excel.
                        $objWriter->save('php://output');
                    
                }else{
                    $reporte = $this->almacen_model->reporte_por_proyectoAC($this->input->post('tipo_de_reporte'));
                    if (count($reporte) > 0) {
                        //Cargamos la librería de excel.
                        $this->load->library('excel');
                        $this->excel->setActiveSheetIndex(0);
                        $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                        //Contador de filas
                        $contador = 1;
                        //Le aplicamos ancho las columnas.
                        $tipoReporte = '';
                        if ('entrada' == $this->input->post('tipo_reporte')) {
                            if ($this->input->post('tipo_reporte') == 'traspaso' || 'traspaso-almacen' == $this->input->post('tipo_reporte')) {
                                $tipoReporte = 'Traspaso';
                            } else {
                                $tipoReporte = 'Entrada';
                            }
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(80);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Piezas');
                            foreach ($reporte as $dato) {
                                if ($this->input->post('tipo_reporte') == 'traspaso') {
                                    $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                                } else {
                                    $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                                }
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['producto_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                            }
                        } elseif ('traspaso' == $this->input->post('tipo_reporte') || 'traspaso-almacen' == $this->input->post('tipo_reporte')) {
                            if ($this->input->post('tipo_reporte') == 'traspaso' || 'traspaso-almacen' == $this->input->post('tipo_reporte')) {
                                $tipoReporte = 'Traspaso';
                            } else {
                                $tipoReporte = 'Entrada';
                            }
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(80);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Piezas');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacen Destino');
                            foreach ($reporte as $dato) {
                                if ($this->input->post('tipo_reporte') == 'traspaso') {
                                    $folio = 'TP-' . $dato['folio_almacen_movimientos'];
                                } else {
                                    $folio = 'EA-' . $dato['folio_almacen_movimientos'];
                                }
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $folio);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['neodata_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['producto_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['cantidad_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['unidad_medida_abr_dtl_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['almacen_destino']);
                            }
                        } elseif ('asignacion'  == $this->input->post('tipo_reporte')) {
                            $tipoReporte = 'Salida';
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(80);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Recibe Material');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Entregado');
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Piezas');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Comentario');
                            foreach ($reporte as $dato) {
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'SA-' . $dato['folio_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['recibe_material']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['neodata_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['producto_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['entregado_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['entregado_dtl_asignacion']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['unidad_medida_abr_dtl_solicitud_material']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['observaciones_dtl_solicitud_material']);
                            }
                        } elseif ('devolucion'  == $this->input->post('tipo_reporte')) {
                            $tipoReporte = 'Devolucion';
                            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
                            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(80);
                            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(80);
                            //Le aplicamos negrita a los títulos de la cabecera.
                            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                            //Definimos los títulos de la cabecera.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Realizo Movimiento');
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Devuelve Material');
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Codigo');
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Producto');
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad');
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Piezas');
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estado');
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Comentario');
                            foreach ($reporte as $dato) {
                                //Incrementamos una fila más, para ir a la siguiente.
                                $contador++;
                                //Informacion de las filas de la consulta.
                                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'DA-' . $dato['folio_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_almacen_movimientos']);
                                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['relizo_movimiento']);
                                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['devuelve_material']);
                                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['neodata_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['producto_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['entregado_dtl_solicitud_devolucion'] < 0 ? $dato['entregado_dtl_solicitud_devolucion'] * -1 : $dato['entregado_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['unidad_medida_abr_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['estado_dtl_solicitud_devolucion']);
                                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['observaciones_dtl_solicitud_devolucion']);
                            }
                        }
                        //Le ponemos un nombre al archivo que se va a generar.
                        $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $tipoReporte . '_' . date('d-m-Y  H:i:s') . '.xls';
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $archivo . '"');
                        header('Cache-Control: max-age=0');
                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        //Hacemos una salida al navegador con el archivo Excel.
                        $objWriter->save('php://output');
                    } else {
                        $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
                        redirect(base_url() . 'almacen/reportesAC', 'refresh');
                    }
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesAG', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-almacen-general', 'refresh');
        }
    }

    public function reportesAC()
    {
        $this->permisos = $this->departamentos_model->permisos('reporte_alto_costo');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Almacen';
        $header['clase_pagina'] = 'almacen-page';

        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();

        if ($this->session->userdata('tipo') == 1) {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        } else {
            $datos['catalogo'] = $this->almacen_model->catalogo();
        }
        $datos['almacenes'] = $this->almacen_model->almacenes();

        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-alto-costo', $datos);
        $this->load->view('plantillas/footer');
    }

    public function excel_productoAG($categoria)
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        if($categoria == 'activos'){
            $reporte = $this->almacen_model->inventarioAlmacenGeneralActivos();
        }elseif($categoria == 'herramientas'){
            $reporte = $this->almacen_model->inventarioAlmacenGeneralHerramientas();
        }elseif($categoria == 'consumibles'){
            $reporte = $this->almacen_model->inventarioAlmacenGeneralConsumibles();
        }elseif($categoria == 'seguridad'){
            $reporte = $this->almacen_model->inventarioSeguridadHigiene();
        }else{
            $reporte = $this->almacen_model->inventarioAlmacenGeneral();
        }
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Inventario de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
            if($categoria == 'activos'){
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
            }
            elseif($categoria == 'herramientas' || $categoria == 'consumibles'){
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
            }
            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            if($categoria == 'activos'){
                $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            }
            elseif($categoria == 'herramientas' || $categoria == 'consumibles'){
                $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            }
            //Definimos los títulos de la cabecera.
            if ($categoria == 'activos') {
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoria');
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Existencias');
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Numero Serie');
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Numero Interno');
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Estatus');
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Precio');
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Moneda');
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Total');
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Rack');
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Nivel');
            }elseif($categoria == 'herramientas' || $categoria == 'consumibles'){
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoria');
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Existencias');
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Estatus');
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Precio');
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Moneda');
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Total');
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Rack');
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Nivel');
            }
            else{
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoria');
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Existencias');
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Estatus');
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Precio');
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Moneda');
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Total');
            }
            foreach ($reporte as $dato) {
                if ($dato->tipo_moneda == 'd') {
                    $moneda = 'dolar';
                } else {
                    $moneda = 'pesos';
                }
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                if($dato->ultimo_precio > 0){
                    $precio = $dato->ultimo_precio;
                }else{
                    $precio = 0;
                }
                if ($categoria == 'activos') {
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->marca);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->modelo);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->descripcion);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->unidad_medida_abr);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->categoria);
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->existencias);
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_serie);
                    $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->numero_interno);
                    $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->estatus);
                    $this->excel->getActiveSheet()->setCellValue("K{$contador}", $precio);
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", $moneda);
                    $this->excel->getActiveSheet()->setCellValue("M{$contador}", number_format(($precio * $dato->existencias), 2));
                    $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->rack);
                    $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->nivel);
                }else{
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->marca);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->modelo);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->descripcion);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->unidad_medida_abr);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->categoria);
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->existencias);
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->estatus);
                    $this->excel->getActiveSheet()->setCellValue("I{$contador}", $precio);
                    $this->excel->getActiveSheet()->setCellValue("J{$contador}", $moneda);
                    $this->excel->getActiveSheet()->setCellValue("K{$contador}", number_format(($precio * $dato->existencias), 2));
                    if($categoria == 'herramientas' || $categoria == 'consumibles'){
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->rack);
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->nivel);
                    }
                }
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Inventario_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }


    public function excel_entradasAG()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->entradasAlmacenGeneral(ID_ALMACEN_GENERAL);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Entradas de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Neodata Pedido');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Proveedor');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Personal que aprobó');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Tipo Documento');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'EA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->neodata_pedido);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombre_fiscal);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nombre);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->tipo_documento);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Entradas_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_salidasAG()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->salidasAlmacenGeneral(ID_ALMACEN_GENERAL);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Salidas de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'SA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->entrega);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Salidas_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_salidasContratistas()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->salidasContratistas();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Salidas de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'SA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->entrega);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Salidas_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_devolucionesContratistas()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->devolucionesContratistas();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'SA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->entrega);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_devolucionesAG()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Personal que aprobó');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'DA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->entrega);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nombre);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }


    public function excel_devolucionesSH()
    {
        $this->permisos = $this->departamentos_model->permisos('almacen');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $reporte = $this->almacen_model->devolucionesAlmacenGeneral(ID_ALMACEN_GENERAL);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones de Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Personal que aprobó');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'DA-' . $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->entrega);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nombre);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_proyecto . '-' . $dato->nombre_proyecto);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones_Almacen_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }
    

    public function excel_catalogo($tipo = "null")
    {
        if($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15 || $this->session->userdata('tipo') == 7 || $this->session->userdata('tipo') == 4 || $this->session->userdata('tipo') == 1 || $this->session->userdata('tipo') == 2 || $this->session->userdata('tipo') == 10){
            
            $reporte = $this->almacen_model->todoCatalogo($tipo);
        }else{
            $reporte = $this->almacen_model->almacenes();
        }
        $precio_dolar = $this->precio_actual_dolar();

        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Catalogo ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripcion');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Utilizacion');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Minimo en stock');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Maximo en stock');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Origen');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Categoria');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Unidad de medida');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Precio');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Estatus');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if($dato->estatus_producto == 0){
                    $estatus = 'Desactivado';
                }else{
                    $estatus = 'Activado';
                }
                if($dato->tipo_moneda == 'd' && $dato->precio > 0){
                    $precio_total = $dato->precio * $precio_dolar;
                }else{
                    $precio_total = $dato->precio;
                }
                //if($dato->neodata == 'CN-OLT-GPO-100'){
                //    echo $dato->precio. ' '. $precio_dolar. ' '. $precio_total;
                 //   return;
                //}
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->utilizacion);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->minimo);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->maximo);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->origen);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $precio_total);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $estatus);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Catalogo_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_proyectos()
    {
        $reporte = $this->almacen_model->proyectos();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Proyectos ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Número de proyecto');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->numero_proyecto);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->nombre_proyecto);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Proyectos_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_almacenes()
    {
        $reporte = $this->almacen_model->almacenes('autos');
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Almacenes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Almacén');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->almacen);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Almacenes_' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_inventario_alto_costo()
    {
        $reporte = $this->almacen_model->inventarioAlmacenAltoCosto();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Herramientas Alto Costo ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N° Interno');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Usuario');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Rack');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Gabeta');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Parte');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_interno);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->usuario);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->rack);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->gabeta);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->parte);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Herramientas_Alto_Costo' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_solicitudes_cv()
    {
        $reporte = $this->almacen_model->solicitudesCV();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes Control Vehicular');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);            

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);            

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creado por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación PM');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Fecha Aprobación PM');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Aprobación CO');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Fecha Aprobación CO');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Aprobación CV');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Fecha Aprobación CV');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Reecibe');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Estatus');            

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->fecha_aprobacion_pm);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->user_control_obra);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->fecha_aprobacion_co);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->user_control_vehicular);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->fecha_aprobacion_cv);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->nombre_proyecto);                
                if ($dato->estatus_solicitud == 'SCV') {                                             
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", "Surtida");                      
                }else if($dato->estatus_solicitud == 'SU CV'){
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", "Aprobada por CV");
                }else if($dato->estatus_solicitud == 'cancelada CV'){
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", "Cancelada CV");
                }else if($dato->estatus_solicitud == 'CV'){
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", "Pendiente Aprobación CV");
                }else if($dato->estatus_solicitud == 'SU A'){
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", "Pendiente Entrega");
                }                  
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes Control Vehicular' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_consumibles_alto_costo()
    {
        $reporte = $this->almacen_model->inventarioAlmacenAltoCostoConsumibles();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Consumibles Alto Costo ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Existencias');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Total');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Rack');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Gabeta');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Parte');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->existencias);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", ($dato->precio * $dato->existencias));
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->rack);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->gabeta);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->parte);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Consumibles_Alto_Costo' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }
    
    public function excel_lineas()
    {
        $reporte = $this->almacen_model->inventarioAlmacenLineas();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Lineas Telefonicas ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(23);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(38);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);            

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);            

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Teléfono');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Asignación');            

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->Telefono);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->precio); 
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno);                
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Consumibles_Alto_Costo' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_inventario_sistemasEC()
    {
        $reporte = $this->almacen_model->inventarioAlmacenSistemasEC();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Activo Fijo Sistemas ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(40);


            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);



            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N° Interno');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');

            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Usuario');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Fecha asignación');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Rack');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Gabeta');
            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Parte');
            $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Area');
            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Departamento');
            $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Empresa');



            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                if($dato->nombres != NULL){
                    $personal = $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno;
                    $fecha = $dato->fecha_asignacion;
                }else{
                    $personal = 'Sin asignación';
                    $fecha = '---';
                }
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marcaal);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelolo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_interno);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $personal);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $fecha);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->rack);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->gabeta);
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->parte);
                $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato->area);
                $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato->departamento);
                $this->excel->getActiveSheet()->setCellValue("R{$contador}", $dato->establecimiento);



            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Activo_Fijo_Sistemas' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_herramientas_sistemas()
    {
        $reporte = $this->almacen_model->inventarioAlmacenSistemasHerramienta();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Herramientas Sistemas ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);



            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);




            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N° Interno');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Usuario');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Rack');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Gabeta');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Parte');
            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Area');
            $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Departamento');
            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Empresa');



            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                if($dato->nombres != NULL){
                    $personal = $dato->nombres . ' ' . $dato->apellido_paterno . ' ' . $dato->apellido_materno;
                    $fecha = $dato->fecha_asignacion;
                }else{
                    $personal = 'Sin asignación';
                    $fecha = '---';
                }
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->numero_interno);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $personal);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->rack);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->gabeta);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->parte);
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->area);
                $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato->departamento);
                $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato->establecimiento);


            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Herramientas_Sistemas' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }


    public function excel_consumibles_area_medica()
    {
        //$reporte = $this->almacen_model->inventarioAlmacenAreaMedica();
        $reporte = $this->almacen_model->inventarioAlmacenAreaMedicaConsumibles();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Consumibles Área Médica ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Existencias');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Total');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->existencias);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", ($dato->precio * $dato->existencias));
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Consumibles_Área_Médica' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_asignaciones_alto_costo()
    {
        $reporte = $this->almacen_model->asignaciones();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Asignaciones Alto Costo ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            if ($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15){
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            }

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            if ($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15){
                $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            }

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha asignación');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Autor');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Proyecto');
            if ($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15){
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Numero Interno');
            }

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha_asignacion);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", ($dato->estatus_movimiento=='1') ? 'Finalizada' : 'Pendiente');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombres .' '. $dato->apellido_paterno .' '. $dato->apellido_materno);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nombre);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->nombre_proyecto);
                if ($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15){
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_interno);
                }
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Asignaciones_Alto_Costo' . date('d-m-Y  H:i:s') . '.xls';
            if ($this->session->userdata('tipo') == 3 || $this->session->userdata('tipo') == 15){
                $archivo = 'Asignaciones_Control_Vehicular' . date('d-m-Y  H:i:s') . '.xls';
            }
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_movimientos()
    {
        $reporte = $this->almacen_model->movimientos();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Movimientos ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Registrado por');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Realizado por');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Tipo movimiento');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->folio);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->numero_proyecto);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->nombre);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nombre_autorizado);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->tipo);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Movimientos' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_mis_solicitudesAG()
    {
        $reporte = $this->almacen_model->mis_solicitudesAG();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'S') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU') {
                    $status = 'Aprobado por AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AG') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO PM' || $dato->estatus_solicitud == 'CO SH') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada CO') {
                    $status = 'Cancelada CO';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada SH') {
                    $status = 'Cancelada SH';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada AG') {
                    $status = 'Cancelada AG';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'SH') {
                    $status = 'Pendiente Aprobación SH';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'PM') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_mis_solicitudesAM()
    {
        $reporte = $this->almacen_model->mis_solicitudesAreaMedica();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'SAM') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU AM') {
                    $status = 'Aprobado por Área Médica';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AM') {
                    $status = 'Pendiente Aprobación Área Médica';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'cancelada AM') {
                    $status = 'Cancelada Área Médica';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_mis_solicitudesKuali()
    {
        $reporte = $this->almacen_model->mis_solicitudesKuali();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'SK') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU K') {
                    $status = 'Aprobado por Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'K') {
                    $status = 'Pendiente Aprobación Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'cancelada K') {
                    $status = 'Cancelada Kuali';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM K') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'PM K') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_mis_solicitudesAC()
    {
        $reporte = $this->almacen_model->mis_solicitudesAC();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');
            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'SAC') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU AC') {
                    $status = 'Aprobado por Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AC') {
                    $status = 'Pendiente Aprobación Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO AC') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada CO') {
                    $status = 'Cancelada CO';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada AC') {
                    $status = 'Cancelada Alto Costo';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'PM AC') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_solicitudes()
    {
        if($this->session->userdata('tipo') == 1){
            $reporte = $this->almacen_model->solicitudesAC();
        }else{
            $reporte = $this->almacen_model->solicitudesAG();
        }
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);


            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Fecha Aprobación PM');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Fecha Aprobación CO');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Fecha Aprobación AG');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Fecha Surtido');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Persona Autorización');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Persona Surtido');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'S') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU') {
                    $status = 'Aprobado por AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'SU A') {
                    $status = 'Pendiente Entrega';
                    $percent = '85%';
                } elseif ($dato->estatus_solicitud == 'AG') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO PM' || $dato->estatus_solicitud == 'CO SH') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada CO') {
                    $status = 'Cancelada CO';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada SH') {
                    $status = 'Cancelada SH';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada AG') {
                    $status = 'Cancelada AG';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'SH') {
                    $status = 'Pendiente Aprobación SH';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'PM') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'SAC') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU AC') {
                    $status = 'Aprobado por Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AC') {
                    $status = 'Pendiente Aprobación Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO AC') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada AC') {
                    $status = 'Cancelada Alto Costo';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'PM AC') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'SK') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU K') {
                    $status = 'Aprobado por Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'K') {
                    $status = 'Pendiente Aprobación Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'cancelada K') {
                    $status = 'Cancelada Kuali';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValueExplicit("A{$contador}", $dato->uid, PHPExcel_Cell_DataType::TYPE_STRING);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->neodata_salida);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->fecha_aprobacion_pm);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->fecha_aprobacion_co);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $this->session->userdata('tipo') == 1 ? $dato->fecha_aprobacion_ac : $dato->fecha_aprobacion_ag);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->fecha_modificacion);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $this->session->userdata('tipo') == 1 ? $dato->user_alto_costo : $dato->user_almacen_general);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->nombre_asignacion);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $percent);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_solicitudes_sh()
    {
        $reporte = $this->almacen_model->solicitudesHigiene();
        if (count($reporte) > 0) {            
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Fecha Aprobación PM');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Aprobación CO');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Fecha Aprobación CO');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Aprobación AG');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Fecha Aprobación AG');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'S') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU') {
                    $status = 'Aprobado por AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'SU A') {
                    $status = 'Pendiente entrega';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AG') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO PM' || $dato->estatus_solicitud == 'CO SH') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada CO') {
                    $status = 'Cancelada CO';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada SH') {
                    $status = 'Cancelada SH';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada AG') {
                    $status = 'Cancelada AG';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'SH') {
                    $status = 'Pendiente Aprobación SH';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'PM') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'SAC') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU AC') {
                    $status = 'Aprobado por Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AC') {
                    $status = 'Pendiente Aprobación Alto Costo';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO AC') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada AC') {
                    $status = 'Cancelada Alto Costo';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'PM AC') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'SK') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU K') {
                    $status = 'Aprobado por Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'K') {
                    $status = 'Pendiente Aprobación Kuali';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'cancelada K') {
                    $status = 'Cancelada Kuali';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValueExplicit("A{$contador}", $dato->uid, PHPExcel_Cell_DataType::TYPE_STRING);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->neodata_salida);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->fecha_aprobacion_pm);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->user_control_obra);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->fecha_aprobacion_co);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->user_aprobacion_ag);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->fecha_aprobacion_ag);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $percent);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_solicitudes_rcv()
    {
        $reporte = $this->almacen_model->solicitudesRCV();
        if (count($reporte) > 0) {            
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Neodata');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Fecha Aprobación CV');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Aprobación AG');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Fecha aprobación AG');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'SRCV') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU') {
                    $status = 'Aprobado por AG';
                    $percent = '75%';
                }else if ($dato->estatus_solicitud == 'SU RCV A') {
                    $status = 'Pendiente de entrega';
                    $percent = '85%';
                }else if ($dato->estatus_solicitud == 'SU RCV') {
                    $status = 'Aprobado por Almacen General';
                    $percent = '75%';
                }else if ($dato->estatus_solicitud == 'RCV') {
                    $status = 'Pendiente Aprobación Control Vehicular';
                    $percent = '50%';
                }elseif ($dato->estatus_solicitud == 'SU A') {
                    $status = 'Pendiente entrega';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AG') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'CO PM' || $dato->estatus_solicitud == 'CO SH') {
                    $status = 'Pendiente Aprobación CO';
                    $percent = '50%';
                } elseif ($dato->estatus_solicitud == 'cancelada CO') {
                    $status = 'Cancelada CO';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada SH') {
                    $status = 'Cancelada SH';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada AG') {
                    $status = 'Cancelada AG';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'cancelada PM') {
                    $status = 'Cancelada PM';
                    $percent = '0%';
                } elseif ($dato->estatus_solicitud == 'SH') {
                    $status = 'Pendiente Aprobación SH';
                    $percent = '25%';
                } elseif ($dato->estatus_solicitud == 'PM') {
                    $status = 'Pendiente Aprobación PM';
                    $percent = '25%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValueExplicit("A{$contador}", $dato->uid, PHPExcel_Cell_DataType::TYPE_STRING);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->neodata_salida);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->fecha_aprobacion_rcv);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->user_aprobacion_ag);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->fecha_aprobacion_ag);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $percent);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_solicitudesAreaMedica()
    {
        $reporte = $this->almacen_model->solicitudesAreaMedica();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato->estatus_solicitud == 'SAM') {
                    $status = 'Surtida';
                    $percent = '100%';
                } elseif ($dato->estatus_solicitud == 'SU AM') {
                    $status = 'Aprobado por Área Médica';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'AM') {
                    $status = 'Pendiente Aprobación Área Médica';
                    $percent = '75%';
                } elseif ($dato->estatus_solicitud == 'cancelada AM') {
                    $status = 'Cancelada Área Médica';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->uid);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_creacion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->user_autor);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->user_aprobacion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->recibe);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->numero_proyecto.' '.$dato->nombre_proyecto);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }
            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Solicitudes' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_devoluciones_AG()
    {
        $reporte = $this->almacen_model->solicitudes_devoluciones();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Almacen General ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'pendiente aprobación C.O';
                    $percent = '33%';
                } elseif ($dato['estatus_solicitud'] == 'A.G') {
                    $status = 'pendiente entrega A.G';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada A.G') {
                    $status = 'cancelada A.G';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_aprobacion']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Almacen General' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_SH()
    {
        $reporte = $this->almacen_model->solicitudes_devoluciones_seguridad();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devolucion Seguridad e Higiene');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'pendiente aprobación C.O';
                    $percent = '50%';
                } elseif ($dato['estatus_solicitud'] == 'A.G') {
                    $status = 'pendiente entrega A.G';
                    $percent = '75%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Pendiente Aprobación AG';
                    $percent = '25%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada A.G') {
                    $status = 'cancelada A.G';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_sh']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Seguridad e Higiene' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_AC()
    {
        $reporte = $this->almacen_model->solicitudes_devolucionesAC();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Alto Costo');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'Pendiente aprobación CO';
                    $percent = '33%';
                } elseif ($dato['estatus_solicitud'] == 'A.C') {
                    $status = 'Pendiente entrega Alto Costo';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Pendiente Aprobación Alto Costo';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada A.C') {
                    $status = 'Cancelada Alto Costo';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_alto_costo']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Alto Costo' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_ACV()
    {

        $reporte = $this->almacen_model->solicitudes_devolucionesACV(); 
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Autos CV');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'Pendiente aprobación CO';
                    $percent = '33%';
                } elseif ($dato['estatus_solicitud'] == 'A.C') {
                    $status = 'Pendiente entrega Alto Costo';
                    $percent = '66%';
                }elseif ($dato['estatus_solicitud'] == 'A.C.V') {
                    $status = 'Pendiente entrega Contro Vehicular';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Aprobación Control Vehicular';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada A.C') {
                    $status = 'Cancelada Alto Costo';
                    $percent = '0%';
                }else{
                    $status = 'Contactar al administrador';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_autos_control_vehicular']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Autos CV' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_sistemas()
    {
        $reporte = $this->almacen_model->solicitudes_devolucionesSistemas();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Sistemas');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'Pendiente aprobación CO';
                    $percent = '33%';
                } elseif ($dato['estatus_solicitud'] == 'Sis') {
                    $status = 'Pendiente entrega Sistemas';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Aprobación Sistemas';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada Sis') {
                    $status = 'Cancelada Sistemas';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_sistemas']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Sistemas' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_kuali()
    {
        $reporte = $this->almacen_model->solicitudes_devolucionesKuali();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Kuali Digital');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'C.O') {
                    $status = 'Pendiente Aprobación C.O';
                    $percent = '33%';
                } elseif ($dato['estatus_solicitud'] == 'K') {
                    $status = 'Pendiente Entrega K';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Pendiente Aprobación Kuali';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada K') {
                    $status = 'Cancelada K';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_kuali']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Kuali' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_refaccionescv()
    {
        $reporte = $this->almacen_model->solicitudes_devolucionesRCV();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Refacciones CV');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'RCV') {
                    $status = 'Pendiente Entrega Control Vehicular';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Aprobada Control Vehicular';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada RCV') {
                    $status = 'Cancelada Control Vehicular';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_refacciones_cv']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Refacciones CV' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_areamedica()
    {
        $reporte = $this->almacen_model->solicitudes_devolucionesAreaMedica();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Área Médica');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['estatus_solicitud'] == 'TCV') {
                    $status = 'Pendiente Entrega Control Vehicular';
                    $percent = '66%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Aprobada Control Vehicular';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada RCV') {
                    $status = 'Cancelada Control Vehicular';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_aprobacion']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Área Médica' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_devoluciones_tarjetas()
    {
        $reporte = $this->almacen_model->solicitudes_devoluciones_tarjetas();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Tarjetas');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(35);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Creación');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Creada por');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Aprobación');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Progreso');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if($dato['estatus_solicitud'] == 'A.M') {
                    $status = 'Pendiente aprobación Área Médica';
                    $percent = '50%';
                } elseif ($dato['estatus_solicitud'] == 'aprobada') {
                    $status = 'Aprobada por Área Médica';
                    $percent = '96%';
                } elseif ($dato['estatus_solicitud'] == 'entregado') {
                    $status = 'Entregado';
                    $percent = '100%';
                } elseif ($dato['estatus_solicitud'] == 'cancelada A.C') {
                    $status = 'Cancelada Área Médica';
                    $percent = '0%';
                }
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['fecha_creacion']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['user_autor']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['user_almacen_general']);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe']);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' '.$dato['nombre_proyecto']);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $status);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $percent);
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones Tarjetas' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/devoluciones', 'refresh');
        }
    }


    public function excel_almacenes_entradas($uid)
    {
        $reporte = $this->almacen_model->reporteAlmacenes($uid, "'entrada','entrada-almacen'");
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Entradas Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que aprobó');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Proyecto');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Tipo Documento');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Número Documento');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['tipo'] === 'entrada' || $dato['tipo'] === 'entrada-almacen') {
                    //Informacion de las filas de la consulta.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'EA-'.$dato['folio']);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['fecha']);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['nombre']);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['numero_proyecto'].' - '.$dato['nombre_proyecto']);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['tipo_documento']);
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['numero_documento']);
                }
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Entradas almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_almacenes_salidas($uid)
    {
        $reporte = $this->almacen_model->reporteAlmacenes($uid, "'salida-almacen'");
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Salidas Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['tipo'] === 'salida-almacen') {
                    //Informacion de las filas de la consulta.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'SA-'.$dato['folio']);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['fecha']);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entrega']);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe'].' '.$dato['paternorecibe'].' '.$dato['maternorecibe']);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' - '.$dato['nombre_proyecto']);
                }
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Salidas almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_almacenes_devoluciones($uid)
    {
        $reporte = $this->almacen_model->reporteAlmacenes($uid, "'devolucion-almacen'");
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Devoluciones Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['tipo'] === 'devolucion-almacen') {
                    //Informacion de las filas de la consulta.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'DA-'.$dato['folio']);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['fecha']);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entrega']);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['recibe'].' '.$dato['paternorecibe'].' '.$dato['maternorecibe']);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['numero_proyecto'].' - '.$dato['nombre_proyecto']);
                }
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Devoluciones almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function numletras($numero, $_moneda)
    {
        $numero = str_replace(',', '', $numero);
        /*
        $numero=valor a retornar en letras.
        $_moneda=1=Colones, 2=Dólares 3=Euros
        Las siguientes funciones (unidad() hasta milmillon() forman parte de ésta función
        */
        switch ($_moneda) {
      case 'p':
        $_nommoneda = 'PESOS';
        $_fin       = ' M.N.';
        break;
      case 'd':
        $_nommoneda = 'DÓLARES';
        $_fin       = ' DLS.';
        break;
    } //$_moneda
        //***
        $tempnum = explode('.', $numero);
        if ($tempnum[0] !== "") {
            $numf = $this->milmillon($tempnum[0]);
            if ($numf == "UNO") {
                $numf = substr($numf, 0, -1);
            } //$numf == "UNO"
            $TextEnd = $numf . ' ';
            $TextEnd .= $_nommoneda . ' ';
        } //$tempnum[0] !== ""
        if ($tempnum[1] == "" || $tempnum[1] >= 100) {
            $tempnum[1] = "00";
        } //$tempnum[1] == "" || $tempnum[1] >= 100
        $TextEnd .= $tempnum[1];
        $TextEnd .= "/100" . $_fin;
        return $TextEnd;
    }
    public function unidad($numuero)
    {
        switch ($numuero) {
      case 9:
        $numu = "NUEVE";
        break;
      case 8:
        $numu = "OCHO";
        break;
      case 7:
        $numu = "SIETE";
        break;
      case 6:
        $numu = "SEIS";
        break;
      case 5:
        $numu = "CINCO";
        break;
      case 4:
        $numu = "CUATRO";
        break;
      case 3:
        $numu = "TRES";
        break;
      case 2:
        $numu = "DOS";
        break;
      case 1:
        $numu = "UNO";
        break;
      case 0:
        $numu = "";
        break;
    } //$numuero
        return $numu;
    }
    public function decena($numdero)
    {
        if ($numdero >= 90 && $numdero <= 99) {
            $numd = "NOVENTA ";
            if ($numdero > 90) {
                $numd = $numd . "Y " . ($this->unidad($numdero - 90));
            }
        } //$numdero >= 90 && $numdero <= 99
        elseif ($numdero >= 80 && $numdero <= 89) {
            $numd = "OCHENTA ";
            if ($numdero > 80) {
                $numd = $numd . "Y " . ($this->unidad($numdero - 80));
            } //$numdero > 80
        } //$numdero >= 80 && $numdero <= 89
    elseif ($numdero >= 70 && $numdero <= 79) {
        $numd = "SETENTA ";
        if ($numdero > 70) {
            $numd = $numd . "Y " . ($this->unidad($numdero - 70));
        }
    } //$numdero >= 70 && $numdero <= 79
        elseif ($numdero >= 60 && $numdero <= 69) {
            $numd = "SESENTA ";
            if ($numdero > 60) {
                $numd = $numd . "Y " . ($this->unidad($numdero - 60));
            } //$numdero > 60
        } //$numdero >= 60 && $numdero <= 69
    elseif ($numdero >= 50 && $numdero <= 59) {
        $numd = "CINCUENTA ";
        if ($numdero > 50) {
            $numd = $numd . "Y " . ($this->unidad($numdero - 50));
        }
    } //$numdero >= 50 && $numdero <= 59
        elseif ($numdero >= 40 && $numdero <= 49) {
            $numd = "CUARENTA ";
            if ($numdero > 40) {
                $numd = $numd . "Y " . ($this->unidad($numdero - 40));
            }
        } //$numdero >= 40 && $numdero <= 49
        elseif ($numdero >= 30 && $numdero <= 39) {
            $numd = "TREINTA ";
            if ($numdero > 30) {
                $numd = $numd . "Y " . ($this->unidad($numdero - 30));
            }
        } //$numdero >= 30 && $numdero <= 39
        elseif ($numdero >= 20 && $numdero <= 29) {
            if ($numdero == 20) {
                $numd = "VEINTE ";
            } //$numdero == 20
            else {
                $numd = "VEINTI" . ($this->unidad($numdero - 20));
            }
        } //$numdero >= 20 && $numdero <= 29
        elseif ($numdero >= 10 && $numdero <= 19) {
            switch ($numdero) {
        case 10:
          $numd = "DIEZ ";
          break;
        case 11:
          $numd = "ONCE ";
          break;
        case 12:
          $numd = "DOCE ";
          break;
        case 13:
          $numd = "TRECE ";
          break;
        case 14:
          $numd = "CATORCE ";
          break;
        case 15:
          $numd = "QUINCE ";
          break;
        case 16:
          $numd = "DIECISEIS ";
          break;
        case 17:
          $numd = "DIECISIETE ";
          break;
        case 18:
          $numd = "DIECIOCHO ";
          break;
        case 19:
          $numd = "DIECINUEVE ";
          break;
      } //$numdero
        } //$numdero >= 10 && $numdero <= 19
    else {
        $numd = $this->unidad($numdero);
    }
        return $numd;
    }
    public function centena($numc)
    {
        if ($numc >= 100) {
            if ($numc >= 900 && $numc <= 999) {
                $numce = "NOVECIENTOS ";
                if ($numc > 900) {
                    $numce = $numce . ($this->decena($numc - 900));
                }
            } //$numc >= 900 && $numc <= 999
            elseif ($numc >= 800 && $numc <= 899) {
                $numce = "OCHOCIENTOS ";
                if ($numc > 800) {
                    $numce = $numce . ($this->decena($numc - 800));
                }
            } //$numc >= 800 && $numc <= 899
            elseif ($numc >= 700 && $numc <= 799) {
                $numce = "SETECIENTOS ";
                if ($numc > 700) {
                    $numce = $numce . ($this->decena($numc - 700));
                }
            } //$numc >= 700 && $numc <= 799
            elseif ($numc >= 600 && $numc <= 699) {
                $numce = "SEISCIENTOS ";
                if ($numc > 600) {
                    $numce = $numce . ($this->decena($numc - 600));
                }
            } //$numc >= 600 && $numc <= 699
            elseif ($numc >= 500 && $numc <= 599) {
                $numce = "QUINIENTOS ";
                if ($numc > 500) {
                    $numce = $numce . ($this->decena($numc - 500));
                }
            } //$numc >= 500 && $numc <= 599
            elseif ($numc >= 400 && $numc <= 499) {
                $numce = "CUATROCIENTOS ";
                if ($numc > 400) {
                    $numce = $numce . ($this->decena($numc - 400));
                }
            } //$numc >= 400 && $numc <= 499
            elseif ($numc >= 300 && $numc <= 399) {
                $numce = "TRESCIENTOS ";
                if ($numc > 300) {
                    $numce = $numce . ($this->decena($numc - 300));
                }
            } //$numc >= 300 && $numc <= 399
            elseif ($numc >= 200 && $numc <= 299) {
                $numce = "DOSCIENTOS ";
                if ($numc > 200) {
                    $numce = $numce . ($this->decena($numc - 200));
                }
            } //$numc >= 200 && $numc <= 299
            elseif ($numc >= 100 && $numc <= 199) {
                if ($numc == 100) {
                    $numce = "CIEN ";
                } else {
                    $numce = "CIENTO " . ($this->decena($numc - 100));
                }
            } //$numc >= 100 && $numc <= 199
        } //$numc >= 100
    else {
        $numce = $this->decena($numc);
    }
        return $numce;
    }
    public function miles($nummero)
    {
        if ($nummero >= 1000 && $nummero < 2000) {
            $numm = "MIL " . ($this->centena($nummero % 1000));
        } //$nummero >= 1000 && $nummero < 2000
        if ($nummero >= 2000 && $nummero < 10000) {
            $numm = $this->unidad(Floor($nummero / 1000)) . " MIL " . ($this->centena($nummero % 1000));
        } //$nummero >= 2000 && $nummero < 10000
        if ($nummero < 1000) {
            $numm = $this->centena($nummero);
        }
        return $numm;
    }
    public function decmiles($numdmero)
    {
        if ($numdmero == 10000) {
            $numde = "DIEZ MIL";
        }
        if ($numdmero > 10000 && $numdmero < 20000) {
            $numde = $this->decena(Floor($numdmero / 1000)) . "MIL " . ($this->centena($numdmero % 1000));
        } //$numdmero > 10000 && $numdmero < 20000
        if ($numdmero >= 20000 && $numdmero < 100000) {
            $numde = $this->decena(Floor($numdmero / 1000)) . " MIL " . ($this->miles($numdmero % 1000));
        } //$numdmero >= 20000 && $numdmero < 100000
        if ($numdmero < 10000) {
            $numde = $this->miles($numdmero);
        }
        return $numde;
    }
    public function cienmiles($numcmero)
    {
        if ($numcmero == 100000) {
            $num_letracm = "CIEN MIL";
        }
        if ($numcmero >= 100000 && $numcmero < 1000000) {
            $num_letracm = $this->centena(Floor($numcmero / 1000)) . " MIL " . ($this->centena($numcmero % 1000));
        } //$numcmero >= 100000 && $numcmero < 1000000
        if ($numcmero < 100000) {
            $num_letracm = $this->decmiles($numcmero);
        }
        return $num_letracm;
    }
    public function millon($nummiero)
    {
        if ($nummiero >= 1000000 && $nummiero < 2000000) {
            $num_letramm = "UN MILLON " . ($this->cienmiles($nummiero % 1000000));
        } //$nummiero >= 1000000 && $nummiero < 2000000
        if ($nummiero >= 2000000 && $nummiero < 10000000) {
            $num_letramm = $this->unidad(Floor($nummiero / 1000000)) . " MILLONES " . ($this->cienmiles($nummiero % 1000000));
        } //$nummiero >= 2000000 && $nummiero < 10000000
        if ($nummiero < 1000000) {
            $num_letramm = $this->cienmiles($nummiero);
        }
        return $num_letramm;
    }
    public function decmillon($numerodm)
    {
        if ($numerodm == 10000000) {
            $num_letradmm = "DIEZ MILLONES";
        }
        if ($numerodm > 10000000 && $numerodm < 20000000) {
            $num_letradmm = $this->decena(Floor($numerodm / 1000000)) . "MILLONES " . ($this->cienmiles($numerodm % 1000000));
        } //$numerodm > 10000000 && $numerodm < 20000000
        if ($numerodm >= 20000000 && $numerodm < 100000000) {
            $num_letradmm = $this->decena(Floor($numerodm / 1000000)) . " MILLONES " . ($this->millon($numerodm % 1000000));
        } //$numerodm >= 20000000 && $numerodm < 100000000
        if ($numerodm < 10000000) {
            $num_letradmm = $this->millon($numerodm);
        } //$numerodm < 10000000
        return $num_letradmm;
    }
    public function cienmillon($numcmeros)
    {
        if ($numcmeros == 100000000) {
            $num_letracms = "CIEN MILLONES";
        }
        if ($numcmeros >= 100000000 && $numcmeros < 1000000000) {
            $num_letracms = $this->centena(Floor($numcmeros / 1000000)) . " MILLONES " . ($this->millon($numcmeros % 1000000));
        } //$numcmeros >= 100000000 && $numcmeros < 1000000000
        if ($numcmeros < 100000000) {
            $num_letracms = $this->decmillon($numcmeros);
        }
        return $num_letracms;
    }
    public function milmillon($nummierod)
    {
        if ($nummierod >= 1000000000 && $nummierod < 2000000000) {
            $num_letrammd = "MIL " . ($this->cienmillon($nummierod % 1000000000));
        } //$nummierod >= 1000000000 && $nummierod < 2000000000
        if ($nummierod >= 2000000000 && $nummierod < 10000000000) {
            $num_letrammd = $this->unidad(Floor($nummierod / 1000000000)) . " MIL " . ($this->cienmillon($nummierod % 1000000000));
        } //$nummierod >= 2000000000 && $nummierod < 10000000000
        if ($nummierod < 1000000000) {
            $num_letrammd = $this->cienmillon($nummierod);
        }
        return $num_letrammd;
    }

    public function excel_almacenes_traspasos($uid)
    {
        $reporte = $this->almacen_model->reporteAlmacenes($uid, $tipo="'traspaso-almacen'");
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Traspasos Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'UID');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Folio');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Personal que entrega');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Personal que recibe');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Proyecto');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                if ($dato['tipo'] === 'traspaso-almacen') {
                    //Informacion de las filas de la consulta.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['uid']);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'TP-'.$dato['folio']);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['fecha']);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['nombre']);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['numero_proyecto'].' - '.$dato['nombre_proyecto']);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['nombre_proyecto_destino']);
                }
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Traspasos almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_almacenes_productos($uid)
    {
        $reporte = $this->almacen_model->productosAlmacenCli($uid);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Productos Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);


            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);


            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Existencias');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Moneda');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Minimo');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Maximo');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Sitio');
            $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Total');

            foreach ($reporte as $dato) {
                $estatus = "Alto";
                if($dato->minimo == $dato->existencias){
                    $estatus = "Minimo";
                }else if($dato->minimo > $dato->existencias){
                    $estatus = "Bajo";
                }
                if($dato->tipo_moneda == 'p'){
                    $moneda = 'peso';
                }elseif($dato->tipo_moneda == 'd'){
                    $moneda = 'dolar';
                }else{
                    $moneda = '';
                }

                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->existencias);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio_pedido);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $moneda);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->minimo);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->maximo);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $estatus);
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->sitio);
                $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato->precio_pedido > 0 ? $dato->precio_pedido * $dato->existencias : 0);

                /*$this->excel->getActiveSheet()->getStyle("A{$contador}:L7{$contador}")->applyFromArray(array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FF0000')
                        )
                    ));*/
                //$this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->maximo);
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Productos almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_kuali_herramientas($uid)
    {
        $reporte = $this->almacen_model->excel_kuali_herramientas($uid);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Productos Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Existencias');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Moneda');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Minimo');
            $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Maximo');
            $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Estatus');
            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Sitio');

            foreach ($reporte as $dato) {
                $estatus = "Alto";
                if($dato->minimo == $dato->existencias){
                    $estatus = "Minimo";
                }else if($dato->minimo > $dato->existencias){
                    $estatus = "Bajo";
                }
                if($dato->tipo_moneda == 'p'){
                    $moneda = 'peso';
                }elseif($dato->tipo_moneda == 'd'){
                    $moneda = 'dolar';
                }else{
                    $moneda = '';
                }

                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->existencias);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->estatus);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $moneda);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->minimo);
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->maximo);
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", $estatus);
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->sitio);
                /*$this->excel->getActiveSheet()->getStyle("A{$contador}:L7{$contador}")->applyFromArray(array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'FF0000')
                        )
                    ));*/
                //$this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->maximo);
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Productos almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function excel_almacenes_explosion_regiones($id)
    {
        if($id == 281){
            $reporte = $this->almacen_model->explosionInsumosCli112($id);
        }elseif($id == 275){
            $reporte = $this->almacen_model->explosionInsumosCli111($id);
        }elseif($id == 287){
            $reporte = $this->almacen_model->explosionInsumosCli109($id);
        }
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Explosión Insumos ');
            //Contador de filas
            $contador = 1;
            if($id == 281){
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);          

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripcion');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Explosión');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Almacén Juchitan');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Almacén Chiapas');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacén Oaxaca Centro');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'ARRIAGA-CHIAPAS');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Restante');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Porcentaje');  

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $total = ($dato->total_explosion - $dato->juchitan - $dato->chiapas - $dato->oaxaca - $dato->arriaga);
                $suma = ($dato->juchitan + $dato->chiapas + $dato->oaxaca + $dato->arriaga);
                $promedio = ($suma/$dato->total_explosion)*100;
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->unidad_medida_abr);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->total_explosion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->juchitan);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->chiapas);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->oaxaca);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->arriaga);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $total);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $promedio);  
            }
        }elseif($id == 275){
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripcion');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Explosión');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'NUEVO LEON');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Almacén Coahuila');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacén Tamaulipas');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'ALMACÉN CIUDAD VICTORIA');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Almacén Trancoso Región 3');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Restante');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Porcentaje');  

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $total = ($dato->total_explosion - $dato->nuevo_leon - $dato->coahuila - $dato->tamaulipas);
                $suma = ($dato->nuevo_leon + $dato->coahuila + $dato->tamaulipas);
                $promedio = ($suma/$dato->total_explosion)*100;
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->unidad_medida_abr);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->total_explosion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->nuevo_leon);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->coahuila);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->tamaulipas);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->ciudad_victoria);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->trancoso_region3);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $total);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $promedio);
            }
        }elseif($id == 287){
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30); 
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30); 

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripcion');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Explosión');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Almacén Fresnillo');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Almacén Trancoso');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Almacén Victoria de Durango');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Almacén Virtual de Chihuahua');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Almacén fisico de Chihuahua');
            $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Restante');
            $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Porcentaje');  

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $total = ($dato->total_explosion - $dato->fresnillo - $dato->trancoso - $dato->victoria - $dato->virtual - $dato->fisico);
                $suma = ($dato->fresnillo + $dato->trancoso + $dato->victoria + $dato->virtual + $dato->fisico);
                $promedio = ($suma/$dato->total_explosion)*100;
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->unidad_medida_abr);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->total_explosion);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->fresnillo);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->trancoso);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->victoria);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->virtual);
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->fisico);
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", $total);
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", $promedio);
            }
        }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Explosion insumos' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }


    public function excel_almacenes_explosion($uid)
    {
        $precio_dolar = $this->precio_actual_dolar();
        $reporte = $this->almacen_model->explosionInsumosCli($uid);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Explosión Insumos ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);            

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);            

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Unidad');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Categoría');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad');
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Serie');
            $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'N° Interno');
            $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio Unitario');            

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->marca);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->modelo);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->unidad_medida);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->categoria);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->cantidad);
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_serie);
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->numero_interno);
                if ($dato->tipo_moneda == 'd') {
                    $dato->precio = $dato->precio * $precio_dolar ;
                }
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);                
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Explosion insumos' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

    public function reportes_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $this->load->model('controlvehicular_model');
        $header['titulo'] = 'ReportesCV';
        $header['clase_pagina'] = 'almacen-page';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
    
        $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular');
        $datos['mecanicos'] = $this->controlvehicular_model->todos_los_mecanicos();
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-control-vehicular', $datos);
        $this->load->view('plantillas/footer');
    }

    //funcion para mostrar la vista de incidencias --fernando
    public function reportes_incidencias()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_incidencias');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('personal_model');
        $this->load->model('proyectos_model');
        $header['titulo'] = 'Reportes Incidencias';
        $header['clase_pagina'] = 'almacen-page';
    
        $datos['catalogo'] = $this->almacen_model->catalogo('control_vehicular_detalle');
    
        $datos['almacenes'] = $this->almacen_model->almacenes();
        $datos['token'] = $this->token();
        $this->load->view('plantillas/header', $header);
        $this->load->view('plantillas/menu');
        $this->load->view('almacen/reportes-incidencias', $datos);
        $this->load->view('plantillas/footer');
    }

    public function reporte_excel_incidencias()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_incidencias');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            $this->form_validation->set_rules('estatus', 'Estatus ', 'required');
            $this->form_validation->set_rules('tipo_incidencia', 'Tipo Incidencia ', 'required');
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesIncidencias', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportes-incidencias', 'refresh');
            } else {
                $reporte = $this->almacen_model->reporte_incidencias();
                if (count($reporte) > 0) {
                    //Cargamos la librería de excel.
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte de Incidencias');
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                    //Le aplicamos negrita a los títulos de la cabecera.
                    $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                    //Definimos los títulos de la cabecera.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Unidad');
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Personal');
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Incidencia');
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Fecha Incidencia');
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Costo');
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Estatus');
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Comentario');
                    $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Estatus Contabilidad');
                    $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Comentario Contabilidad');
                    $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Tipo Incidencia');
                    foreach ($reporte as $dato) {
                        //Incrementamos una fila más, para ir a la siguiente.
                        $contador++;
                        //Informacion de las filas de la consulta.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['idtbl_incidencias']);
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_interno']);
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['nombres'] . ' ' . $dato['apellido_paterno'] . ' ' . $dato['apellido_materno']);
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['incidencia']);
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['fecha_incidencia']);
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['costo']);
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['estatus']);
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['comentario_estatus']);
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['estatus_contabilidad']);
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['comentario_estatus_contabilidad']);
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['tipo_incidencia']);
                    }
                    //Le ponemos un nombre al archivo que se va a generar.
                    $archivo = 'Reporte de Incidencias'. '_' . date('d-m-Y  H:i:s') . '.xls';
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $archivo . '"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    //Hacemos una salida al navegador con el archivo Excel.
                    $objWriter->save('php://output');
                } else {
                    $this->session->set_flashdata('errorReportesIncidencias', 'No hay información para generar reporte.');
                    redirect(base_url() . 'almacen/reportes-incidencias', 'refresh');
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesIncidencias', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-incidencias', 'refresh');
        }
    }

    public function reporte_excel_control_vehicular()
    {
        $this->permisos = $this->departamentos_model->permisos('reportes_control_vehicular');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            if ($this->input->post('tipo_de_reporte') == 'Unidad') {
                $this->form_validation->set_rules('tipo_reporte', 'Tipo de Reporte para ' . $this->input->post('tipo_de_reporte'), 'required|in_list[general,asignado,disponible,servicio,verificacion,tenencia,seguro,servicio_km,placas,cambio_propietario,siniestro]');
            } else {
                redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
            }
            if ($this->form_validation->run() == false) {
                $this->session->set_flashdata('errorReportesCV', trim(preg_replace('/\s+/', ' ', $this->form_validation->error_string())));
                redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
            } else {
                $reporte = $this->almacen_model->reporte_control_vehicular($this->input->post('tipo_de_reporte'));
                if (count($reporte) > 0) {
                    //Cargamos la librería de excel.
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('Reporte Por ' . $this->input->post('tipo_de_reporte'));
                    //Contador de filas
                    $contador = 1;
                    //Le aplicamos ancho las columnas.
                    $tipoReporte = '';
                    if ('general'  == $this->input->post('tipo_reporte') || $this->input->post('tipo_reporte') == 'asignado') {
                        $tipoReporte = 'General';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);
                        //$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(60);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
                        //$this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Folio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Kilometraje');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Personal');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Fecha asignación');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Fecha finalización');
                        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Autor');
                        $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Precio Unitario');
                        $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Estatus');
                        $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Ubicación');
                        //$this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Proyecto');
                        
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['folio']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['km_actual']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['nombres'].' '.$dato['apellido_paterno'].' '.$dato['apellido_materno']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['fecha_asignacion']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['fecha_finalizacion']);
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['autor']);
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['precio']);
                            $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato['estado']);
                            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato['ubicacion']);
                            //$this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato['numero_proyecto'] . " " . $dato['nombre_proyecto']);
                        }
                    } elseif ($this->input->post('tipo_reporte') == 'disponible') {
                        $tipoReporte = 'Disponible';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Año');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Ubicacion');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Kilometraje');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['anio']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['ubicacion']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['km_actual']);
                        }
                    } elseif ('verificacion'  == $this->input->post('tipo_reporte') || $this->input->post('tipo_reporte') == 'tenencia' || $this->input->post('tipo_reporte') == 'placas') {
                        $tipoReporte = $this->input->post('tipo_reporte');
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                        if($this->input->post('tipo_reporte') == 'verificacion'){
                            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
                        }
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                        if($this->input->post('tipo_reporte') == 'verificacion'){
                            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                        }
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Kilometraje');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Fecha Tramite');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", $this->input->post('tipo_reporte') == 'tenencia' ? 'Fecha de pago' : 'Próxima Fecha de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Detalle de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Tipo de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Costo');
                        if($this->input->post('tipo_reporte') == 'verificacion'){
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Engomado');
                        }
                        foreach ($reporte as $dato) {                            
                            $contador++;             
                            $engomado = $dato['engomado'];                                                                           
                                    $rgb = "";             
                                    if ($engomado!=NULL){                       
                                    switch ($engomado) {
                                        case "Amarillo": 
                                        $rgb = "F8E317";
                                        break;
                                        case "Rosa":
                                        $rgb = "F86EB1"; 
                                        break;
                                        case "Verde":
                                        $rgb = "189D00";  
                                        break;
                                        case "Rojo": 
                                        $rgb = "F01E14";
                                        break;
                                        case "Azul":
                                        $rgb = "2372F5";
                                        break;  
                                        default:
                                        $rgb = "FFFFFF";
                                        break;                                     
                                    }
                                    $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setRGB($rgb);
                                }                           
       
                            //Incrementamos una fila más, para ir a la siguiente.                                                                                       
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['km_actual']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['proxima_fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['detalle_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['tipo_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['costo']);
                            if($this->input->post('tipo_reporte') == 'verificacion'){
                                $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['engomado']);
                            }
                        }
                    } elseif ($this->input->post('tipo_reporte') == 'cambio_propietario') {
                        $tipoReporte = $this->input->post('tipo_reporte');
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Kilometraje');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Fecha Tramite');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Dueño Anterior');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Nuevo Dueño');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Detalle de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Tipo de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Costo');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['km_actual']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['dueno']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['nuevo_dueno']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['detalle_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['tipo_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['costo']);
                        }
                    } elseif ($this->input->post('tipo_reporte') == 'siniestro') { 
                        $tipoReporte = $this->input->post('tipo_reporte');
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(60);
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Kilometraje');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Descripción Siniestro');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Tipo');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Estatus');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Reportado por');
                        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Atiende');
                        $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Fecha Siniestro');
                        $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Fecha Conclusión');
                        $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Nombre Contacto');
                        $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Descripcion de seguimiento');

                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['km_actual']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['descripcion_siniestro']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['tipo']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['estatus']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['nombre_reporte']);
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['nombre_atiende']);
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['fecha_siniestro']);
                            $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato['fecha_conclusion']);
                            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato['nombre_contacto']);
                            $this->excel->getActiveSheet()->setCellValue("R{$contador}", $dato['descripcion_seguimiento']);
                        }
                    } elseif ('seguro'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'seguro';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Fecha Tramite');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Próxima Fecha de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Detalle de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Tipo de Tramite');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Poliza');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Seguro');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Costo');
                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['proxima_fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['detalle_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['tipo_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['poliza']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['seguro']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['costo']);
                        }
                    } elseif ('servicio'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'servicio';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(30);
            
                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("S{$contador}")->getFont()->setBold(true);
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'ID Servicio');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Descripción');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Entidad federativa placas');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'N° Motor');
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Tipo combustible');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Detalle');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Kilometraje');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Fecha Programada');
                        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Fecha de Inicio');
                        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Fecha Fin');
                        $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Mecanico');
                        $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Creado por');
                        $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Productividad');
                        $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Tipo Mantenimiento');
                        //$this->excel->getActiveSheet()->setCellValue("S{$contador}", 'Proyecto');

                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['idtbl_tramites_vehiculares']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['descripcion']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['entidad_federativa']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['tipo_combustible']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato['detalle_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato['km']);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['fecha_tramite']);
                            $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['fecha_inicio'] ? $dato['fecha_inicio'] : "--");
                            $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato['fecha_finalizacion']);
                            $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato['mecanico']);
                            $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato['autor']);
                            $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato['productividad']);
                            $this->excel->getActiveSheet()->setCellValue("R{$contador}", $dato['rt0']);
                            //$this->excel->getActiveSheet()->setCellValue("S{$contador}", $dato['nombre_proyecto']);
                        }
                    } elseif ('servicio_km'  == $this->input->post('tipo_reporte')) {
                        $tipoReporte = 'servicio_por_km';
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                        /*$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(50);*/

                        //Le aplicamos negrita a los títulos de la cabecera.
                        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true); 
                        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true); 
                        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true); 
                        /*$this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);*/
            
                        //Definimos los títulos de la cabecera.
                        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Unidad');
                        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Marca');
                        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Modelo');
                        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Año');
                        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Serie');
                        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Motor');                        
                        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Placas');
                        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'KM actual');
                        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'KM para servicio');
                        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Faltante');
                        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Estatus');
                        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Ubicacion');
                       /*$this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Operador');*/

                        foreach ($reporte as $dato) {
                            //Incrementamos una fila más, para ir a la siguiente.
                            $contador++;
                            //Informacion de las filas de la consulta.
                            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato['numero_interno']);
                            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['marca']);
                            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['modelo']);
                            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['anio']);
                            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato['numero_serie']);
                            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato['no_motor']);
                            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato['placas']);
                            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato['km_actual']);
                            $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato['km_servicio']);                            
                            $faltante = $dato['km_servicio'] - $dato['km_actual'];
                            $this->excel->getActiveSheet()->setCellValue("J{$contador}", $faltante);

                            $estatus = "";
                            if($dato['iddtl_servicio'] != NULL ){
                                $estatus = "En servicio";
                            }else{
                                if($dato['km_diff'] > 1000 && $dato['km_servicio'] != 0 && $dato['km_servicio'] != NULL){
                                    $estatus = "Servicio al corriente";
                                }else if($dato['km_diff'] <= 1000 && $dato['km_diff'] > 0 && $dato['km_servicio'] != 0 && $dato['km_servicio'] != NULL){
                                    $estatus = "Servicio proximo";
                                }else if($dato['km_diff'] < 0 && $dato['km_servicio'] != 0 && $dato['km_servicio'] != NULL){
                                    $estatus = "Servicio caducado";
                                }
                            }
                            $this->excel->getActiveSheet()->setCellValue("K{$contador}", $estatus);
                            $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato['ruth']); 
                            /*$this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato['nomi'].' '.$dato['apellido_paterno'].' '.$dato['apellido_materno']); */
                                                                                                              
                        }
                    }
                    //Le ponemos un nombre al archivo que se va a generar.
                    $archivo = 'Reporte_por_' . $this->input->post('tipo_de_reporte') . '_' . $this->input->post('tipo_reporte') . '_' . date('d-m-Y  H:i:s') . '.xls';
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $archivo . '"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    //Hacemos una salida al navegador con el archivo Excel.
                    $objWriter->save('php://output');
                } else {
                    $this->session->set_flashdata('errorReportesControlVehicular', 'No hay información para generar reporte.');
                    redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
                }
            }
        } else {
            $this->session->set_flashdata('errorReportesControlVehicular', 'Token Incorrecto.');
            redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
        }
    }

    public function incidencias()
    {
        $this->permisos = $this->departamentos_model->permisos('incidencias');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Incidencias';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $this->load->view('control-vehicular/incidencias', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function caja_chica_cv()
    {
        $this->permisos = $this->departamentos_model->permisos('caja_chica_cv');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Caja Chica CV';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $this->load->view('control-vehicular/caja-chica', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function comprobaciones_solicitud($uid, $ciclo)
    {
        /*$this->permisos = $this->departamentos_model->permisos('caja_chica_cv');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }*/
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Comprobaciones';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['uid'] = $uid;
        $datos['ciclo'] = $ciclo;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        
        $this->load->view('almacen/comprobaciones-solicitud', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function comprobaciones_personal($uid)
    {
        $this->permisos = $this->departamentos_model->permisos('caja_chica_cv');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Comprobaciones';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['uid'] = $uid;
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        
        $this->load->view('almacen/comprobaciones-personal', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function obtener_caja_chica_personal(){
        if($this->input->post('idtbl_tramites_vehiculares') != NULL){
          $result = $this->almacen_model->obtener_caja_chica_solicitud();
        }else{
          $numeroPagina = $this->input->post('nropagina');
          $cantidad = 10;
          $inicio = ($numeroPagina - 1) * $cantidad;
          $result = array(
            "caja_chica" => $this->almacen_model->obtener_caja_chica_personal($this->input->post('fecha_inicial'), $this->input->post('fecha_final'), $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->obtener_caja_chica_personal($this->input->post('fecha_inicial'), $this->input->post('fecha_final'))),
            "monto" => $this->almacen_model->obtener_caja_chica_personal($this->input->post('fecha_inicial'), $this->input->post('fecha_final'), false, false, true)[0]->monto,
            "cantidad" => $cantidad
          );
        }
        echo json_encode($result);
      }

      public function obtener_caja_chica_solicitud(){
        if($this->input->post('idtbl_tramites_vehiculares') != NULL){
          $result = $this->almacen_model->obtener_caja_chica_solicitud();
        }else{
          $numeroPagina = $this->input->post('nropagina');
          $cantidad = 10;
          $inicio = ($numeroPagina - 1) * $cantidad;
          $result = array(
            "caja_chica" => $this->almacen_model->obtener_caja_chica_solicitud($this->input->post('fecha_inicial'), $this->input->post('fecha_final'), $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->obtener_caja_chica_solicitud($this->input->post('fecha_inicial'), $this->input->post('fecha_final'))),
            "monto" => $this->almacen_model->obtener_caja_chica_solicitud($this->input->post('fecha_inicial'), $this->input->post('fecha_final'), false, false, true)[0]->monto,
            "monto_total" => $this->almacen_model->obtener_caja_chica_solicitud($this->input->post('fecha_inicial'), $this->input->post('fecha_final'), false, false, true)[0]->monto_total,
            "cantidad" => $cantidad
          );
        }
        echo json_encode($result);
      }

    public function viaticos()
      {
          $this->permisos = $this->departamentos_model->permisos('viaticos');
          if (!($this->permisos > 0)) {
              redirect(base_url());
          }
          $this->load->model('proyectos_model');
          $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
          $datos['token'] = $this->token();
          $datos['titulo'] = 'Caja Chica';
          $datos['clase_pagina'] = 'almacen-page';
          $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
          $this->load->view('plantillas/header', $datos);
          $this->load->view('plantillas/menu', $datos);
          $datos['precio_dolar'] = $this->precio_actual_dolar();
          $this->load->view('almacen/viaticos', $datos);
          $this->load->view('plantillas/footer', $datos);
    }

    public function caja_chica()
    {
        $this->permisos = $this->departamentos_model->permisos('caja_chica');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $this->load->model('proyectos_model');
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Caja Chica';
        $datos['clase_pagina'] = 'almacen-page';
        $datos['persona_autorizacion'] = $this->personal_model->persona_autorizacion_AG();
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $this->load->view('almacen/caja-chica', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //Función para cargar la vista de generar una solicitud caja chica
    public function generar_caja_chica()
    {
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Generar Ticket';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();   
        $datos['usuarios'] = $this->personal_model->todos_los_usuarios('interno');     
        $datos['clase_pagina'] = 'ticket-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/generar-caja', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //Función para cargar la vista de generar una solicitud caja chica
    public function generar_viaticos()
    {
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $this->load->model('estados_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Generar Viaticos';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['personal'] = $this->personal_model->todos_los_usuarios_almacen();   
        $datos['usuarios'] = $this->personal_model->todos_los_usuarios('interno');
        $datos['cuadrillas'] = $this->almacen_model->getCuadrillas();  
        $datos['estados'] = $this->estados_model->estados();  
        $datos['clase_pagina'] = 'ticket-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/generar-viaticos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function justificaciones_material()
    {
        $this->permisos = $this->departamentos_model->permisos('supervisor');
        if ($this->permisos > 1 || $this->session->userdata('tipo') == 18) {
            $this->load->model('compras_model');
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Justificaciones de material';
            $datos['clase_pagina'] = 'justificaciones-material';
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/justificaciones-material', $datos);
            $this->load->view('plantillas/footer', $datos);
        } else {
            redirect(base_url());
        }
    }

    // Entradas Manuales AG
    public function entradas_manuales()
    {
        $uid = '25839864557600770';
        $this->permisos = $this->departamentos_model->permisos('entradas_manuales');
        if (!($this->permisos > 0)) {
            redirect(base_url());
        }
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Almacen';
        $datos['clase_pagina'] = 'almacen-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $datos['precio_dolar'] = $this->precio_actual_dolar();
        $datos['almacen'] = $this->almacen_model->detalle_almacen($uid);
        $this->load->view('almacen/entradas-manuales', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    public function justificacion_material()
    {
        $this->permisos = $this->departamentos_model->permisos('supervisor');
        if ($this->permisos > 1 || $this->session->userdata('tipo') == 18) {
            $this->load->model('proyectos_model');
            $this->load->model('personal_model');
            $datos['token'] = $this->token();
            $datos['titulo'] = 'Solicitud de almacen';
            $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
            $datos['empalmadores'] = $this->personal_model->getEmpalmadores();
            $datos['auxiliares_empalmes'] = $this->personal_model->getAuxiliaresEmpalmes();
            $datos['supervisores'] = $this->personal_model->getSupervisores();
            $datos['clase_pagina'] = 'justificacion-material';
            $this->load->view('plantillas/header', $datos);
            $this->load->view('plantillas/menu', $datos);
            $this->load->view('almacen/justificacion-material', $datos);
            $this->load->view('plantillas/footer', $datos);
        }
    }

    public function mostrarProductosConsumibles()
    {
        $resultado = $this->almacen_model->getProductosConsumibles($_POST['id_usuario'], $_POST['id_categoria'], $_POST['id_almacen']);
        echo json_encode($resultado);
    }

    public function detalle_justificacion($uid)
    {
        $permiso = $this->departamentos_model->permisos('supervisor');
        if ($permiso > 0 || $this->session->userdata('tipo') == 18) {
            $data['token'] = $this->token();
            $data['titulo'] = 'Detalle Justificacion';
            $data['clase_pagina'] = 'justificacion-page';
            $datos['detalle'] = $this->almacen_model->detalleJustificacionMaterial($uid);
            $id_justificacion_material = $datos['detalle'][0]->idtbl_justificacion_material;
            $datos['detalle_material_ag'] = $this->almacen_model->getMaterialJustificado($id_justificacion_material, 2, 1);
            $datos['detalle_material_ac'] = $this->almacen_model->getMaterialJustificado($id_justificacion_material, 3, 2);
            $this->load->view('plantillas/header', $data);
            $this->load->view('plantillas/menu', $data);
            $this->load->view('almacen/detalle-justificacion', $datos);
            $this->load->view('plantillas/footer');
        } else {
            redirect(base_url());
        }
    }

    public function getCatalogoExistencias(){
        $array_resultado = [
            "registros" => $this->almacen_model->getCatalogoExistencias(true),
            "total" => count($this->almacen_model->getCatalogoExistencias()),
            "offset" => $this->input->post("offset"),
            "limit" => 25
        ];
        echo json_encode($array_resultado);
    }

    public function getCostoAlmacenPorCategoria(){
        $resultado = $this->almacen_model->getCostoAlmacenPorCategoria();
        echo json_encode($resultado);
    }

    public function almacenesClientes(){
        $resultado = $this->almacen_model->almacenesClientes();
        echo json_encode($resultado);
    }

    //Función para subir archivo para herramienta en estatus diferente de almacen y asignado
    public function archivo_alto_costo() {
        $this->load->model('almacen_model');
        $this->load->model('departamentos_model');
        $this->permisos_almacen = $this->departamentos_model->permisos('almacen_alto_costo');
        if(!$this->permisos_almacen > 1)
          redirect(base_url());
        if ($this->input->post('token') && $this->input->post('token') == $this->session->userdata('token')) {
            
                $carpeta = './uploads/herramientas/';
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
          
                $config['upload_path'] = $carpeta;
                $config['allowed_types'] = 'pdf';
                $config['overwrite'] = true;
                try {
                    if ($this->input->post('tipo_tramite') != 'servicio') {
                        $config['file_name'] = $this->input->post('idalmacen');
                        $this->upload->initialize($config);
                        if (!$this->upload->do_upload('archivo')) {
                            throw new Exception('Problema al cargar el archivo del trámite vehicular.');
                        }
                    }
                    if ($this->almacen_model->archivo_alto_costo() != true) {
                        throw new Exception('Problema al guardar trámite vehicular.');
                    }
                    $this->almacen_model->log($this->session->userdata('nombre') . ' subió archivo de herramienta', 'almacen/archivo-alto-costo');
                    $this->session->set_flashdata('exito', 'Registro exitoso.');
                    redirect(base_url() . 'almacen');
                } catch (Exception $e) {
                    $this->session->set_flashdata('error', $e);
                    redirect(base_url() . 'almacen');
                }
            
        } else {
          redirect(base_url());
        }
      }

      //Función que carga la vista de los mantenimientos
    public function mantenimientos()
    {
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Generadores';
        $datos['clase_pagina'] = 'admin-page';        
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/ver-mantenimientos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

      //Función que carga la vista de los mantenimientos
      public function generador_zte()
      {
          $datos['token'] = $this->token();
          $datos['titulo'] = 'Generadores ZTE';
          $datos['clase_pagina'] = 'admin-page';
          $datos['almacenes_generadores'] = $this->almacen_model->todos_almacenes_generadores();
          $datos['segmentos_generadores'] = $this->almacen_model->todos_segmentos_generadores();
          $datos['clientes_generadores'] = $this->almacen_model->todos_clientes_generadores();
          $this->load->view('plantillas/header', $datos);
          $this->load->view('plantillas/menu', $datos);
          $this->load->view('almacen/ver-generadores', $datos);
          $this->load->view('plantillas/footer', $datos);
      }

    //Función para sacar los almacenes que son para generador
    public function generadores_almacenes(){
        
        echo json_encode($this->almacen_model->todos_segmentos_generadores());
    }

    //Función para sacar los almacenes que son para clientes
    public function clientes_almacenes(){
        
        echo json_encode($this->almacen_model->todos_segmentos_clientes());
    }

    //Función que carga la vista de los mantenimientos
    public function explosion_insumos()
    {
        $datos['token'] = $this->token();
        $datos['titulo'] = 'explosion-insumos';
        $datos['clase_pagina'] = 'admin-page';        
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/ver-explosion-insumos', $datos);
        $this->load->view('plantillas/footer', $datos);
    }


    //Función para cargar la vista de generar mantenimientos
    public function generar_mantenimiento()
    {
        $this->load->model('proyectos_model');
        $this->load->model('personal_model');
        $this->load->model('clientes_model');
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Generar Mantenimiento';
        $datos['proyectos'] = $this->proyectos_model->todos_los_proyectos();
        $datos['tramos'] = $this->almacen_model->tramos_fibra_optica();
        $datos['supervisores'] = $this->almacen_model->supervisores_att();
        $datos['unidades_medida'] = $this->almacen_model->unidades_medida();
        $datos['personal'] = $this->personal_model->todos_los_usuarios('interno');
        $datos['clientes'] = $this->clientes_model->todos_los_clientes();
        $datos['ultimo'] = $this->almacen_model->last_id_mantenimiento();       
        $datos['catalogo'] = $this->almacen_model->catalogo('att');
        $datos['clase_pagina'] = 'mantenimiento-page';
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/generar-mantenimiento', $datos);
        $this->load->view('plantillas/footer', $datos);
    }

    //Función para guardar el mantenimiento
    public function guardarMantenimiento()
    {
        $uid = uniqid();
            
        //$this->form_validation->set_rules('imagen6', 'imagen6', 'required');

        //if ($this->form_validation->run() == false) {
        //    echo json_encode(array(
        //        'status' => false,
        //        'message' => 'Crear la imagen de la firma'
        //    ));
        //} else {
            
            /*$carpeta = './uploads/mantenimientos/' . $uid;
                if (!file_exists($carpeta)) {
                    mkdir($carpeta, 0755, true);
                }
                $this->load->library('upload');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'pdf|png|jpg|jpeg';
                $config['overwrite'] = true;*/
                try {
                    //$config['file_name'] = 'evidencias.png';
                    //$this->upload->initialize($config);
                    //if (!$this->upload->do_upload('evidencias')) {
                    //    throw new Exception('Problema al cargar evidencias.');
                    //}                    
                        if ($this->input->post('servicio') == 'mantenimiento') {
                            $parametros = array(
                            'fecha' => date('Y-m-d H:i:s'),
                            'uid' => $uid,
                            'estatus' => 'SV',
                            //'folio' => $this->input->post('folio'),
                            //'evento' => $this->input->post('evento'),
                            'incidente' => $this->input->post('incidente'),
                            //'departamento' => $this->input->post('departamento'),
                            'reporte_proveedor' => $this->input->post('reporte_proveedor'),
                            'fecha_inicio' => $this->input->post('fecha_inicio'),
                            'fecha_fin' => $this->input->post('fecha_fin'),
                            'tipo_actividad' => $this->input->post('tipo_actividad'),
                            'proveedor' => $this->input->post('proveedor'),
                            'tbl_tramo_fibra_optica_idtbl_tramo_fibra_optica' => $this->input->post('clave_oracle'),
                            'descripcion' => $this->input->post('descripcion'),
                            //'segmento' => $this->input->post('segmento'),
                            'tbl_supervisor_att_idtbl_supervisor_att' => $this->input->post('supervisor_att'),
                            'tbl_users_idtbl_users_supervisor' => $this->session->userdata('id'),
                            'tipo_afectacion' => $this->input->post('afectacion'),
                            'ciudad_mercado' => $this->input->post('ciudad_mercado'),
                            'id_panda' => $this->input->post('panda'),
                            'observaciones' => $this->input->post('observaciones'),
                            //'sitio' => $this->input->post('sitio'),
                            //'tbl_usuarios_idtbl_usuarios_tecnico' => $this->input->post('tecnico'),
                            //'origen' => $this->input->post('origen'),
                            //'tbl_usuarios_idtbl_usuarios_auxiliar_primario' => $this->input->post('tecnico_auxiliar_primario'),
                            //'destino' => $this->input->post('destino'),
                            //'tbl_usuarios_idtbl_usuarios_auxiliar_secundario' => $this->input->post('tecnico_auxiliar_secundario'),
                            //'coordenadas' => $this->input->post('coordenadas'),
                            'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                            'tbl_clientes_idtbl_clientes' => $this->input->post('cliente'),
                            'tipo_servicio' => $this->input->post('servicio')
                            );
                        }elseif($this->input->post('servicio') == 'construccion'){
                            $parametros = array(
                                'fecha' => date('Y-m-d H:i:s'),
                                'uid' => $uid,
                                'estatus' => 'SV',
                                'reporte_proveedor' => $this->input->post('reporte_proveedor'),
                                'proveedor' => $this->input->post('proveedor'),
                                'ciudad_mercado' => $this->input->post('ciudad_mercado'),
                                'tbl_users_idtbl_users_supervisor' => $this->session->userdata('id'),
                                'tbl_proyectos_idtbl_proyectos' => $this->input->post('proyecto'),
                                'tbl_clientes_idtbl_clientes' => $this->input->post('cliente'),
                                'tipo_servicio' => $this->input->post('servicio')                                
                            );
                        }
                                  
                    $id_mantenimiento = $this->almacen_model->guardarMantenimiento($parametros);
                    echo json_encode(array(
                        'status' => true,
                        'message' => 'El mantenimiento se ha creado correctamente',
                        'id_mantenimiento' => $id_mantenimiento
                    ));
                } catch (Exception $e) {
                    echo json_encode(array(
                        'status' => false,
                        'message' => $e->getMessage()
                    ));
                }
            
        //}
    }

    //Función para mostrar los mantenimientos
    public function mostrarMantenimientos()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
      "mantenimientos" => $this->almacen_model->mostrarMantenimientos($buscar, $inicio, $cantidad),
      "totalRegistros" => count($this->almacen_model->mostrarMantenimientos($buscar)),
      "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte
    public function mostrarGeneradoresZte()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadores" => $this->almacen_model->mostrarGeneradoresZte($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZte($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte
    public function mostrarGeneradores()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar        
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadores" => $this->almacen_model->mostrarGeneradores($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradores($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte natura
    public function mostrarGeneradoresZteNatura()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresNatura" => $this->almacen_model->mostrarGeneradoresZteNatura($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteNatura($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte colinas
    public function mostrarGeneradoresZteColinas()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresColinas" => $this->almacen_model->mostrarGeneradoresZteColinas($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteColinas($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte B2
    public function mostrarGeneradoresZteB2()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresB2" => $this->almacen_model->mostrarGeneradoresZteB2($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteB2($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Magistral
    public function mostrarGeneradoresZteMagistral()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresMagistral" => $this->almacen_model->mostrarGeneradoresZteMagistral($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteMagistral($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Rosa
    public function mostrarGeneradoresZteRosa()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresRosa" => $this->almacen_model->mostrarGeneradoresZteRosa($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteRosa($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Centro
    public function mostrarGeneradoresZteCentro()
    {
        $this->load->model('departamentos_model');        
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresCentro" => $this->almacen_model->mostrarGeneradoresZteCentro($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteCentro($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Ilustres
    public function mostrarGeneradoresZteIlustres()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresIlustres" => $this->almacen_model->mostrarGeneradoresZteIlustres($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteIlustres($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Acereros
    public function mostrarGeneradoresZteAcereros()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresAcereros" => $this->almacen_model->mostrarGeneradoresZteAcereros($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteAcereros($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Tcg1
    public function mostrarGeneradoresZteTcg1()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresTcg1" => $this->almacen_model->mostrarGeneradoresZteTcg1($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteTcg1($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Tcg2
    public function mostrarGeneradoresZteTcg2()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresTcg2" => $this->almacen_model->mostrarGeneradoresZteTcg2($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteTcg2($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Tcg3
    public function mostrarGeneradoresZteTcg3()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresTcg3" => $this->almacen_model->mostrarGeneradoresZteTcg3($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteTcg3($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Heron
    public function mostrarGeneradoresZteHeron()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresHeron" => $this->almacen_model->mostrarGeneradoresZteHeron($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteHeron($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Jarachina
    public function mostrarGeneradoresZteJarachina()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresJarachina" => $this->almacen_model->mostrarGeneradoresZteJarachina($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteJarachina($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }

    //Función para mostrar los generadores zte Bravo
    public function mostrarGeneradoresZteBravo()
    {
        $this->load->model('departamentos_model');
        //valor a buscar
        $buscar = $this->input->post('buscar');
        $numeroPagina = $this->input->post('nropagina');
        $cantidad = 10;
        $inicio = ($numeroPagina - 1) * $cantidad;
        $data = array(
            "generadoresBravo" => $this->almacen_model->mostrarGeneradoresZteBravo($buscar, $inicio, $cantidad),
            "totalRegistros" => count($this->almacen_model->mostrarGeneradoresZteBravo($buscar)),
            "cantidad" => $cantidad
        );

        echo json_encode($data);
    }


    //Función para ver detalle del mantenimiento
    public function detalle_mantenimiento($uid)
    {
        $data['token'] = $this->token();
        $data['titulo'] = 'Detalle Ticket';
        $data['clase_pagina'] = 'ticket-page';
        $datos['detalle'] = $this->almacen_model->detalle_mantenimiento($uid);
        $datos['uid'] = $uid;
        $this->load->view('plantillas/header', $data);
        $this->load->view('plantillas/menu', $data);
        $this->load->view('almacen/detalle-mantenimiento', $datos);
        $this->load->view('plantillas/footer');
    }


    public function getCatalogoPorNeodata() {
        if($_POST['neodata'] == '' || $_POST['neodata'] == NULL) {
            echo json_encode([]);
        } else {
            $resultado = $this->almacen_model->getCatalogoPorNeodata($_POST['neodata'], isset($_POST['tipo']) ? $_POST['tipo'] : NULL);
            //echo $_POST['tipo'];
            echo json_encode($resultado);
        }
    }

    public function getCatalogoTraspasos(){
        //$tipo = $datos['traspaso']->tipo_movimiento;
        $tipo = $_POST['tipo_movimiento'];
        $datos = [];
        if ($_POST['almacen_origen'] != false) {
            if ($tipo == 'herramienta') {
                $datos = $this->almacen_model->inventario_almacen($_POST['almacen_origen'], 'alto-mediano-costo', $_POST['neodata']);
            } elseif ($tipo == 'consumible') {
                $datos = $this->almacen_model->inventario_almacen($_POST['almacen_origen'], 'material', $_POST['neodata']);
            } else {
                $datos = $this->almacen_model->inventario_almacen($_POST['almacen_origen'], 'general', $_POST['neodata']);
            }
        }
        echo json_encode($datos);
    }

    public function verificacionArchivo(){
        $result = $this->almacen_model->verificacionArchivo();
        echo json_encode($result);
    }

    public function detalle_servicio($uid) {
      if($uid === 'null') {
        $this->session->set_flashdata('error', 'No se encontró la orden de servicio');
        redirect(base_url() . 'servicios/ordenes');
      }
      else {
        $this->load->model("servicios_model");
        $datos['token'] = $this->token();
        $datos['titulo'] = 'Detalle Generador';
        $datos['clase_pagina'] = 'home-page';
        //$datos['orden'] = $this->servicios_model->detalle_orden_servicio($uid);
        //$datos['bandera'] = $this->servicios_model->validar_uid_solicitud_material($uid);
        $datos['detalle'] = $this->almacen_model->detalle_mantenimiento($uid);
        $datos['detalle_generador'] = $this->almacen_model->detalle_generador($uid);
        //if($datos['detalle'][0]->estatus != 'SV'){
            $datos['justificacion'] = $this->almacen_model->justificacion_generador($datos['detalle'][0]->idtbl_mantenimientos);
            $datos['kilometrajes'] = $this->almacen_model->getMileage($datos['detalle'][0]->idtbl_mantenimientos);
        //}
        $datos['lideres'] = $this->personal_model->todos_los_usuarios_sin_tipo('');
        $datos['supervisores'] = $this->personal_model->todos_los_supervisores('interno', '');
        $datos['detalleSolicitudMaterial'] = $this->almacen_model->detalleSolicitudMaterial($datos['detalle'][0]->idtbl_mantenimientos);
        $datos['detalleAsignacionMaterial'] = $this->almacen_model->detalleAsignacionMaterial($datos['detalle'][0]->idtbl_mantenimientos);
        $datos['materialesExtemporaneos'] = $this->almacen_model->materialesExtemporaneos($datos['detalle'][0]->idtbl_mantenimientos);
        //$datos['detalleGenerador'] = $this->almacen_model->detalleGenerador($datos['detalle'][0]->idtbl_mantenimientos);
        $datos['observaciones'] = $this->almacen_model->observaciones_generador($datos['detalle'][0]->idtbl_mantenimientos);
        if($datos['detalle'][0]->estatus != 'SV' && $datos['detalle'][0]->estatus != 'cancelado'){
            $datos['imagenes'] = $this->almacen_model->imagenes_mantenimiento($uid);
        }
        if($this->session->userdata('tipo') == 9){
            $datos['brazos'] = $this->almacen_model->brazos_asignados();
        }
        $datos['uid'] = $uid;
        //$datos['tipo_servicio'] = $tipo_servicio;
        $datos['materiales'] = $this->servicios_model->materiales($uid);
        $this->load->view('plantillas/header', $datos);
        $this->load->view('plantillas/menu', $datos);
        $this->load->view('almacen/detalle-mantenimiento', $datos);
        $this->load->view('almacen/detalle_servicios', $datos);
        $this->load->view('plantillas/footer', $datos);
      }
    }

    public function guardarSolicitudServicio(){
        $fotos = Array();
        $this->load->library('upload');
        $carpeta = './uploads/solicitud_servicio/'. $this->input->post('uid');
        if(!file_exists($carpeta)){
            mkdir($carpeta, 0755);
        }
        foreach ($_FILES as $key => $value) {
            if($value["name"] != ""){
                $uid = uniqid();
                $carpeta = './uploads/solicitud_servicio/'. $this->input->post('uid');
                $urlimg = $carpeta . '/';
                $config['upload_path'] = $urlimg;
                $config['allowed_types'] = 'gif|jpg|png';
                $config['overwrite'] = TRUE;
                try {
                    //$config['file_name'] = $key;
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload($key)) {
                        throw new Exception('Problema al cargar la foto.');
                    }else{
                        $ext = $this->upload->data('file_ext');
                        $fotos[$key] = $urlimg . $value["name"] . $ext;
                    }
                } catch (Exception $e) {
                    echo json_encode(array(
                    'status' => false,
                    'message' => 'Error al subir fotos.'
                    ));
                    return;
                }
            }
        }
        $result = $this->almacen_model->guardarSolicitudServicio();
        echo json_encode($result);
    }

    public function verificarGenerador(){
                
        $result = $this->almacen_model->verificarGenerador();
        echo json_encode($result);

    }

    public function finalizarGenerador(){
                
        $result = $this->almacen_model->finalizarGenerador();
        echo json_encode($result);

    }

    public function comprobarGenerador(){
                
        $result = $this->almacen_model->comprobarGenerador();
        echo json_encode($result);

    }

    public function excel_almacenes_stock()
    {
        $reporte = $this->almacen_model->productosAlmacenStock($this->input->post('id_almacen'));
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Productos Almacen ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            
            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Código');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Minimo');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Existencias');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->minimo);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->existencias);
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Productos almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesControlVehicular', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
        }
    }

    public function excel_solicitudes_refacciones()
    {
        $reporte = $this->almacen_model->reporteSolicitudesRefacciones();
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Solicitudes Refacciones CV');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(20);
            
            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("S{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            if($this->input->post('tipo_producto') == "Refacciones Control Vehicular"){
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'ID Solicitud Material');                
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'UID Solicitud');
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Estatus solicitud');
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Comentarios');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'UID Servicio');
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Fecha creación');
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Proyecto');
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Eco');
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Kilometraje');
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Solicitó material');
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Entregó material');
                $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'Recibió material');
                $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'Neodata');
                $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'Descripción');
                $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'Cantidad');
                $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'Unidad de medida');
                $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'Precio');
                $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'Moneda');
                $this->excel->getActiveSheet()->setCellValue("S{$contador}", 'Total');                                
            }else{
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'ID Solicitud Material');
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'UID');
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Estatus');
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Comentario');
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Fecha Creación');
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Marca');
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Modelo');
                $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Descripción');
                $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'Cantidad');
                $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'Precio');
                $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'Total');
            }


            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                $estatus = "";
                /*if($dato->estatus_solicitud == "SRCV"){
                    $estatus = "Surtida";
                }else if($dato->estatus_solicitud == "AG"){
                    $estatus = "Pendiente Aprobación AG";
                }else if($dato->estatus_solicitud == "RCV"){
                    $estatus = "Pendiente Aprobación CV";
                }else if($dato->estatus_solicitud == "cancelada RCV"){
                    $estatus = "Cancelada";
                }else if($dato->estatus_solicitud == "SU RCV"){
                    $estatus = "Aprobada AG";
                }*/

                if ($dato->estatus_solicitud == 'S' || $dato->estatus_solicitud == 'SRCV' || $dato->estatus_solicitud == 'SCV') {
                    $estatus = 'Surtida';
                } else if ($dato->estatus_solicitud == 'SU CV') {
                    $estatus = 'Aprobado por CV';
                } else if ($dato->estatus_solicitud == 'SU' || $dato->estatus_solicitud == "SU RCV") {
                    $estatus = 'Aprobado por AG';
                } else if ($dato->estatus_solicitud == 'AG') {
                    $estatus = 'Pendiente Aprobación AG';
                } else if ($dato->estatus_solicitud == 'CO PM') {
                    $estatus = 'Pendiente Aprobación CO';
                } else if ($dato->estatus_solicitud == 'cancelada CO') {
                    $estatus = 'Cancelada CO';
                } else if ($dato->estatus_solicitud == 'cancelada AG') {
                    $estatus = 'Cancelada AG';
                } else if ($dato->estatus_solicitud == 'cancelada CV') {
                    $estatus = 'Cancelada CV';
                } else if ($dato->estatus_solicitud == 'cancelada PM') {
                    $estatus = 'Cancelada PM';
                } else if ($dato->estatus_solicitud == 'PM') {
                    $estatus = 'Pendiente Aprobación PM';
                } else if ($dato->estatus_solicitud == 'RCV') {
                    $estatus = 'Pendiente Aprobación CV';
                } else if ($dato->estatus_solicitud == 'cancelada PM CV') {
                    $estatus = 'Cancelada PM';
                } else if ($dato->estatus_solicitud == 'cancelada CO CV') {
                    $estatus = 'Cancelada CO';
                } else if ($dato->estatus_solicitud == 'CO CV') {
                    $estatus = 'Pendiente Aprobación CO';
                } else if($dato->estatus_solicitud == "RCV"){
                    $estatus = "Pendiente Aprobación CV";
                } else if($dato->estatus_solicitud == "cancelada RCV"){
                    $estatus = "Cancelada CV";
                }

                //Informacion de las filas de la consulta.
                if($this->input->post('tipo_producto') == "Refacciones Control Vehicular"){
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->idtbl_solicitud_material);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $estatus);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->comentarios);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->tramite);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->fecha_creacion);
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->proyecto);
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->numero_interno);
                    $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->km_actual);
                    $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->nombre_autor);                                        
                    $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->nombre_ag); 
                    $this->excel->getActiveSheet()->setCellValue("L{$contador}", $dato->recibe_nombre . $dato->recibe_paterno . $dato->recibe_materno);                                                                               
                    $this->excel->getActiveSheet()->setCellValue("M{$contador}", $dato->neodata);
                    $this->excel->getActiveSheet()->setCellValue("N{$contador}", $dato->descripcion);
                    $this->excel->getActiveSheet()->setCellValue("O{$contador}", $dato->cantidad);
                    $this->excel->getActiveSheet()->setCellValue("P{$contador}", $dato->unidad);
                    $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $dato->precio);
                    $this->excel->getActiveSheet()->setCellValue("R{$contador}", $dato->tipo_moneda);
                    $this->excel->getActiveSheet()->setCellValue("S{$contador}", $dato->total);                                        
                }else{
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->idtbl_solicitud_material);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->uid);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $estatus);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->comentarios);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->fecha_creacion);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->marca);
                    $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->modelo);
                    $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->descripcion);
                    $this->excel->getActiveSheet()->setCellValue("I{$contador}", $dato->cantidad);
                    $this->excel->getActiveSheet()->setCellValue("J{$contador}", $dato->precio);
                    $this->excel->getActiveSheet()->setCellValue("K{$contador}", $dato->total);
                }
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Productos almacen' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesControlVehicular', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
        }
    }

    public function excel_combustible_km_cv()
    {
        $reporte = $this->almacen_model->combustible_km_cv($this->input->post('id_almacen'));
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Combustible Kilometraje ');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
            
            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Numero Interno');
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Fecha');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'KM');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Tipo Combustible');
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Litros Combustible');
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Precio');
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Total');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;
                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->numero_interno);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->fecha_carga);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->km_actual);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->tipo_combustible);
                $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->litros_combustible);
                $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->precio);
                $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->litros_combustible * $dato->precio);
            }


            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Combustible Kilometraje' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesControlVehicular', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/reportes-control-vehicular', 'refresh');
        }
    }

    //Vista para cargar archivo csv
  public function cargar_csv() {
    $datos['token'] = $this->token();
    $datos['titulo'] = 'Generadores';
    $datos['clase_pagina'] = 'generadores-page';
    $this->load->view('plantillas/header', $datos);
    $this->load->view('plantillas/menu', $datos);
    $this->load->view('almacen/cargar-csv.php', $datos);
    $this->load->view('plantillas/footer', $datos);
  }

  //Procesa un archivo csv para generadores
  public function procesar_csv() {          
      if (is_numeric($this->input->post('lat_a'))) {
        if ($tramo = $this->almacen_model->existe_tramo($this->input->post('tramo'), $this->input->post('segmento'), $this->input->post('tipo_red')) == false) {
          if ($this->almacen_model->procesar_csv())
            echo json_encode(array(
              'error' => false,
              'texto' => 'Success',
              'row' => $this->input->post('row')
            ));
          else
            echo json_encode(array(
              'error' => true,
              'texto' => 'Error al insertar',
              'row' => $this->input->post('row')
            ));
        }else{
            echo json_encode(array(
                'error' => true,
                'texto' => 'ya_existe',
                'row' => $this->input->post('row')
              ));
        }
      } else {
        if (stripos($this->input->post('tramo'), 'fecha') || stripos($this->input->post('tramo'), 'hora')) {
          $fecha = substr($this->input->post('tramo'), strpos($this->input->post('tramo'), ':') + 1);
        }
        echo json_encode(array(
          'error' => true,
          'texto' => 'no_numerico',
          'row' => $this->input->post('row')
        ));
      }
    
  }


  //Procesa un archivo csv para compras
    public function procesar_csv_compras() {          
        
        $neodata = $this->almacen_model->existe_neodata($this->input->post('neodata'));
        if ($neodata == false) {
            echo json_encode(array(
                'error' => true,
                'texto' => 'no_existe',
                'row' => $this->input->post('row')
            ));

        }else{
            echo json_encode(array(
                'error' => false,
                'texto' => 'Success',
                'row' => $this->input->post('row'),
                'idtbl_catalogo' => $neodata
            ));
        }
        
    }

    public function pdf_generador($cluster){
        
        $viewdata["detalle"] = $this->almacen_model->mostrarGeneradores();        
        $html = $this->load->view('pdf/generador_zte', $viewdata, TRUE);
        // Cargamos la librería
        $this->load->library('pdfgenerator');
        // definamos un nombre para el archivo. No es necesario agregar la extension .pdf
        $filename = $cluster;
        // generamos el PDF. Pasemos por encima de la configuración general y definamos otro tipo de papel
        $this->pdfgenerator->generate($html, $filename, true, 'Letter', 'portrait');
    }


    //Eliminar un brazo de generadores
    public function delete_arm($id)
    {
        $check = $this->almacen_model->delete_arm($id);
        
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' eliminó el brazo');
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    //Eliminar usuario de cuadrilla
    public function quitar_usuario_cuadrilla()
    {
        $id = $this->input->post('id');
        
        $check = $this->almacen_model->quitar_usuario_cuadrilla($id);
        
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' eliminó el usuario de la cuadrilla');
            echo json_encode(array(
                'status' => true,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    //Cancelar un brazo de generadores
    public function cancel_arm($id)
    {
        $check = $this->almacen_model->cancel_arm($id);
        
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' canceló el brazo');
            echo json_encode(array(
                'status' => true,
                'message' => 'Se canceló correctamente'
            ));
        } else {
            echo json_encode(array(
                'status' => false,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    //Traspasar material de un brazo a otro
    public function traspaso_brazo()
    {
        $check = $this->almacen_model->traspaso_brazo();
        
        if ($check) {
            $this->session->set_flashdata('exito', 'Registro exitoso');
            $this->almacen_model->log($this->session->userdata('nombre') . ' traspaso material');
            echo json_encode(array(
                'error' => false,
                'message' => 'Se aprobó correctamente'
            ));
        } else {
            echo json_encode(array(
                'error' => true,
                'message' => 'Ocurrio un problema intente nuevamente.l3'
            ));
        }
    }

    public function cuadre_materiales($idtbl_almacenes){
        $reporte = $this->almacen_model->cuadre_materiales($idtbl_almacenes);
        
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Cuadre materiales');
        //Contador de filas
        $contador = 1;
        //Le aplicamos ancho las columnas.
        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 
        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);              
        //Le aplicamos negrita a los títulos de la cabecera.
        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
        //Definimos los títulos de la cabecera.
        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Existencias');
        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Cantidad Entrada');
        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Cantidad Salida');
        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Cantidad Devolución');
        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'Cantidad Entrada Traspaso');
        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'Cantidad Salida Traspaso');

        foreach ($reporte as $dato) {
            //Incrementamos una fila más, para ir a la siguiente.
            $contador++;
            //Informacion de las filas de la consulta.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->existencias);
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato->cantidad_entrada);
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $dato->cantidad_salida);
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $dato->cantidad_devolucion);
            $this->excel->getActiveSheet()->setCellValue("G{$contador}", $dato->cantidad_traspaso);
            $this->excel->getActiveSheet()->setCellValue("H{$contador}", $dato->cantidad_salida_traspaso);
        }

        //Le ponemos un nombre al archivo que se va a generar.
        $archivo = 'Cuadre Material-' . $idtbl_almacenes . '-' . date('d-m-Y  H:i:s') . '.xls';
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $archivo . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        //Hacemos una salida al navegador con el archivo Excel.
        $objWriter->save('php://output');
    }

    public function excel_generador($idtbl_segmento){
        $reporte = $this->almacen_model->excel_generador($idtbl_segmento);
        $reporte_justificado = $this->almacen_model->excel_justificado($idtbl_segmento);
        $reporte_devuelto = $this->almacen_model->excel_devolucion($idtbl_segmento);
        
        
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Generador');
        //Contador de filas
        $contador = 1;
        //Le aplicamos ancho las columnas.
        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        
        //Le aplicamos negrita a los títulos de la cabecera.
        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
        
        //Definimos los títulos de la cabecera.
        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Entregado');
        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Justificado');
        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Devuelto');
        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Diferencia por justificar');

        $index_justificado = 0;
        $index_devuelto = 0;
        foreach ($reporte as $dato) {
            
                    $devuelto = 0;
                    $justificado = 0;
                    $diferencia = 0;
                    if (isset($reporte_justificado[$index_justificado]->neodata) && $dato->neodata == $reporte_justificado[$index_justificado]->neodata) {
                        $justificado = $reporte_justificado[$index_justificado]->TOTAL;
                        $index_justificado++;
                    }
                    if (isset($reporte_devuelto[$index_devuelto]->neodata) && $dato->neodata == $reporte_devuelto[$index_devuelto]->neodata) {
                        $devuelto = $reporte_devuelto[$index_devuelto]->TOTAL;
                        $index_devuelto++;
                    }
                    $diferencia = $dato->TOTAL - $justificado - $devuelto;
                    //Incrementamos una fila más, para ir a la siguiente.
                    $contador++;
                    //Informacion de las filas de la consulta.
                    $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
                    $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
                    $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->TOTAL);
                    $this->excel->getActiveSheet()->setCellValue("D{$contador}", $justificado);
                    $this->excel->getActiveSheet()->setCellValue("E{$contador}", $devuelto);
                    $this->excel->getActiveSheet()->setCellValue("F{$contador}", $diferencia);
                
            
        }

        //Le ponemos un nombre al archivo que se va a generar.
        $archivo = 'Cuadre Material' . date('d-m-Y  H:i:s') . '.xls';
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $archivo . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        //Hacemos una salida al navegador con el archivo Excel.
        $objWriter->save('php://output');
    }

    public function reporte_diferencia($idtbl_mantenimientos){
        $reporte = $this->almacen_model->reporte_diferencia($idtbl_mantenimientos);
        
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Reporte');
        //Contador de filas
        $contador = 1;
        //Le aplicamos ancho las columnas.
        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        
        //Le aplicamos negrita a los títulos de la cabecera.
        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("E{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
        
        //Definimos los títulos de la cabecera.
        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'Neodata');
        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Descripción');
        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Entregado');
        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Justificado');
        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'Devuelto');
        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'Diferencia por justificar');

        
        foreach ($reporte as $dato) {
            $justificado = 0;
            $devuelto = 0;
            $diferencia = 0;
            if ($dato->justificado != NULL) {
                $justificado = $dato->justificado;
            }
            if ($dato->devuelto != NULL) {
                $devuelto = $dato->devuelto;
            }
            $diferencia = $dato->TOTAL - $justificado - $devuelto;
            //Incrementamos una fila más, para ir a la siguiente.
            $contador++;
            //Informacion de las filas de la consulta.
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $dato->neodata);
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato->descripcion);
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato->TOTAL);
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", $justificado);
            $this->excel->getActiveSheet()->setCellValue("E{$contador}", $devuelto);
            $this->excel->getActiveSheet()->setCellValue("F{$contador}", $diferencia);            
        }

        //Le ponemos un nombre al archivo que se va a generar.
        $archivo = 'Reporte Material' . date('d-m-Y  H:i:s') . '.xls';
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $archivo . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        //Hacemos una salida al navegador con el archivo Excel.
        $objWriter->save('php://output');
    }

    public function justificarAsignacionRH(){
      $this->load->library('upload');
      $uid = uniqid();
      $carpeta = './uploads/justificacion_asignaciones_rh/';
      $config['upload_path'] = $carpeta;
      $config['allowed_types'] = 'pdf';
      $config['overwrite'] = true;
      try {
        $config['file_name'] = $uid;
        $this->upload->initialize($config);
        if (!$this->upload->do_upload('file')) {
          throw new Exception('Problema al cargar archivo.');
        }
        if (!$this->almacen_model->justificar_asignacion_rh($uid)) {
          echo json_encode(array(
            'error' => true,
            'mensaje' => 'Error al actulizar.'
          ));
        }else{
          echo json_encode(array(
            'error' => false,
            'mensaje' => 'Se actualizo correctamente.'
          ));
        }
      } catch (Exception $e) {
        echo json_encode(array(
          'error' => true,
          'mensaje' => $e->getMessage()
        ));
      }
    }

    public function verificarJustificacionAsignacionRH(){
        if (!$this->almacen_model->verificarJustificacionAsignacionRH()) {
          echo json_encode(array(
            'error' => true,
            'mensaje' => 'Error al actulizar.'
          ));
        }else{
          echo json_encode(array(
            'error' => false,
            'mensaje' => 'Se actualizo correctamente.'
          ));
        }
    }

    //Función para exportar a excel el reporte de combustible
    public function getReporteCombustible() {
      $this->load->model('almacen_model');
        $reporte = $this->almacen_model->getReporteCombustible($_POST['parametro'], $_POST['rango']);
        if (count($reporte) > 0) {
            //Cargamos la librería de excel.
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('Reporte Combustible');
            //Contador de filas
            $contador = 1;
            //Le aplicamos ancho las columnas.
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);

            //Le aplicamos negrita a los títulos de la cabecera.
            $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);

            //Definimos los títulos de la cabecera.
            $cabecera = '';
            if(isset($reporte[0]['fecha'])) {
                $cabecera = 'Fecha';
            } elseif(isset($reporte[0]['semana'])) {
                $cabecera = 'Semana del año';
            } elseif(isset($reporte[0]['mes'])) {
                $cabecera = 'Mes del año';
            }
            $this->excel->getActiveSheet()->setCellValue("A{$contador}", $cabecera);
            $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'Número interno');
            $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'Litros');
            $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'Precio');

            foreach ($reporte as $dato) {
                //Incrementamos una fila más, para ir a la siguiente.
                $contador++;

                $info = '';
                if(isset($dato['fecha'])) {
                    $info = $dato['fecha'];
                } elseif(isset($dato['semana'])) {
                    $info = $dato['semana'];
                } elseif(isset($dato['mes'])) {
                    $info = $dato['mes'];
                }

                //Informacion de las filas de la consulta.
                $this->excel->getActiveSheet()->setCellValue("A{$contador}", $info);
                $this->excel->getActiveSheet()->setCellValue("B{$contador}", $dato['numero_interno']);
                $this->excel->getActiveSheet()->setCellValue("C{$contador}", $dato['litros_combustible']);
                $this->excel->getActiveSheet()->setCellValue("D{$contador}", $dato['precio']);
                
            }

            //Le ponemos un nombre al archivo que se va a generar.
            $archivo = 'Reporte_Combustible' . date('d-m-Y  H:i:s') . '.xls';
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $archivo . '"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
            //Hacemos una salida al navegador con el archivo Excel.
            $objWriter->save('php://output');
        } else {
            $this->session->set_flashdata('errorReportesAG', 'No hay información para generar reporte.');
            redirect(base_url() . 'almacen/', 'refresh');
        }
    }

}